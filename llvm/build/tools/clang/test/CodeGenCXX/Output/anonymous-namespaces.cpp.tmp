; ModuleID = '/home/jazouani/llvm/llvm-3.2/tools/clang/test/CodeGenCXX/anonymous-namespaces.cpp'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin10"

%"struct.<anonymous namespace>::X::E" = type { i32 (...)** }
%"struct.<anonymous namespace>::X::EBase" = type { i8 }

@_ZN12_GLOBAL__N_11bE = internal global i32 0, align 4
@_ZN12_GLOBAL__N_1L1cE = internal global i32 0, align 4
@_ZN12_GLOBAL__N_11D1dE = internal global i32 0, align 4
@_ZN12_GLOBAL__N_11aE = internal global i32 0, align 4
@_ZTVN10__cxxabiv121__vmi_class_type_infoE = external global i8*
@_ZTSN12_GLOBAL__N_11X1EE = internal constant [21 x i8] c"N12_GLOBAL__N_11X1EE\00"
@_ZTVN10__cxxabiv117__class_type_infoE = external global i8*
@_ZTSN12_GLOBAL__N_11X5EBaseE = internal constant [25 x i8] c"N12_GLOBAL__N_11X5EBaseE\00"
@_ZTIN12_GLOBAL__N_11X5EBaseE = internal unnamed_addr constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([25 x i8]* @_ZTSN12_GLOBAL__N_11X5EBaseE, i32 0, i32 0) }
@_ZTIN12_GLOBAL__N_11X1EE = internal unnamed_addr constant { i8*, i8*, i32, i32, i8*, i64 } { i8* bitcast (i8** getelementptr inbounds (i8** @_ZTVN10__cxxabiv121__vmi_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([21 x i8]* @_ZTSN12_GLOBAL__N_11X1EE, i32 0, i32 0), i32 0, i32 1, i8* bitcast ({ i8*, i8* }* @_ZTIN12_GLOBAL__N_11X5EBaseE to i8*), i64 -6141 }
@_ZTVN12_GLOBAL__N_11X1EE = internal unnamed_addr constant [5 x i8*] [i8* null, i8* null, i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64 }* @_ZTIN12_GLOBAL__N_11X1EE to i8*), i8* bitcast (void (%"struct.<anonymous namespace>::X::E"*)* @_ZN12_GLOBAL__N_11X1ED1Ev to i8*), i8* bitcast (void (%"struct.<anonymous namespace>::X::E"*)* @_ZN12_GLOBAL__N_11X1ED0Ev to i8*)]
@_ZTTN12_GLOBAL__N_11X1EE = internal unnamed_addr constant [1 x i8*] [i8* bitcast (i8** getelementptr inbounds ([5 x i8*]* @_ZTVN12_GLOBAL__N_11X1EE, i64 0, i64 3) to i8*)]
@llvm.global_ctors = appending global [1 x { i32, void ()* }] [{ i32, void ()* } { i32 65535, void ()* @_GLOBAL__I_a }]

define internal void @__cxx_global_var_init() section "__TEXT,__StaticInit,regular,pure_instructions" {
entry:
  %call = call i32 @_Z1fv()
  store i32 %call, i32* @_ZN12_GLOBAL__N_11bE, align 4
  ret void
}

declare i32 @_Z1fv()

define internal void @__cxx_global_var_init1() section "__TEXT,__StaticInit,regular,pure_instructions" {
entry:
  %call = call i32 @_Z1fv()
  store i32 %call, i32* @_ZN12_GLOBAL__N_1L1cE, align 4
  ret void
}

define internal void @__cxx_global_var_init2() section "__TEXT,__StaticInit,regular,pure_instructions" {
entry:
  %call = call i32 @_Z1fv()
  store i32 %call, i32* @_ZN12_GLOBAL__N_11D1dE, align 4
  ret void
}

define i32 @_Z8concretev() {
entry:
  %0 = load i32* @_ZN12_GLOBAL__N_11aE, align 4
  %call = call i32 @_ZN12_GLOBAL__N_13fooEv()
  %add = add nsw i32 %0, %call
  %call1 = call i32 @_ZN12_GLOBAL__N_11A3fooEv()
  %add2 = add nsw i32 %add, %call1
  ret i32 %add2
}

define internal i32 @_ZN12_GLOBAL__N_13fooEv() nounwind {
entry:
  ret i32 32
}

define internal i32 @_ZN12_GLOBAL__N_11A3fooEv() nounwind {
entry:
  ret i32 45
}

define void @_Z7test_XEv() {
entry:
  %exception = call i8* @__cxa_allocate_exception(i64 8) nounwind
  %0 = bitcast i8* %exception to %"struct.<anonymous namespace>::X::E"*
  %1 = bitcast %"struct.<anonymous namespace>::X::E"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 8, i32 8, i1 false)
  call void @_ZN12_GLOBAL__N_11X1EC1Ev(%"struct.<anonymous namespace>::X::E"* %0) nounwind
  call void @__cxa_throw(i8* %exception, i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64 }* @_ZTIN12_GLOBAL__N_11X1EE to i8*), i8* bitcast (void (%"struct.<anonymous namespace>::X::E"*)* @_ZN12_GLOBAL__N_11X1ED1Ev to i8*)) noreturn
  unreachable

return:                                           ; No predecessors!
  ret void
}

declare i8* @__cxa_allocate_exception(i64)

declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) nounwind

define internal void @_ZN12_GLOBAL__N_11X1EC1Ev(%"struct.<anonymous namespace>::X::E"* %this) unnamed_addr nounwind inlinehint align 2 {
entry:
  %this.addr = alloca %"struct.<anonymous namespace>::X::E"*, align 8
  store %"struct.<anonymous namespace>::X::E"* %this, %"struct.<anonymous namespace>::X::E"** %this.addr, align 8
  %this1 = load %"struct.<anonymous namespace>::X::E"** %this.addr
  %0 = bitcast %"struct.<anonymous namespace>::X::E"* %this1 to %"struct.<anonymous namespace>::X::EBase"*
  %1 = bitcast %"struct.<anonymous namespace>::X::E"* %this1 to i8***
  store i8** getelementptr inbounds ([5 x i8*]* @_ZTVN12_GLOBAL__N_11X1EE, i64 0, i64 3), i8*** %1
  ret void
}

define internal void @_ZN12_GLOBAL__N_11X1ED1Ev(%"struct.<anonymous namespace>::X::E"* %this) unnamed_addr align 2 {
entry:
  %this.addr = alloca %"struct.<anonymous namespace>::X::E"*, align 8
  store %"struct.<anonymous namespace>::X::E"* %this, %"struct.<anonymous namespace>::X::E"** %this.addr, align 8
  %this1 = load %"struct.<anonymous namespace>::X::E"** %this.addr
  call void @_ZN12_GLOBAL__N_11X1ED2Ev(%"struct.<anonymous namespace>::X::E"* %this1, i8** getelementptr inbounds ([1 x i8*]* @_ZTTN12_GLOBAL__N_11X1EE, i64 0, i64 0))
  ret void
}

declare void @__cxa_throw(i8*, i8*, i8*)

define void @_ZN5test24testEv() {
entry:
  call void @_ZN5test21A1BINS_12_GLOBAL__N_11CEE3fooEv()
  ret void
}

define internal void @_ZN5test21A1BINS_12_GLOBAL__N_11CEE3fooEv() nounwind align 2 {
entry:
  ret void
}

define internal void @_ZN12_GLOBAL__N_11X1ED2Ev(%"struct.<anonymous namespace>::X::E"* %this, i8** %vtt) unnamed_addr nounwind align 2 {
entry:
  %this.addr = alloca %"struct.<anonymous namespace>::X::E"*, align 8
  %vtt.addr = alloca i8**, align 8
  store %"struct.<anonymous namespace>::X::E"* %this, %"struct.<anonymous namespace>::X::E"** %this.addr, align 8
  store i8** %vtt, i8*** %vtt.addr, align 8
  %this1 = load %"struct.<anonymous namespace>::X::E"** %this.addr
  %vtt2 = load i8*** %vtt.addr
  ret void
}

define internal void @_ZN12_GLOBAL__N_11X1ED0Ev(%"struct.<anonymous namespace>::X::E"* %this) unnamed_addr align 2 {
entry:
  %this.addr = alloca %"struct.<anonymous namespace>::X::E"*, align 8
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store %"struct.<anonymous namespace>::X::E"* %this, %"struct.<anonymous namespace>::X::E"** %this.addr, align 8
  %this1 = load %"struct.<anonymous namespace>::X::E"** %this.addr
  invoke void @_ZN12_GLOBAL__N_11X1ED1Ev(%"struct.<anonymous namespace>::X::E"* %this1)
          to label %invoke.cont unwind label %lpad

invoke.cont:                                      ; preds = %entry
  %0 = bitcast %"struct.<anonymous namespace>::X::E"* %this1 to i8*
  call void @_ZdlPv(i8* %0) nounwind
  ret void

lpad:                                             ; preds = %entry
  %1 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %2 = extractvalue { i8*, i32 } %1, 0
  store i8* %2, i8** %exn.slot
  %3 = extractvalue { i8*, i32 } %1, 1
  store i32 %3, i32* %ehselector.slot
  %4 = bitcast %"struct.<anonymous namespace>::X::E"* %this1 to i8*
  call void @_ZdlPv(i8* %4) nounwind
  br label %eh.resume

eh.resume:                                        ; preds = %lpad
  %exn = load i8** %exn.slot
  %sel = load i32* %ehselector.slot
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn, 0
  %lpad.val2 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1
  resume { i8*, i32 } %lpad.val2
}

declare i32 @__gxx_personality_v0(...)

declare void @_ZdlPv(i8*) nounwind

define internal void @_GLOBAL__I_a() section "__TEXT,__StaticInit,regular,pure_instructions" {
entry:
  call void @__cxx_global_var_init()
  call void @__cxx_global_var_init1()
  call void @__cxx_global_var_init2()
  ret void
}
