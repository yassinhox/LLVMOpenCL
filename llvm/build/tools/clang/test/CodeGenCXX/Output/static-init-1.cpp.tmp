; ModuleID = '/home/jazouani/llvm/llvm-3.2/tools/clang/test/CodeGenCXX/static-init-1.cpp'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin9"

@.str = private unnamed_addr constant [23 x i8] c"loading the func2(%d)\0A\00", align 1
@.str1 = private unnamed_addr constant [23 x i8] c"loading the func1(%d)\0A\00", align 1
@_ZL8loader_1 = internal global i32 0, align 4
@_ZL5count = internal global i32 0, align 4
@loader_2 = global i32 0, align 4
@_ZL8loader_3 = internal global i32 0, align 4
@loader_4 = global i32 0, align 4
@_ZL8loader_5 = internal global i32 0, align 4
@loader_6 = global i32 0, align 4
@llvm.global_ctors = appending global [1 x { i32, void ()* }] [{ i32, void ()* } { i32 65535, void ()* @_GLOBAL__I_a }]

define i32 @_Z5func2i(i32 %c) nounwind {
entry:
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load i32* %c.addr, align 4
  %call = call i32 (...)* @printf(i8* getelementptr inbounds ([23 x i8]* @.str, i32 0, i32 0), i32 %0)
  ret i32 %call
}

declare i32 @printf(...)

define i32 @_Z5func1i(i32 %c) nounwind {
entry:
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load i32* %c.addr, align 4
  %call = call i32 (...)* @printf(i8* getelementptr inbounds ([23 x i8]* @.str1, i32 0, i32 0), i32 %0)
  ret i32 %call
}

define internal void @__cxx_global_var_init() nounwind section "__TEXT,__StaticInit,regular,pure_instructions" {
entry:
  %0 = load i32* @_ZL5count, align 4
  %inc = add nsw i32 %0, 1
  store i32 %inc, i32* @_ZL5count, align 4
  %call = call i32 @_Z5func1i(i32 %inc)
  store i32 %call, i32* @_ZL8loader_1, align 4
  ret void
}

define internal void @__cxx_global_var_init2() nounwind section "__TEXT,__StaticInit,regular,pure_instructions" {
entry:
  %0 = load i32* @_ZL5count, align 4
  %inc = add nsw i32 %0, 1
  store i32 %inc, i32* @_ZL5count, align 4
  %call = call i32 @_Z5func2i(i32 %inc)
  store i32 %call, i32* @loader_2, align 4
  ret void
}

define internal void @__cxx_global_var_init3() nounwind section "__TEXT,__StaticInit,regular,pure_instructions" {
entry:
  %0 = load i32* @_ZL5count, align 4
  %inc = add nsw i32 %0, 1
  store i32 %inc, i32* @_ZL5count, align 4
  %call = call i32 @_Z5func1i(i32 %inc)
  store i32 %call, i32* @_ZL8loader_3, align 4
  ret void
}

define i32 @main() nounwind {
entry:
  ret i32 0
}

define internal void @__cxx_global_var_init4() nounwind section "__TEXT,__StaticInit,regular,pure_instructions" {
entry:
  %0 = load i32* @_ZL5count, align 4
  %inc = add nsw i32 %0, 1
  store i32 %inc, i32* @_ZL5count, align 4
  %call = call i32 @_Z5func2i(i32 %inc)
  store i32 %call, i32* @loader_4, align 4
  ret void
}

define internal void @__cxx_global_var_init5() nounwind section "__TEXT,__StaticInit,regular,pure_instructions" {
entry:
  %0 = load i32* @_ZL5count, align 4
  %inc = add nsw i32 %0, 1
  store i32 %inc, i32* @_ZL5count, align 4
  %call = call i32 @_Z5func1i(i32 %inc)
  store i32 %call, i32* @_ZL8loader_5, align 4
  ret void
}

define internal void @__cxx_global_var_init6() nounwind section "__TEXT,__StaticInit,regular,pure_instructions" {
entry:
  %0 = load i32* @_ZL5count, align 4
  %inc = add nsw i32 %0, 1
  store i32 %inc, i32* @_ZL5count, align 4
  %call = call i32 @_Z5func2i(i32 %inc)
  store i32 %call, i32* @loader_6, align 4
  ret void
}

define internal void @_GLOBAL__I_a() nounwind section "__TEXT,__StaticInit,regular,pure_instructions" {
entry:
  call void @__cxx_global_var_init()
  call void @__cxx_global_var_init2()
  call void @__cxx_global_var_init3()
  call void @__cxx_global_var_init4()
  call void @__cxx_global_var_init5()
  call void @__cxx_global_var_init6()
  ret void
}
