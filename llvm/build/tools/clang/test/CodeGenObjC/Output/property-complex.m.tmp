; ModuleID = '/home/jazouani/llvm/llvm-3.2/tools/clang/test/CodeGenObjC/property-complex.m'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin9"

module asm "\09.objc_class_name_I0=0"
module asm "\09.globl .objc_class_name_I0"

%0 = type opaque
%struct._objc_class = type { %struct._objc_class*, %struct._objc_class*, i8*, i64, i64, i64, %struct._objc_ivar_list*, %struct._objc_method_list*, %struct._objc_cache*, %struct._objc_protocol_list*, i8*, %struct._objc_class_extension* }
%struct._objc_ivar_list = type opaque
%struct._objc_method_list = type opaque
%struct._objc_cache = type opaque
%struct._objc_protocol_list = type { %struct._objc_protocol_list*, i64, [0 x %struct._objc_protocol] }
%struct._objc_protocol = type { %struct._objc_protocol_extension*, i8*, %struct._objc_protocol_list*, %struct._objc_method_description_list*, %struct._objc_method_description_list* }
%struct._objc_protocol_extension = type { i32, %struct._objc_method_description_list*, %struct._objc_method_description_list*, %struct._prop_list_t*, i8** }
%struct._objc_method_description_list = type { i32, [0 x %struct._objc_method_description] }
%struct._objc_method_description = type { i8*, i8* }
%struct._prop_list_t = type { i32, i32, [0 x %struct._prop_t] }
%struct._prop_t = type { i8*, i8* }
%struct._objc_class_extension = type { i32, i8*, %struct._prop_list_t* }
%struct._objc_ivar = type { i8*, i8*, i32 }
%struct._objc_method = type { i8*, i8*, i8* }
%struct._objc_module = type { i64, i64, i8*, %struct._objc_symtab* }
%struct._objc_symtab = type { i64, i8*, i16, i16, [0 x i8*] }

@.str = private unnamed_addr constant [19 x i8] c"im0: %.2f + %.2fi\0A\00", align 1
@.str1 = private unnamed_addr constant [22 x i8] c"setIm0: %.2f + %.2fi\0A\00", align 1
@.str2 = private unnamed_addr constant [18 x i8] c"p0: %.2f + %.2fi\0A\00", align 1
@.str3 = private unnamed_addr constant [21 x i8] c"setP0: %.2f + %.2fi\0A\00", align 1
@"\01L_OBJC_METH_VAR_NAME_" = internal global [5 x i8] c"init\00", section "__TEXT,__cstring,cstring_literals", align 1
@"\01L_OBJC_METH_VAR_TYPE_" = internal global [8 x i8] c"@16@0:8\00", section "__TEXT,__cstring,cstring_literals", align 1
@"\01L_OBJC_METH_VAR_NAME_4" = internal global [4 x i8] c"im0\00", section "__TEXT,__cstring,cstring_literals", align 1
@"\01L_OBJC_METH_VAR_TYPE_5" = internal global [9 x i8] c"jf16@0:8\00", section "__TEXT,__cstring,cstring_literals", align 1
@"\01L_OBJC_METH_VAR_NAME_6" = internal global [8 x i8] c"setIm0:\00", section "__TEXT,__cstring,cstring_literals", align 1
@"\01L_OBJC_METH_VAR_TYPE_7" = internal global [12 x i8] c"v24@0:8jf16\00", section "__TEXT,__cstring,cstring_literals", align 1
@"\01L_OBJC_METH_VAR_NAME_8" = internal global [3 x i8] c"p0\00", section "__TEXT,__cstring,cstring_literals", align 1
@"\01L_OBJC_METH_VAR_NAME_9" = internal global [7 x i8] c"setP0:\00", section "__TEXT,__cstring,cstring_literals", align 1
@"\01L_OBJC_CLASS_NAME_" = internal global [3 x i8] c"I0\00", section "__TEXT,__cstring,cstring_literals", align 1
@"\01L_OBJC_METACLASS_I0" = internal global %struct._objc_class { %struct._objc_class* bitcast ([3 x i8]* @"\01L_OBJC_CLASS_NAME_" to %struct._objc_class*), %struct._objc_class* null, i8* getelementptr inbounds ([3 x i8]* @"\01L_OBJC_CLASS_NAME_", i32 0, i32 0), i64 0, i64 2, i64 96, %struct._objc_ivar_list* null, %struct._objc_method_list* null, %struct._objc_cache* null, %struct._objc_protocol_list* null, i8* null, %struct._objc_class_extension* null }, section "__OBJC,__meta_class,regular,no_dead_strip", align 4
@"\01L_OBJC_METH_VAR_NAME_10" = internal global [4 x i8] c"iv0\00", section "__TEXT,__cstring,cstring_literals", align 1
@"\01L_OBJC_METH_VAR_TYPE_11" = internal global [3 x i8] c"jf\00", section "__TEXT,__cstring,cstring_literals", align 1
@"\01L_OBJC_INSTANCE_VARIABLES_I0" = internal global { i32, [1 x %struct._objc_ivar] } { i32 1, [1 x %struct._objc_ivar] [%struct._objc_ivar { i8* getelementptr inbounds ([4 x i8]* @"\01L_OBJC_METH_VAR_NAME_10", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @"\01L_OBJC_METH_VAR_TYPE_11", i32 0, i32 0), i32 0 }] }, section "__OBJC,__instance_vars,regular,no_dead_strip", align 4
@"\01L_OBJC_INSTANCE_METHODS_I0" = internal global { i8*, i32, [5 x %struct._objc_method] } { i8* null, i32 5, [5 x %struct._objc_method] [%struct._objc_method { i8* getelementptr inbounds ([5 x i8]* @"\01L_OBJC_METH_VAR_NAME_", i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @"\01L_OBJC_METH_VAR_TYPE_", i32 0, i32 0), i8* bitcast (i8* (%0*, i8*)* @"\01-[I0 init]" to i8*) }, %struct._objc_method { i8* getelementptr inbounds ([4 x i8]* @"\01L_OBJC_METH_VAR_NAME_4", i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @"\01L_OBJC_METH_VAR_TYPE_5", i32 0, i32 0), i8* bitcast (<2 x float> (%0*, i8*)* @"\01-[I0 im0]" to i8*) }, %struct._objc_method { i8* getelementptr inbounds ([8 x i8]* @"\01L_OBJC_METH_VAR_NAME_6", i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @"\01L_OBJC_METH_VAR_TYPE_7", i32 0, i32 0), i8* bitcast (void (%0*, i8*, <2 x float>)* @"\01-[I0 setIm0:]" to i8*) }, %struct._objc_method { i8* getelementptr inbounds ([3 x i8]* @"\01L_OBJC_METH_VAR_NAME_8", i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @"\01L_OBJC_METH_VAR_TYPE_5", i32 0, i32 0), i8* bitcast (<2 x float> (%0*, i8*)* @"\01-[I0 p0]" to i8*) }, %struct._objc_method { i8* getelementptr inbounds ([7 x i8]* @"\01L_OBJC_METH_VAR_NAME_9", i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @"\01L_OBJC_METH_VAR_TYPE_7", i32 0, i32 0), i8* bitcast (void (%0*, i8*, <2 x float>)* @"\01-[I0 setP0:]" to i8*) }] }, section "__OBJC,__inst_meth,regular,no_dead_strip", align 4
@"\01L_OBJC_PROP_NAME_ATTR_" = internal global [3 x i8] c"p0\00", section "__TEXT,__cstring,cstring_literals", align 1
@"\01L_OBJC_PROP_NAME_ATTR_12" = internal global [6 x i8] c"Tjf,D\00", section "__TEXT,__cstring,cstring_literals", align 1
@"\01l_OBJC_$_PROP_LIST_I0" = internal global { i32, i32, [1 x %struct._prop_t] } { i32 16, i32 1, [1 x %struct._prop_t] [%struct._prop_t { i8* getelementptr inbounds ([3 x i8]* @"\01L_OBJC_PROP_NAME_ATTR_", i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @"\01L_OBJC_PROP_NAME_ATTR_12", i32 0, i32 0) }] }, section "__OBJC,__property,regular,no_dead_strip", align 4
@"\01L_OBJC_CLASSEXT_I0" = internal global %struct._objc_class_extension { i32 24, i8* null, %struct._prop_list_t* bitcast ({ i32, i32, [1 x %struct._prop_t] }* @"\01l_OBJC_$_PROP_LIST_I0" to %struct._prop_list_t*) }, section "__OBJC,__class_ext,regular,no_dead_strip", align 4
@"\01L_OBJC_CLASS_I0" = internal global %struct._objc_class { %struct._objc_class* @"\01L_OBJC_METACLASS_I0", %struct._objc_class* null, i8* getelementptr inbounds ([3 x i8]* @"\01L_OBJC_CLASS_NAME_", i32 0, i32 0), i64 0, i64 1, i64 8, %struct._objc_ivar_list* bitcast ({ i32, [1 x %struct._objc_ivar] }* @"\01L_OBJC_INSTANCE_VARIABLES_I0" to %struct._objc_ivar_list*), %struct._objc_method_list* bitcast ({ i8*, i32, [5 x %struct._objc_method] }* @"\01L_OBJC_INSTANCE_METHODS_I0" to %struct._objc_method_list*), %struct._objc_cache* null, %struct._objc_protocol_list* null, i8* null, %struct._objc_class_extension* @"\01L_OBJC_CLASSEXT_I0" }, section "__OBJC,__class,regular,no_dead_strip", align 4
@"\01L_OBJC_SELECTOR_REFERENCES_" = internal global i8* getelementptr inbounds ([4 x i8]* @"\01L_OBJC_METH_VAR_NAME_4", i32 0, i32 0), section "__OBJC,__message_refs,literal_pointers,no_dead_strip", align 4
@"\01L_OBJC_SELECTOR_REFERENCES_13" = internal global i8* getelementptr inbounds ([8 x i8]* @"\01L_OBJC_METH_VAR_NAME_6", i32 0, i32 0), section "__OBJC,__message_refs,literal_pointers,no_dead_strip", align 4
@"\01L_OBJC_SELECTOR_REFERENCES_14" = internal global i8* getelementptr inbounds ([3 x i8]* @"\01L_OBJC_METH_VAR_NAME_8", i32 0, i32 0), section "__OBJC,__message_refs,literal_pointers,no_dead_strip", align 4
@"\01L_OBJC_SELECTOR_REFERENCES_15" = internal global i8* getelementptr inbounds ([7 x i8]* @"\01L_OBJC_METH_VAR_NAME_9", i32 0, i32 0), section "__OBJC,__message_refs,literal_pointers,no_dead_strip", align 4
@.str16 = private unnamed_addr constant [18 x i8] c"l0: %.2f + %.2fi\0A\00", align 1
@.str17 = private unnamed_addr constant [18 x i8] c"l1: %.2f + %.2fi\0A\00", align 1
@.str18 = private unnamed_addr constant [18 x i8] c"l2: %.2f + %.2fi\0A\00", align 1
@.str19 = private unnamed_addr constant [18 x i8] c"l3: %.2f + %.2fi\0A\00", align 1
@.str20 = private unnamed_addr constant [18 x i8] c"l4: %.2f + %.2fi\0A\00", align 1
@.str21 = private unnamed_addr constant [18 x i8] c"l5: %.2f + %.2fi\0A\00", align 1
@.str22 = private unnamed_addr constant [18 x i8] c"l6: %.2f + %.2fi\0A\00", align 1
@.str23 = private unnamed_addr constant [18 x i8] c"l7: %.2f + %.2fi\0A\00", align 1
@.str24 = private unnamed_addr constant [18 x i8] c"l8: %.2f + %.2fi\0A\00", align 1
@"\01L_OBJC_CLASS_NAME_25" = internal global [1 x i8] zeroinitializer, section "__TEXT,__cstring,cstring_literals", align 1
@"\01L_OBJC_SYMBOLS" = internal global { i64, i8*, i16, i16, [1 x i8*] } { i64 0, i8* null, i16 1, i16 0, [1 x i8*] [i8* bitcast (%struct._objc_class* @"\01L_OBJC_CLASS_I0" to i8*)] }, section "__OBJC,__symbols,regular,no_dead_strip", align 4
@"\01L_OBJC_MODULES" = internal global %struct._objc_module { i64 7, i64 32, i8* getelementptr inbounds ([1 x i8]* @"\01L_OBJC_CLASS_NAME_25", i32 0, i32 0), %struct._objc_symtab* bitcast ({ i64, i8*, i16, i16, [1 x i8*] }* @"\01L_OBJC_SYMBOLS" to %struct._objc_symtab*) }, section "__OBJC,__module_info,regular,no_dead_strip", align 4
@llvm.used = appending global [26 x i8*] [i8* getelementptr inbounds ([5 x i8]* @"\01L_OBJC_METH_VAR_NAME_", i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @"\01L_OBJC_METH_VAR_TYPE_", i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @"\01L_OBJC_METH_VAR_NAME_4", i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @"\01L_OBJC_METH_VAR_TYPE_5", i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @"\01L_OBJC_METH_VAR_NAME_6", i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @"\01L_OBJC_METH_VAR_TYPE_7", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @"\01L_OBJC_METH_VAR_NAME_8", i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @"\01L_OBJC_METH_VAR_NAME_9", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @"\01L_OBJC_CLASS_NAME_", i32 0, i32 0), i8* bitcast (%struct._objc_class* @"\01L_OBJC_METACLASS_I0" to i8*), i8* getelementptr inbounds ([4 x i8]* @"\01L_OBJC_METH_VAR_NAME_10", i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @"\01L_OBJC_METH_VAR_TYPE_11", i32 0, i32 0), i8* bitcast ({ i32, [1 x %struct._objc_ivar] }* @"\01L_OBJC_INSTANCE_VARIABLES_I0" to i8*), i8* bitcast ({ i8*, i32, [5 x %struct._objc_method] }* @"\01L_OBJC_INSTANCE_METHODS_I0" to i8*), i8* getelementptr inbounds ([3 x i8]* @"\01L_OBJC_PROP_NAME_ATTR_", i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @"\01L_OBJC_PROP_NAME_ATTR_12", i32 0, i32 0), i8* bitcast ({ i32, i32, [1 x %struct._prop_t] }* @"\01l_OBJC_$_PROP_LIST_I0" to i8*), i8* bitcast (%struct._objc_class_extension* @"\01L_OBJC_CLASSEXT_I0" to i8*), i8* bitcast (%struct._objc_class* @"\01L_OBJC_CLASS_I0" to i8*), i8* bitcast (i8** @"\01L_OBJC_SELECTOR_REFERENCES_" to i8*), i8* bitcast (i8** @"\01L_OBJC_SELECTOR_REFERENCES_13" to i8*), i8* bitcast (i8** @"\01L_OBJC_SELECTOR_REFERENCES_14" to i8*), i8* bitcast (i8** @"\01L_OBJC_SELECTOR_REFERENCES_15" to i8*), i8* getelementptr inbounds ([1 x i8]* @"\01L_OBJC_CLASS_NAME_25", i32 0, i32 0), i8* bitcast ({ i64, i8*, i16, i16, [1 x i8*] }* @"\01L_OBJC_SYMBOLS" to i8*), i8* bitcast (%struct._objc_module* @"\01L_OBJC_MODULES" to i8*)], section "llvm.metadata"

define internal i8* @"\01-[I0 init]"(%0* %self, i8* %_cmd) nounwind {
entry:
  %self.addr = alloca %0*, align 8
  %_cmd.addr = alloca i8*, align 8
  store %0* %self, %0** %self.addr, align 8
  store i8* %_cmd, i8** %_cmd.addr, align 8
  %0 = load %0** %self.addr, align 8
  %1 = bitcast %0* %0 to i8*
  %add.ptr = getelementptr inbounds i8* %1, i64 0
  %2 = bitcast i8* %add.ptr to { float, float }*
  %real = getelementptr inbounds { float, float }* %2, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %2, i32 0, i32 1
  store float 5.000000e+00, float* %real
  store float 2.000000e+00, float* %imag
  %3 = load %0** %self.addr, align 8
  %4 = bitcast %0* %3 to i8*
  ret i8* %4
}

define internal <2 x float> @"\01-[I0 im0]"(%0* %self, i8* %_cmd) nounwind {
entry:
  %retval = alloca { float, float }, align 4
  %self.addr = alloca %0*, align 8
  %_cmd.addr = alloca i8*, align 8
  store %0* %self, %0** %self.addr, align 8
  store i8* %_cmd, i8** %_cmd.addr, align 8
  %0 = load %0** %self.addr, align 8
  %1 = bitcast %0* %0 to i8*
  %add.ptr = getelementptr inbounds i8* %1, i64 0
  %2 = bitcast i8* %add.ptr to { float, float }*
  %idx = getelementptr inbounds { float, float }* %2, i32 0, i32 0
  %3 = load float* %idx
  %conv = fpext float %3 to double
  %4 = load %0** %self.addr, align 8
  %5 = bitcast %0* %4 to i8*
  %add.ptr1 = getelementptr inbounds i8* %5, i64 0
  %6 = bitcast i8* %add.ptr1 to { float, float }*
  %idx2 = getelementptr inbounds { float, float }* %6, i32 0, i32 1
  %7 = load float* %idx2
  %conv3 = fpext float %7 to double
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([19 x i8]* @.str, i32 0, i32 0), double %conv, double %conv3)
  %8 = load %0** %self.addr, align 8
  %9 = bitcast %0* %8 to i8*
  %add.ptr4 = getelementptr inbounds i8* %9, i64 0
  %10 = bitcast i8* %add.ptr4 to { float, float }*
  %.realp = getelementptr inbounds { float, float }* %10, i32 0, i32 0
  %.real = load float* %.realp
  %.imagp = getelementptr inbounds { float, float }* %10, i32 0, i32 1
  %.imag = load float* %.imagp
  %conv5 = fpext float %.real to double
  %conv6 = fpext float %.imag to double
  %add.r = fadd double %conv5, 1.000000e-01
  %add.i = fadd double %conv6, 2.000000e-01
  %conv7 = fptrunc double %add.r to float
  %conv8 = fptrunc double %add.i to float
  %real = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %conv7, float* %real
  store float %conv8, float* %imag
  %11 = bitcast { float, float }* %retval to <2 x float>*
  %12 = load <2 x float>* %11, align 1
  ret <2 x float> %12
}

declare i32 @printf(i8*, ...)

define internal void @"\01-[I0 setIm0:]"(%0* %self, i8* %_cmd, <2 x float> %a0.coerce) nounwind {
entry:
  %self.addr = alloca %0*, align 8
  %_cmd.addr = alloca i8*, align 8
  %a0 = alloca { float, float }, align 8
  store %0* %self, %0** %self.addr, align 8
  store i8* %_cmd, i8** %_cmd.addr, align 8
  %0 = bitcast { float, float }* %a0 to <2 x float>*
  store <2 x float> %a0.coerce, <2 x float>* %0, align 1
  %idx = getelementptr inbounds { float, float }* %a0, i32 0, i32 0
  %1 = load float* %idx
  %conv = fpext float %1 to double
  %idx1 = getelementptr inbounds { float, float }* %a0, i32 0, i32 1
  %2 = load float* %idx1
  %conv2 = fpext float %2 to double
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([22 x i8]* @.str1, i32 0, i32 0), double %conv, double %conv2)
  %a0.realp = getelementptr inbounds { float, float }* %a0, i32 0, i32 0
  %a0.real = load float* %a0.realp
  %a0.imagp = getelementptr inbounds { float, float }* %a0, i32 0, i32 1
  %a0.imag = load float* %a0.imagp
  %conv3 = fpext float %a0.real to double
  %conv4 = fpext float %a0.imag to double
  %add.r = fadd double %conv3, 3.000000e-01
  %add.i = fadd double %conv4, 4.000000e-01
  %conv5 = fptrunc double %add.r to float
  %conv6 = fptrunc double %add.i to float
  %3 = load %0** %self.addr, align 8
  %4 = bitcast %0* %3 to i8*
  %add.ptr = getelementptr inbounds i8* %4, i64 0
  %5 = bitcast i8* %add.ptr to { float, float }*
  %real = getelementptr inbounds { float, float }* %5, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %5, i32 0, i32 1
  store float %conv5, float* %real
  store float %conv6, float* %imag
  ret void
}

define internal <2 x float> @"\01-[I0 p0]"(%0* %self, i8* %_cmd) nounwind {
entry:
  %retval = alloca { float, float }, align 4
  %self.addr = alloca %0*, align 8
  %_cmd.addr = alloca i8*, align 8
  store %0* %self, %0** %self.addr, align 8
  store i8* %_cmd, i8** %_cmd.addr, align 8
  %0 = load %0** %self.addr, align 8
  %1 = bitcast %0* %0 to i8*
  %add.ptr = getelementptr inbounds i8* %1, i64 0
  %2 = bitcast i8* %add.ptr to { float, float }*
  %idx = getelementptr inbounds { float, float }* %2, i32 0, i32 0
  %3 = load float* %idx
  %conv = fpext float %3 to double
  %4 = load %0** %self.addr, align 8
  %5 = bitcast %0* %4 to i8*
  %add.ptr1 = getelementptr inbounds i8* %5, i64 0
  %6 = bitcast i8* %add.ptr1 to { float, float }*
  %idx2 = getelementptr inbounds { float, float }* %6, i32 0, i32 1
  %7 = load float* %idx2
  %conv3 = fpext float %7 to double
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @.str2, i32 0, i32 0), double %conv, double %conv3)
  %8 = load %0** %self.addr, align 8
  %9 = bitcast %0* %8 to i8*
  %add.ptr4 = getelementptr inbounds i8* %9, i64 0
  %10 = bitcast i8* %add.ptr4 to { float, float }*
  %.realp = getelementptr inbounds { float, float }* %10, i32 0, i32 0
  %.real = load float* %.realp
  %.imagp = getelementptr inbounds { float, float }* %10, i32 0, i32 1
  %.imag = load float* %.imagp
  %conv5 = fpext float %.real to double
  %conv6 = fpext float %.imag to double
  %add.r = fadd double %conv5, 5.000000e-01
  %add.i = fadd double %conv6, 6.000000e-01
  %conv7 = fptrunc double %add.r to float
  %conv8 = fptrunc double %add.i to float
  %real = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %conv7, float* %real
  store float %conv8, float* %imag
  %11 = bitcast { float, float }* %retval to <2 x float>*
  %12 = load <2 x float>* %11, align 1
  ret <2 x float> %12
}

define internal void @"\01-[I0 setP0:]"(%0* %self, i8* %_cmd, <2 x float> %a0.coerce) nounwind {
entry:
  %self.addr = alloca %0*, align 8
  %_cmd.addr = alloca i8*, align 8
  %a0 = alloca { float, float }, align 8
  store %0* %self, %0** %self.addr, align 8
  store i8* %_cmd, i8** %_cmd.addr, align 8
  %0 = bitcast { float, float }* %a0 to <2 x float>*
  store <2 x float> %a0.coerce, <2 x float>* %0, align 1
  %idx = getelementptr inbounds { float, float }* %a0, i32 0, i32 0
  %1 = load float* %idx
  %conv = fpext float %1 to double
  %idx1 = getelementptr inbounds { float, float }* %a0, i32 0, i32 1
  %2 = load float* %idx1
  %conv2 = fpext float %2 to double
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str3, i32 0, i32 0), double %conv, double %conv2)
  %a0.realp = getelementptr inbounds { float, float }* %a0, i32 0, i32 0
  %a0.real = load float* %a0.realp
  %a0.imagp = getelementptr inbounds { float, float }* %a0, i32 0, i32 1
  %a0.imag = load float* %a0.imagp
  %conv3 = fpext float %a0.real to double
  %conv4 = fpext float %a0.imag to double
  %add.r = fadd double %conv3, 7.000000e-01
  %add.i = fadd double %conv4, 8.000000e-01
  %conv5 = fptrunc double %add.r to float
  %conv6 = fptrunc double %add.i to float
  %3 = load %0** %self.addr, align 8
  %4 = bitcast %0* %3 to i8*
  %add.ptr = getelementptr inbounds i8* %4, i64 0
  %5 = bitcast i8* %add.ptr to { float, float }*
  %real = getelementptr inbounds { float, float }* %5, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %5, i32 0, i32 1
  store float %conv5, float* %real
  store float %conv6, float* %imag
  ret void
}

define void @f0(%0* %a0) nounwind {
entry:
  %a0.addr = alloca %0*, align 8
  %l0 = alloca float, align 4
  %coerce = alloca { float, float }, align 4
  %l1 = alloca float, align 4
  %l2 = alloca { float, float }, align 4
  %coerce2 = alloca { float, float }, align 4
  %coerce3 = alloca { float, float }, align 4
  %l3 = alloca { float, float }, align 4
  %l4 = alloca { float, float }, align 4
  %l5 = alloca { float, float }, align 4
  %l6 = alloca { float, float }, align 4
  %coerce27 = alloca { float, float }, align 4
  %coerce28 = alloca { float, float }, align 4
  %l7 = alloca { float, float }, align 4
  %l8 = alloca { float, float }, align 4
  %coerce41 = alloca { float, float }, align 4
  store %0* %a0, %0** %a0.addr, align 8
  %0 = load %0** %a0.addr, align 8
  %1 = load i8** @"\01L_OBJC_SELECTOR_REFERENCES_"
  %2 = bitcast %0* %0 to i8*
  %call = call <2 x float> bitcast (i8* (i8*, i8*, ...)* @objc_msgSend to <2 x float> (i8*, i8*)*)(i8* %2, i8* %1)
  %3 = bitcast { float, float }* %coerce to <2 x float>*
  store <2 x float> %call, <2 x float>* %3, align 1
  %coerce.realp = getelementptr inbounds { float, float }* %coerce, i32 0, i32 0
  %coerce.real = load float* %coerce.realp
  %coerce.imagp = getelementptr inbounds { float, float }* %coerce, i32 0, i32 1
  %coerce.imag = load float* %coerce.imagp
  store float %coerce.real, float* %l0, align 4
  %4 = load %0** %a0.addr, align 8
  %5 = bitcast %0* %4 to i8*
  %add.ptr = getelementptr inbounds i8* %5, i64 0
  %6 = bitcast i8* %add.ptr to { float, float }*
  %idx = getelementptr inbounds { float, float }* %6, i32 0, i32 1
  %7 = load float* %idx
  store float %7, float* %l1, align 4
  %8 = load %0** %a0.addr, align 8
  %9 = load %0** %a0.addr, align 8
  %10 = load i8** @"\01L_OBJC_SELECTOR_REFERENCES_"
  %11 = bitcast %0* %9 to i8*
  %call1 = call <2 x float> bitcast (i8* (i8*, i8*, ...)* @objc_msgSend to <2 x float> (i8*, i8*)*)(i8* %11, i8* %10)
  %12 = bitcast { float, float }* %coerce2 to <2 x float>*
  store <2 x float> %call1, <2 x float>* %12, align 1
  %coerce2.realp = getelementptr inbounds { float, float }* %coerce2, i32 0, i32 0
  %coerce2.real = load float* %coerce2.realp
  %coerce2.imagp = getelementptr inbounds { float, float }* %coerce2, i32 0, i32 1
  %coerce2.imag = load float* %coerce2.imagp
  %13 = load i8** @"\01L_OBJC_SELECTOR_REFERENCES_13"
  %14 = bitcast %0* %8 to i8*
  %real = getelementptr inbounds { float, float }* %coerce3, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %coerce3, i32 0, i32 1
  store float %coerce2.real, float* %real
  store float %coerce2.imag, float* %imag
  %15 = bitcast { float, float }* %coerce3 to <2 x float>*
  %16 = load <2 x float>* %15, align 1
  call void bitcast (i8* (i8*, i8*, ...)* @objc_msgSend to void (i8*, i8*, <2 x float>)*)(i8* %14, i8* %13, <2 x float> %16)
  %real4 = getelementptr inbounds { float, float }* %l2, i32 0, i32 0
  %imag5 = getelementptr inbounds { float, float }* %l2, i32 0, i32 1
  store float %coerce2.real, float* %real4
  store float %coerce2.imag, float* %imag5
  %17 = load %0** %a0.addr, align 8
  %18 = bitcast %0* %17 to i8*
  %add.ptr6 = getelementptr inbounds i8* %18, i64 0
  %19 = bitcast i8* %add.ptr6 to { float, float }*
  %.realp = getelementptr inbounds { float, float }* %19, i32 0, i32 0
  %.real = load float* %.realp
  %.imagp = getelementptr inbounds { float, float }* %19, i32 0, i32 1
  %.imag = load float* %.imagp
  %real7 = getelementptr inbounds { float, float }* %l3, i32 0, i32 0
  %imag8 = getelementptr inbounds { float, float }* %l3, i32 0, i32 1
  store float %.real, float* %real7
  store float %.imag, float* %imag8
  %20 = load %0** %a0.addr, align 8
  %21 = bitcast %0* %20 to i8*
  %add.ptr9 = getelementptr inbounds i8* %21, i64 0
  %22 = bitcast i8* %add.ptr9 to { float, float }*
  %.realp10 = getelementptr inbounds { float, float }* %22, i32 0, i32 0
  %.real11 = load float* %.realp10
  %.imagp12 = getelementptr inbounds { float, float }* %22, i32 0, i32 1
  %.imag13 = load float* %.imagp12
  %23 = load %0** %a0.addr, align 8
  %24 = bitcast %0* %23 to i8*
  %add.ptr14 = getelementptr inbounds i8* %24, i64 0
  %25 = bitcast i8* %add.ptr14 to { float, float }*
  %real15 = getelementptr inbounds { float, float }* %25, i32 0, i32 0
  %imag16 = getelementptr inbounds { float, float }* %25, i32 0, i32 1
  store float %.real11, float* %real15
  store float %.imag13, float* %imag16
  %real17 = getelementptr inbounds { float, float }* %l4, i32 0, i32 0
  %imag18 = getelementptr inbounds { float, float }* %l4, i32 0, i32 1
  store float %.real11, float* %real17
  store float %.imag13, float* %imag18
  %26 = load %0** %a0.addr, align 8
  %27 = bitcast %0* %26 to i8*
  %add.ptr19 = getelementptr inbounds i8* %27, i64 0
  %28 = bitcast i8* %add.ptr19 to { float, float }*
  %.realp20 = getelementptr inbounds { float, float }* %28, i32 0, i32 0
  %.real21 = load float* %.realp20
  %.imagp22 = getelementptr inbounds { float, float }* %28, i32 0, i32 1
  %.imag23 = load float* %.imagp22
  %real24 = getelementptr inbounds { float, float }* %l5, i32 0, i32 0
  %imag25 = getelementptr inbounds { float, float }* %l5, i32 0, i32 1
  store float %.real21, float* %real24
  store float %.imag23, float* %imag25
  %29 = load %0** %a0.addr, align 8
  %30 = load %0** %a0.addr, align 8
  %31 = load i8** @"\01L_OBJC_SELECTOR_REFERENCES_14"
  %32 = bitcast %0* %30 to i8*
  %call26 = call <2 x float> bitcast (i8* (i8*, i8*, ...)* @objc_msgSend to <2 x float> (i8*, i8*)*)(i8* %32, i8* %31)
  %33 = bitcast { float, float }* %coerce27 to <2 x float>*
  store <2 x float> %call26, <2 x float>* %33, align 1
  %coerce27.realp = getelementptr inbounds { float, float }* %coerce27, i32 0, i32 0
  %coerce27.real = load float* %coerce27.realp
  %coerce27.imagp = getelementptr inbounds { float, float }* %coerce27, i32 0, i32 1
  %coerce27.imag = load float* %coerce27.imagp
  %34 = load i8** @"\01L_OBJC_SELECTOR_REFERENCES_15"
  %35 = bitcast %0* %29 to i8*
  %real29 = getelementptr inbounds { float, float }* %coerce28, i32 0, i32 0
  %imag30 = getelementptr inbounds { float, float }* %coerce28, i32 0, i32 1
  store float %coerce27.real, float* %real29
  store float %coerce27.imag, float* %imag30
  %36 = bitcast { float, float }* %coerce28 to <2 x float>*
  %37 = load <2 x float>* %36, align 1
  call void bitcast (i8* (i8*, i8*, ...)* @objc_msgSend to void (i8*, i8*, <2 x float>)*)(i8* %35, i8* %34, <2 x float> %37)
  %real31 = getelementptr inbounds { float, float }* %l6, i32 0, i32 0
  %imag32 = getelementptr inbounds { float, float }* %l6, i32 0, i32 1
  store float %coerce27.real, float* %real31
  store float %coerce27.imag, float* %imag32
  %38 = load %0** %a0.addr, align 8
  %39 = bitcast %0* %38 to i8*
  %add.ptr33 = getelementptr inbounds i8* %39, i64 0
  %40 = bitcast i8* %add.ptr33 to { float, float }*
  %.realp34 = getelementptr inbounds { float, float }* %40, i32 0, i32 0
  %.real35 = load float* %.realp34
  %.imagp36 = getelementptr inbounds { float, float }* %40, i32 0, i32 1
  %.imag37 = load float* %.imagp36
  %real38 = getelementptr inbounds { float, float }* %l7, i32 0, i32 0
  %imag39 = getelementptr inbounds { float, float }* %l7, i32 0, i32 1
  store float %.real35, float* %real38
  store float %.imag37, float* %imag39
  %41 = load %0** %a0.addr, align 8
  %42 = load i8** @"\01L_OBJC_SELECTOR_REFERENCES_"
  %43 = bitcast %0* %41 to i8*
  %call40 = call <2 x float> bitcast (i8* (i8*, i8*, ...)* @objc_msgSend to <2 x float> (i8*, i8*)*)(i8* %43, i8* %42)
  %44 = bitcast { float, float }* %coerce41 to <2 x float>*
  store <2 x float> %call40, <2 x float>* %44, align 1
  %coerce41.realp = getelementptr inbounds { float, float }* %coerce41, i32 0, i32 0
  %coerce41.real = load float* %coerce41.realp
  %coerce41.imagp = getelementptr inbounds { float, float }* %coerce41, i32 0, i32 1
  %coerce41.imag = load float* %coerce41.imagp
  %real42 = getelementptr inbounds { float, float }* %l8, i32 0, i32 0
  %imag43 = getelementptr inbounds { float, float }* %l8, i32 0, i32 1
  store float %coerce41.real, float* %real42
  store float %coerce41.imag, float* %imag43
  %45 = load float* %l0, align 4
  %conv = fpext float %45 to double
  %46 = load float* %l0, align 4
  %call44 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @.str16, i32 0, i32 0), double %conv, double 0.000000e+00)
  %47 = load float* %l1, align 4
  %conv45 = fpext float %47 to double
  %48 = load float* %l1, align 4
  %call46 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @.str17, i32 0, i32 0), double %conv45, double 0.000000e+00)
  %idx47 = getelementptr inbounds { float, float }* %l2, i32 0, i32 0
  %49 = load float* %idx47
  %conv48 = fpext float %49 to double
  %idx49 = getelementptr inbounds { float, float }* %l2, i32 0, i32 1
  %50 = load float* %idx49
  %conv50 = fpext float %50 to double
  %call51 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @.str18, i32 0, i32 0), double %conv48, double %conv50)
  %idx52 = getelementptr inbounds { float, float }* %l3, i32 0, i32 0
  %51 = load float* %idx52
  %conv53 = fpext float %51 to double
  %idx54 = getelementptr inbounds { float, float }* %l3, i32 0, i32 1
  %52 = load float* %idx54
  %conv55 = fpext float %52 to double
  %call56 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @.str19, i32 0, i32 0), double %conv53, double %conv55)
  %idx57 = getelementptr inbounds { float, float }* %l4, i32 0, i32 0
  %53 = load float* %idx57
  %conv58 = fpext float %53 to double
  %idx59 = getelementptr inbounds { float, float }* %l4, i32 0, i32 1
  %54 = load float* %idx59
  %conv60 = fpext float %54 to double
  %call61 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @.str20, i32 0, i32 0), double %conv58, double %conv60)
  %idx62 = getelementptr inbounds { float, float }* %l5, i32 0, i32 0
  %55 = load float* %idx62
  %conv63 = fpext float %55 to double
  %idx64 = getelementptr inbounds { float, float }* %l5, i32 0, i32 1
  %56 = load float* %idx64
  %conv65 = fpext float %56 to double
  %call66 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @.str21, i32 0, i32 0), double %conv63, double %conv65)
  %idx67 = getelementptr inbounds { float, float }* %l6, i32 0, i32 0
  %57 = load float* %idx67
  %conv68 = fpext float %57 to double
  %idx69 = getelementptr inbounds { float, float }* %l6, i32 0, i32 1
  %58 = load float* %idx69
  %conv70 = fpext float %58 to double
  %call71 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @.str22, i32 0, i32 0), double %conv68, double %conv70)
  %idx72 = getelementptr inbounds { float, float }* %l7, i32 0, i32 0
  %59 = load float* %idx72
  %conv73 = fpext float %59 to double
  %idx74 = getelementptr inbounds { float, float }* %l7, i32 0, i32 1
  %60 = load float* %idx74
  %conv75 = fpext float %60 to double
  %call76 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @.str23, i32 0, i32 0), double %conv73, double %conv75)
  %idx77 = getelementptr inbounds { float, float }* %l8, i32 0, i32 0
  %61 = load float* %idx77
  %conv78 = fpext float %61 to double
  %idx79 = getelementptr inbounds { float, float }* %l8, i32 0, i32 1
  %62 = load float* %idx79
  %conv80 = fpext float %62 to double
  %call81 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @.str24, i32 0, i32 0), double %conv78, double %conv80)
  ret void
}

declare i8* @objc_msgSend(i8*, i8*, ...) nonlazybind

!llvm.module.flags = !{!0, !1, !2, !3}

!0 = metadata !{i32 1, metadata !"Objective-C Version", i32 1}
!1 = metadata !{i32 1, metadata !"Objective-C Image Info Version", i32 0}
!2 = metadata !{i32 1, metadata !"Objective-C Image Info Section", metadata !"__OBJC, __image_info,regular"}
!3 = metadata !{i32 4, metadata !"Objective-C Garbage Collection", i32 0}
