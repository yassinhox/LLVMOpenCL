; ModuleID = '/home/jazouani/llvm/llvm-3.2/tools/clang/test/CodeGenObjC/objc-assign-ivar.m'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin10"

%0 = type opaque
%1 = type opaque
%struct._objc_module = type { i64, i64, i8*, %struct._objc_symtab* }
%struct._objc_symtab = type { i64, i8*, i16, i16, [0 x i8*] }
%struct.struct_with_ids_t = type { i8*, [10 x i8*], i8*, [10 x i8*] }

@rhs = global i8* null, align 8
@IvarAssigns = common global i32 0, align 4
@"\01L_OBJC_CLASS_NAME_" = internal global [1 x i8] zeroinitializer, section "__TEXT,__cstring,cstring_literals", align 1
@"\01L_OBJC_MODULES" = internal global %struct._objc_module { i64 7, i64 32, i8* getelementptr inbounds ([1 x i8]* @"\01L_OBJC_CLASS_NAME_", i32 0, i32 0), %struct._objc_symtab* null }, section "__OBJC,__module_info,regular,no_dead_strip", align 4
@llvm.used = appending global [2 x i8*] [i8* getelementptr inbounds ([1 x i8]* @"\01L_OBJC_CLASS_NAME_", i32 0, i32 0), i8* bitcast (%struct._objc_module* @"\01L_OBJC_MODULES" to i8*)], section "llvm.metadata"

define void @testIvars() nounwind {
entry:
  %foo = alloca %0*, align 8
  %counter = alloca i32, align 4
  %0 = load i8** @rhs, align 8
  %1 = load %0** %foo, align 8
  %2 = bitcast %0* %1 to i8*
  %add.ptr = getelementptr inbounds i8* %2, i64 32
  %3 = bitcast i8* %add.ptr to i8**
  %4 = load %0** %foo, align 8
  %sub.ptr.rhs.cast = ptrtoint %0* %4 to i64
  %sub.ptr.lhs.cast = ptrtoint i8** %3 to i64
  %ivar.offset = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %5 = bitcast %0* %4 to i8**
  %6 = call i8* @objc_assign_ivar(i8* %0, i8** %5, i64 %ivar.offset)
  %7 = load i8** @rhs, align 8
  %8 = load %0** %foo, align 8
  %9 = bitcast %0* %8 to i8*
  %add.ptr1 = getelementptr inbounds i8* %9, i64 0
  %10 = bitcast i8* %add.ptr1 to i8**
  %11 = load %0** %foo, align 8
  %sub.ptr.rhs.cast2 = ptrtoint %0* %11 to i64
  %sub.ptr.lhs.cast3 = ptrtoint i8** %10 to i64
  %ivar.offset4 = sub i64 %sub.ptr.lhs.cast3, %sub.ptr.rhs.cast2
  %12 = bitcast %0* %11 to i8**
  %13 = call i8* @objc_assign_ivar(i8* %7, i8** %12, i64 %ivar.offset4)
  %14 = load i8** @rhs, align 8
  %15 = load %0** %foo, align 8
  %16 = bitcast %0* %15 to i8*
  %add.ptr5 = getelementptr inbounds i8* %16, i64 8
  %17 = bitcast i8* %add.ptr5 to [3 x i8*]*
  %arrayidx = getelementptr inbounds [3 x i8*]* %17, i32 0, i64 0
  %18 = load %0** %foo, align 8
  %sub.ptr.rhs.cast6 = ptrtoint %0* %18 to i64
  %sub.ptr.lhs.cast7 = ptrtoint i8** %arrayidx to i64
  %ivar.offset8 = sub i64 %sub.ptr.lhs.cast7, %sub.ptr.rhs.cast6
  %19 = bitcast %0* %18 to i8**
  %20 = call i8* @objc_assign_ivar(i8* %14, i8** %19, i64 %ivar.offset8)
  %21 = load i8** @rhs, align 8
  %22 = load %0** %foo, align 8
  %23 = bitcast %0* %22 to i8*
  %add.ptr9 = getelementptr inbounds i8* %23, i64 40
  %24 = bitcast i8* %add.ptr9 to [10 x i8*]*
  %arrayidx10 = getelementptr inbounds [10 x i8*]* %24, i32 0, i64 0
  %25 = load %0** %foo, align 8
  %sub.ptr.rhs.cast11 = ptrtoint %0* %25 to i64
  %sub.ptr.lhs.cast12 = ptrtoint i8** %arrayidx10 to i64
  %ivar.offset13 = sub i64 %sub.ptr.lhs.cast12, %sub.ptr.rhs.cast11
  %26 = bitcast %0* %25 to i8**
  %27 = call i8* @objc_assign_ivar(i8* %21, i8** %26, i64 %ivar.offset13)
  %28 = load i8** @rhs, align 8
  %29 = load %0** %foo, align 8
  %30 = bitcast %0* %29 to i8*
  %add.ptr14 = getelementptr inbounds i8* %30, i64 120
  %31 = bitcast i8* %add.ptr14 to i8**
  %32 = load %0** %foo, align 8
  %sub.ptr.rhs.cast15 = ptrtoint %0* %32 to i64
  %sub.ptr.lhs.cast16 = ptrtoint i8** %31 to i64
  %ivar.offset17 = sub i64 %sub.ptr.lhs.cast16, %sub.ptr.rhs.cast15
  %33 = bitcast %0* %32 to i8**
  %34 = call i8* @objc_assign_ivar(i8* %28, i8** %33, i64 %ivar.offset17)
  %35 = load i8** @rhs, align 8
  %36 = bitcast i8* %35 to %1*
  %37 = load %0** %foo, align 8
  %38 = bitcast %0* %37 to i8*
  %add.ptr18 = getelementptr inbounds i8* %38, i64 128
  %39 = bitcast i8* %add.ptr18 to [10 x %1*]*
  %arrayidx19 = getelementptr inbounds [10 x %1*]* %39, i32 0, i64 0
  %40 = load %0** %foo, align 8
  %sub.ptr.rhs.cast20 = ptrtoint %0* %40 to i64
  %sub.ptr.lhs.cast21 = ptrtoint %1** %arrayidx19 to i64
  %ivar.offset22 = sub i64 %sub.ptr.lhs.cast21, %sub.ptr.rhs.cast20
  %41 = bitcast %1* %36 to i8*
  %42 = bitcast %0* %40 to i8**
  %43 = call i8* @objc_assign_ivar(i8* %41, i8** %42, i64 %ivar.offset22)
  %44 = load i8** @rhs, align 8
  %45 = load %0** %foo, align 8
  %46 = bitcast %0* %45 to i8*
  %add.ptr23 = getelementptr inbounds i8* %46, i64 208
  %47 = bitcast i8* %add.ptr23 to %struct.struct_with_ids_t*
  %element = getelementptr inbounds %struct.struct_with_ids_t* %47, i32 0, i32 0
  %48 = load %0** %foo, align 8
  %sub.ptr.rhs.cast24 = ptrtoint %0* %48 to i64
  %sub.ptr.lhs.cast25 = ptrtoint i8** %element to i64
  %ivar.offset26 = sub i64 %sub.ptr.lhs.cast25, %sub.ptr.rhs.cast24
  %49 = bitcast %0* %48 to i8**
  %50 = call i8* @objc_assign_ivar(i8* %44, i8** %49, i64 %ivar.offset26)
  %51 = load i8** @rhs, align 8
  %52 = load %0** %foo, align 8
  %53 = bitcast %0* %52 to i8*
  %add.ptr27 = getelementptr inbounds i8* %53, i64 208
  %54 = bitcast i8* %add.ptr27 to %struct.struct_with_ids_t*
  %elementArray = getelementptr inbounds %struct.struct_with_ids_t* %54, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [10 x i8*]* %elementArray, i32 0, i64 0
  %55 = load %0** %foo, align 8
  %sub.ptr.rhs.cast29 = ptrtoint %0* %55 to i64
  %sub.ptr.lhs.cast30 = ptrtoint i8** %arrayidx28 to i64
  %ivar.offset31 = sub i64 %sub.ptr.lhs.cast30, %sub.ptr.rhs.cast29
  %56 = bitcast %0* %55 to i8**
  %57 = call i8* @objc_assign_ivar(i8* %51, i8** %56, i64 %ivar.offset31)
  %58 = load i8** @rhs, align 8
  %59 = load %0** %foo, align 8
  %60 = bitcast %0* %59 to i8*
  %add.ptr32 = getelementptr inbounds i8* %60, i64 208
  %61 = bitcast i8* %add.ptr32 to %struct.struct_with_ids_t*
  %cfElement = getelementptr inbounds %struct.struct_with_ids_t* %61, i32 0, i32 2
  %62 = load %0** %foo, align 8
  %sub.ptr.rhs.cast33 = ptrtoint %0* %62 to i64
  %sub.ptr.lhs.cast34 = ptrtoint i8** %cfElement to i64
  %ivar.offset35 = sub i64 %sub.ptr.lhs.cast34, %sub.ptr.rhs.cast33
  %63 = bitcast %0* %62 to i8**
  %64 = call i8* @objc_assign_ivar(i8* %58, i8** %63, i64 %ivar.offset35)
  %65 = load i8** @rhs, align 8
  %66 = load %0** %foo, align 8
  %67 = bitcast %0* %66 to i8*
  %add.ptr36 = getelementptr inbounds i8* %67, i64 208
  %68 = bitcast i8* %add.ptr36 to %struct.struct_with_ids_t*
  %cfElementArray = getelementptr inbounds %struct.struct_with_ids_t* %68, i32 0, i32 3
  %arrayidx37 = getelementptr inbounds [10 x i8*]* %cfElementArray, i32 0, i64 0
  %69 = load %0** %foo, align 8
  %sub.ptr.rhs.cast38 = ptrtoint %0* %69 to i64
  %sub.ptr.lhs.cast39 = ptrtoint i8** %arrayidx37 to i64
  %ivar.offset40 = sub i64 %sub.ptr.lhs.cast39, %sub.ptr.rhs.cast38
  %70 = bitcast %0* %69 to i8**
  %71 = call i8* @objc_assign_ivar(i8* %65, i8** %70, i64 %ivar.offset40)
  store i32 1, i32* %counter, align 4
  %72 = load i8** @rhs, align 8
  %73 = bitcast i8* %72 to %0*
  %74 = load %0** %foo, align 8
  %75 = bitcast %0* %74 to i8*
  %add.ptr41 = getelementptr inbounds i8* %75, i64 384
  %76 = bitcast i8* %add.ptr41 to [20 x %0*]*
  %arrayidx42 = getelementptr inbounds [20 x %0*]* %76, i32 0, i64 5
  %77 = load %0** %foo, align 8
  %sub.ptr.rhs.cast43 = ptrtoint %0* %77 to i64
  %sub.ptr.lhs.cast44 = ptrtoint %0** %arrayidx42 to i64
  %ivar.offset45 = sub i64 %sub.ptr.lhs.cast44, %sub.ptr.rhs.cast43
  %78 = bitcast %0* %73 to i8*
  %79 = bitcast %0* %77 to i8**
  %80 = call i8* @objc_assign_ivar(i8* %78, i8** %79, i64 %ivar.offset45)
  %81 = load i8** @rhs, align 8
  %82 = bitcast i8* %81 to %0*
  %83 = load i32* %counter, align 4
  %inc = add nsw i32 %83, 1
  store i32 %inc, i32* %counter, align 4
  %idxprom = sext i32 %inc to i64
  %84 = load %0** %foo, align 8
  %85 = bitcast %0* %84 to i8*
  %add.ptr46 = getelementptr inbounds i8* %85, i64 384
  %86 = bitcast i8* %add.ptr46 to [20 x %0*]*
  %arrayidx47 = getelementptr inbounds [20 x %0*]* %86, i32 0, i64 %idxprom
  %87 = load %0** %foo, align 8
  %sub.ptr.rhs.cast48 = ptrtoint %0* %87 to i64
  %sub.ptr.lhs.cast49 = ptrtoint %0** %arrayidx47 to i64
  %ivar.offset50 = sub i64 %sub.ptr.lhs.cast49, %sub.ptr.rhs.cast48
  %88 = bitcast %0* %82 to i8*
  %89 = bitcast %0* %87 to i8**
  %90 = call i8* @objc_assign_ivar(i8* %88, i8** %89, i64 %ivar.offset50)
  %91 = load i32* %counter, align 4
  %inc51 = add nsw i32 %91, 1
  store i32 %inc51, i32* %counter, align 4
  %idxprom52 = sext i32 %inc51 to i64
  %92 = load %0** %foo, align 8
  %93 = bitcast %0* %92 to i8*
  %add.ptr53 = getelementptr inbounds i8* %93, i64 544
  %94 = bitcast i8* %add.ptr53 to [5 x i16]*
  %arrayidx54 = getelementptr inbounds [5 x i16]* %94, i32 0, i64 %idxprom52
  store i16 15, i16* %arrayidx54, align 2
  %95 = load i8** @rhs, align 8
  %96 = bitcast i8* %95 to %0*
  %97 = load %0** %foo, align 8
  %98 = bitcast %0* %97 to i8*
  %add.ptr55 = getelementptr inbounds i8* %98, i64 544
  %99 = bitcast i8* %add.ptr55 to [5 x i16]*
  %arrayidx56 = getelementptr inbounds [5 x i16]* %99, i32 0, i64 2
  %100 = load i16* %arrayidx56, align 2
  %idxprom57 = sext i16 %100 to i64
  %101 = load %0** %foo, align 8
  %102 = bitcast %0* %101 to i8*
  %add.ptr58 = getelementptr inbounds i8* %102, i64 384
  %103 = bitcast i8* %add.ptr58 to [20 x %0*]*
  %arrayidx59 = getelementptr inbounds [20 x %0*]* %103, i32 0, i64 %idxprom57
  %104 = load %0** %foo, align 8
  %sub.ptr.rhs.cast60 = ptrtoint %0* %104 to i64
  %sub.ptr.lhs.cast61 = ptrtoint %0** %arrayidx59 to i64
  %ivar.offset62 = sub i64 %sub.ptr.lhs.cast61, %sub.ptr.rhs.cast60
  %105 = bitcast %0* %96 to i8*
  %106 = bitcast %0* %104 to i8**
  %107 = call i8* @objc_assign_ivar(i8* %105, i8** %106, i64 %ivar.offset62)
  ret void
}

declare i8* @objc_assign_ivar(i8*, i8**, i64)

!llvm.module.flags = !{!0, !1, !2, !3}

!0 = metadata !{i32 1, metadata !"Objective-C Version", i32 1}
!1 = metadata !{i32 1, metadata !"Objective-C Image Info Version", i32 0}
!2 = metadata !{i32 1, metadata !"Objective-C Image Info Section", metadata !"__OBJC, __image_info,regular"}
!3 = metadata !{i32 1, metadata !"Objective-C Garbage Collection", i32 2}
