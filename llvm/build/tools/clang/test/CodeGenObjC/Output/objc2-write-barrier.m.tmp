; ModuleID = '/home/jazouani/llvm/llvm-3.2/tools/clang/test/CodeGenObjC/objc2-write-barrier.m'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin10"

%0 = type opaque
%1 = type opaque
%2 = type opaque
%struct.__CFDictionary = type opaque
%struct.struct_with_ids_t = type { i8*, [10 x i8*], %struct.__CFDictionary*, [10 x %struct.__CFDictionary*] }
%struct._objc_module = type { i64, i64, i8*, %struct._objc_symtab* }
%struct._objc_symtab = type { i64, i8*, i16, i16, [0 x i8*] }

@GlobalAssigns = global i32 0, align 4
@IvarAssigns = global i32 0, align 4
@StrongCastAssigns = global i32 0, align 4
@GlobalId = global i8* null, align 8
@GlobalArray = global [20 x i8*] zeroinitializer, align 16
@GlobalObject = global %0* null, align 8
@GlobalObjectArray = global [20 x %0*] zeroinitializer, align 16
@Gdict = global %struct.__CFDictionary* null, align 8
@Gdictarray = global [10 x %struct.__CFDictionary*] zeroinitializer, align 16
@GlobalStruct = global %struct.struct_with_ids_t zeroinitializer, align 8
@GlobalStructArray = global [10 x %struct.struct_with_ids_t] zeroinitializer, align 16
@rhs = global i8* null, align 8
@_ZZ11testGlobalsvE14staticGlobalId = internal global i8* null, align 8
@_ZZ11testGlobalsvE17staticGlobalArray = internal global [20 x i8*] zeroinitializer, align 16
@_ZZ11testGlobalsvE18staticGlobalObject = internal global %0* null, align 8
@_ZZ11testGlobalsvE23staticGlobalObjectArray = internal global [20 x %0*] zeroinitializer, align 16
@_ZZ11testGlobalsvE11staticGdict = internal global %struct.__CFDictionary* null, align 8
@_ZZ11testGlobalsvE16staticGdictarray = internal global [10 x %struct.__CFDictionary*] zeroinitializer, align 16
@_ZZ11testGlobalsvE18staticGlobalStruct = internal global %struct.struct_with_ids_t zeroinitializer, align 8
@_ZZ11testGlobalsvE23staticGlobalStructArray = internal global [10 x %struct.struct_with_ids_t] zeroinitializer, align 16
@"\01L_OBJC_CLASS_NAME_" = internal global [1 x i8] zeroinitializer, section "__TEXT,__cstring,cstring_literals", align 1
@"\01L_OBJC_MODULES" = internal global %struct._objc_module { i64 7, i64 32, i8* getelementptr inbounds ([1 x i8]* @"\01L_OBJC_CLASS_NAME_", i32 0, i32 0), %struct._objc_symtab* null }, section "__OBJC,__module_info,regular,no_dead_strip", align 4
@llvm.used = appending global [2 x i8*] [i8* getelementptr inbounds ([1 x i8]* @"\01L_OBJC_CLASS_NAME_", i32 0, i32 0), i8* bitcast (%struct._objc_module* @"\01L_OBJC_MODULES" to i8*)], section "llvm.metadata"

define i32 @_Z11testGlobalsv() nounwind {
entry:
  %counter = alloca i32, align 4
  store i32 0, i32* %counter, align 4
  %0 = load i8** @rhs, align 8
  %globalassign = call i8* @objc_assign_global(i8* %0, i8** @GlobalId)
  %1 = load i8** @rhs, align 8
  %globalassign1 = call i8* @objc_assign_global(i8* %1, i8** getelementptr inbounds ([20 x i8*]* @GlobalArray, i32 0, i64 0))
  %2 = load i8** @rhs, align 8
  %3 = bitcast i8* %2 to %0*
  %4 = bitcast %0* %3 to i8*
  %globalassign2 = call i8* @objc_assign_global(i8* %4, i8** bitcast (%0** @GlobalObject to i8**))
  %5 = load i8** @rhs, align 8
  %6 = bitcast i8* %5 to %0*
  %7 = bitcast %0* %6 to i8*
  %globalassign3 = call i8* @objc_assign_global(i8* %7, i8** bitcast ([20 x %0*]* @GlobalObjectArray to i8**))
  %8 = load i8** @rhs, align 8
  %9 = bitcast i8* %8 to %struct.__CFDictionary*
  %10 = bitcast %struct.__CFDictionary* %9 to i8*
  %globalassign4 = call i8* @objc_assign_global(i8* %10, i8** bitcast (%struct.__CFDictionary** @Gdict to i8**))
  %11 = load i8** @rhs, align 8
  %12 = bitcast i8* %11 to %struct.__CFDictionary*
  %13 = bitcast %struct.__CFDictionary* %12 to i8*
  %globalassign5 = call i8* @objc_assign_global(i8* %13, i8** bitcast (%struct.__CFDictionary** getelementptr inbounds ([10 x %struct.__CFDictionary*]* @Gdictarray, i32 0, i64 1) to i8**))
  %14 = load i8** @rhs, align 8
  %globalassign6 = call i8* @objc_assign_global(i8* %14, i8** getelementptr inbounds (%struct.struct_with_ids_t* @GlobalStruct, i32 0, i32 0))
  %15 = load i8** @rhs, align 8
  %globalassign7 = call i8* @objc_assign_global(i8* %15, i8** getelementptr inbounds (%struct.struct_with_ids_t* @GlobalStruct, i32 0, i32 1, i64 0))
  %16 = load i8** @rhs, align 8
  %17 = bitcast i8* %16 to %struct.__CFDictionary*
  %18 = bitcast %struct.__CFDictionary* %17 to i8*
  %globalassign8 = call i8* @objc_assign_global(i8* %18, i8** bitcast (%struct.__CFDictionary** getelementptr inbounds (%struct.struct_with_ids_t* @GlobalStruct, i32 0, i32 2) to i8**))
  %19 = load i8** @rhs, align 8
  %20 = bitcast i8* %19 to %struct.__CFDictionary*
  %21 = bitcast %struct.__CFDictionary* %20 to i8*
  %globalassign9 = call i8* @objc_assign_global(i8* %21, i8** bitcast (%struct.__CFDictionary** getelementptr inbounds (%struct.struct_with_ids_t* @GlobalStruct, i32 0, i32 3, i64 0) to i8**))
  %22 = load i8** @rhs, align 8
  %globalassign10 = call i8* @objc_assign_global(i8* %22, i8** @_ZZ11testGlobalsvE14staticGlobalId)
  %23 = load i8** @rhs, align 8
  %globalassign11 = call i8* @objc_assign_global(i8* %23, i8** getelementptr inbounds ([20 x i8*]* @_ZZ11testGlobalsvE17staticGlobalArray, i32 0, i64 0))
  %24 = load i8** @rhs, align 8
  %25 = bitcast i8* %24 to %0*
  %26 = bitcast %0* %25 to i8*
  %globalassign12 = call i8* @objc_assign_global(i8* %26, i8** bitcast (%0** @_ZZ11testGlobalsvE18staticGlobalObject to i8**))
  %27 = load i8** @rhs, align 8
  %28 = bitcast i8* %27 to %0*
  %29 = bitcast %0* %28 to i8*
  %globalassign13 = call i8* @objc_assign_global(i8* %29, i8** bitcast ([20 x %0*]* @_ZZ11testGlobalsvE23staticGlobalObjectArray to i8**))
  %30 = load i8** @rhs, align 8
  %31 = bitcast i8* %30 to %struct.__CFDictionary*
  %32 = bitcast %struct.__CFDictionary* %31 to i8*
  %globalassign14 = call i8* @objc_assign_global(i8* %32, i8** bitcast (%struct.__CFDictionary** @_ZZ11testGlobalsvE11staticGdict to i8**))
  %33 = load i8** @rhs, align 8
  %34 = bitcast i8* %33 to %struct.__CFDictionary*
  %35 = bitcast %struct.__CFDictionary* %34 to i8*
  %globalassign15 = call i8* @objc_assign_global(i8* %35, i8** bitcast (%struct.__CFDictionary** getelementptr inbounds ([10 x %struct.__CFDictionary*]* @_ZZ11testGlobalsvE16staticGdictarray, i32 0, i64 1) to i8**))
  %36 = load i8** @rhs, align 8
  %globalassign16 = call i8* @objc_assign_global(i8* %36, i8** getelementptr inbounds (%struct.struct_with_ids_t* @_ZZ11testGlobalsvE18staticGlobalStruct, i32 0, i32 0))
  %37 = load i8** @rhs, align 8
  %globalassign17 = call i8* @objc_assign_global(i8* %37, i8** getelementptr inbounds (%struct.struct_with_ids_t* @_ZZ11testGlobalsvE18staticGlobalStruct, i32 0, i32 1, i64 0))
  %38 = load i8** @rhs, align 8
  %39 = bitcast i8* %38 to %struct.__CFDictionary*
  %40 = bitcast %struct.__CFDictionary* %39 to i8*
  %globalassign18 = call i8* @objc_assign_global(i8* %40, i8** bitcast (%struct.__CFDictionary** getelementptr inbounds (%struct.struct_with_ids_t* @_ZZ11testGlobalsvE18staticGlobalStruct, i32 0, i32 2) to i8**))
  %41 = load i8** @rhs, align 8
  %42 = bitcast i8* %41 to %struct.__CFDictionary*
  %43 = bitcast %struct.__CFDictionary* %42 to i8*
  %globalassign19 = call i8* @objc_assign_global(i8* %43, i8** bitcast (%struct.__CFDictionary** getelementptr inbounds (%struct.struct_with_ids_t* @_ZZ11testGlobalsvE18staticGlobalStruct, i32 0, i32 3, i64 0) to i8**))
  %44 = load i32* %counter, align 4
  ret i32 %44
}

declare i8* @objc_assign_global(i8*, i8**)

define i32 @_Z9testIvarsv() nounwind {
entry:
  %foo = alloca %1*, align 8
  %counter = alloca i32, align 4
  store i32 0, i32* %counter, align 4
  %0 = load i8** @rhs, align 8
  %1 = load %1** %foo, align 8
  %2 = bitcast %1* %1 to i8*
  %add.ptr = getelementptr inbounds i8* %2, i64 32
  %3 = bitcast i8* %add.ptr to i8**
  %4 = load %1** %foo, align 8
  %sub.ptr.rhs.cast = ptrtoint %1* %4 to i64
  %sub.ptr.lhs.cast = ptrtoint i8** %3 to i64
  %ivar.offset = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %5 = bitcast %1* %4 to i8**
  %6 = call i8* @objc_assign_ivar(i8* %0, i8** %5, i64 %ivar.offset)
  %7 = load i8** @rhs, align 8
  %8 = bitcast i8* %7 to %struct.__CFDictionary*
  %9 = load %1** %foo, align 8
  %10 = bitcast %1* %9 to i8*
  %add.ptr1 = getelementptr inbounds i8* %10, i64 0
  %11 = bitcast i8* %add.ptr1 to %struct.__CFDictionary**
  %12 = load %1** %foo, align 8
  %sub.ptr.rhs.cast2 = ptrtoint %1* %12 to i64
  %sub.ptr.lhs.cast3 = ptrtoint %struct.__CFDictionary** %11 to i64
  %ivar.offset4 = sub i64 %sub.ptr.lhs.cast3, %sub.ptr.rhs.cast2
  %13 = bitcast %struct.__CFDictionary* %8 to i8*
  %14 = bitcast %1* %12 to i8**
  %15 = call i8* @objc_assign_ivar(i8* %13, i8** %14, i64 %ivar.offset4)
  %16 = load i8** @rhs, align 8
  %17 = bitcast i8* %16 to %struct.__CFDictionary*
  %18 = load %1** %foo, align 8
  %19 = bitcast %1* %18 to i8*
  %add.ptr5 = getelementptr inbounds i8* %19, i64 8
  %20 = bitcast i8* %add.ptr5 to [3 x %struct.__CFDictionary*]*
  %arrayidx = getelementptr inbounds [3 x %struct.__CFDictionary*]* %20, i32 0, i64 0
  %21 = load %1** %foo, align 8
  %sub.ptr.rhs.cast6 = ptrtoint %1* %21 to i64
  %sub.ptr.lhs.cast7 = ptrtoint %struct.__CFDictionary** %arrayidx to i64
  %ivar.offset8 = sub i64 %sub.ptr.lhs.cast7, %sub.ptr.rhs.cast6
  %22 = bitcast %struct.__CFDictionary* %17 to i8*
  %23 = bitcast %1* %21 to i8**
  %24 = call i8* @objc_assign_ivar(i8* %22, i8** %23, i64 %ivar.offset8)
  %25 = load i8** @rhs, align 8
  %26 = load %1** %foo, align 8
  %27 = bitcast %1* %26 to i8*
  %add.ptr9 = getelementptr inbounds i8* %27, i64 40
  %28 = bitcast i8* %add.ptr9 to [10 x i8*]*
  %arrayidx10 = getelementptr inbounds [10 x i8*]* %28, i32 0, i64 0
  %29 = load %1** %foo, align 8
  %sub.ptr.rhs.cast11 = ptrtoint %1* %29 to i64
  %sub.ptr.lhs.cast12 = ptrtoint i8** %arrayidx10 to i64
  %ivar.offset13 = sub i64 %sub.ptr.lhs.cast12, %sub.ptr.rhs.cast11
  %30 = bitcast %1* %29 to i8**
  %31 = call i8* @objc_assign_ivar(i8* %25, i8** %30, i64 %ivar.offset13)
  %32 = load i8** @rhs, align 8
  %33 = bitcast i8* %32 to %0*
  %34 = load %1** %foo, align 8
  %35 = bitcast %1* %34 to i8*
  %add.ptr14 = getelementptr inbounds i8* %35, i64 120
  %36 = bitcast i8* %add.ptr14 to %0**
  %37 = load %1** %foo, align 8
  %sub.ptr.rhs.cast15 = ptrtoint %1* %37 to i64
  %sub.ptr.lhs.cast16 = ptrtoint %0** %36 to i64
  %ivar.offset17 = sub i64 %sub.ptr.lhs.cast16, %sub.ptr.rhs.cast15
  %38 = bitcast %0* %33 to i8*
  %39 = bitcast %1* %37 to i8**
  %40 = call i8* @objc_assign_ivar(i8* %38, i8** %39, i64 %ivar.offset17)
  %41 = load i8** @rhs, align 8
  %42 = bitcast i8* %41 to %2*
  %43 = load %1** %foo, align 8
  %44 = bitcast %1* %43 to i8*
  %add.ptr18 = getelementptr inbounds i8* %44, i64 128
  %45 = bitcast i8* %add.ptr18 to [10 x %2*]*
  %arrayidx19 = getelementptr inbounds [10 x %2*]* %45, i32 0, i64 0
  %46 = load %1** %foo, align 8
  %sub.ptr.rhs.cast20 = ptrtoint %1* %46 to i64
  %sub.ptr.lhs.cast21 = ptrtoint %2** %arrayidx19 to i64
  %ivar.offset22 = sub i64 %sub.ptr.lhs.cast21, %sub.ptr.rhs.cast20
  %47 = bitcast %2* %42 to i8*
  %48 = bitcast %1* %46 to i8**
  %49 = call i8* @objc_assign_ivar(i8* %47, i8** %48, i64 %ivar.offset22)
  %50 = load i8** @rhs, align 8
  %51 = load %1** %foo, align 8
  %52 = bitcast %1* %51 to i8*
  %add.ptr23 = getelementptr inbounds i8* %52, i64 208
  %53 = bitcast i8* %add.ptr23 to %struct.struct_with_ids_t*
  %element = getelementptr inbounds %struct.struct_with_ids_t* %53, i32 0, i32 0
  %54 = load %1** %foo, align 8
  %sub.ptr.rhs.cast24 = ptrtoint %1* %54 to i64
  %sub.ptr.lhs.cast25 = ptrtoint i8** %element to i64
  %ivar.offset26 = sub i64 %sub.ptr.lhs.cast25, %sub.ptr.rhs.cast24
  %55 = bitcast %1* %54 to i8**
  %56 = call i8* @objc_assign_ivar(i8* %50, i8** %55, i64 %ivar.offset26)
  %57 = load i8** @rhs, align 8
  %58 = load %1** %foo, align 8
  %59 = bitcast %1* %58 to i8*
  %add.ptr27 = getelementptr inbounds i8* %59, i64 208
  %60 = bitcast i8* %add.ptr27 to %struct.struct_with_ids_t*
  %elementArray = getelementptr inbounds %struct.struct_with_ids_t* %60, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [10 x i8*]* %elementArray, i32 0, i64 0
  %61 = load %1** %foo, align 8
  %sub.ptr.rhs.cast29 = ptrtoint %1* %61 to i64
  %sub.ptr.lhs.cast30 = ptrtoint i8** %arrayidx28 to i64
  %ivar.offset31 = sub i64 %sub.ptr.lhs.cast30, %sub.ptr.rhs.cast29
  %62 = bitcast %1* %61 to i8**
  %63 = call i8* @objc_assign_ivar(i8* %57, i8** %62, i64 %ivar.offset31)
  %64 = load i8** @rhs, align 8
  %65 = bitcast i8* %64 to %struct.__CFDictionary*
  %66 = load %1** %foo, align 8
  %67 = bitcast %1* %66 to i8*
  %add.ptr32 = getelementptr inbounds i8* %67, i64 208
  %68 = bitcast i8* %add.ptr32 to %struct.struct_with_ids_t*
  %cfElement = getelementptr inbounds %struct.struct_with_ids_t* %68, i32 0, i32 2
  %69 = load %1** %foo, align 8
  %sub.ptr.rhs.cast33 = ptrtoint %1* %69 to i64
  %sub.ptr.lhs.cast34 = ptrtoint %struct.__CFDictionary** %cfElement to i64
  %ivar.offset35 = sub i64 %sub.ptr.lhs.cast34, %sub.ptr.rhs.cast33
  %70 = bitcast %struct.__CFDictionary* %65 to i8*
  %71 = bitcast %1* %69 to i8**
  %72 = call i8* @objc_assign_ivar(i8* %70, i8** %71, i64 %ivar.offset35)
  %73 = load i8** @rhs, align 8
  %74 = bitcast i8* %73 to %struct.__CFDictionary*
  %75 = load %1** %foo, align 8
  %76 = bitcast %1* %75 to i8*
  %add.ptr36 = getelementptr inbounds i8* %76, i64 208
  %77 = bitcast i8* %add.ptr36 to %struct.struct_with_ids_t*
  %cfElementArray = getelementptr inbounds %struct.struct_with_ids_t* %77, i32 0, i32 3
  %arrayidx37 = getelementptr inbounds [10 x %struct.__CFDictionary*]* %cfElementArray, i32 0, i64 0
  %78 = load %1** %foo, align 8
  %sub.ptr.rhs.cast38 = ptrtoint %1* %78 to i64
  %sub.ptr.lhs.cast39 = ptrtoint %struct.__CFDictionary** %arrayidx37 to i64
  %ivar.offset40 = sub i64 %sub.ptr.lhs.cast39, %sub.ptr.rhs.cast38
  %79 = bitcast %struct.__CFDictionary* %74 to i8*
  %80 = bitcast %1* %78 to i8**
  %81 = call i8* @objc_assign_ivar(i8* %79, i8** %80, i64 %ivar.offset40)
  %82 = load i32* %counter, align 4
  ret i32 %82
}

declare i8* @objc_assign_ivar(i8*, i8**, i64)

!llvm.module.flags = !{!0, !1, !2, !3}

!0 = metadata !{i32 1, metadata !"Objective-C Version", i32 1}
!1 = metadata !{i32 1, metadata !"Objective-C Image Info Version", i32 0}
!2 = metadata !{i32 1, metadata !"Objective-C Image Info Section", metadata !"__OBJC, __image_info,regular"}
!3 = metadata !{i32 1, metadata !"Objective-C Garbage Collection", i32 2}
