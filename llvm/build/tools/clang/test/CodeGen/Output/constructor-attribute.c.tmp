; ModuleID = '/home/jazouani/llvm/llvm-3.2/tools/clang/test/CodeGen/constructor-attribute.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"A\0A\00", align 1
@.str1 = private unnamed_addr constant [3 x i8] c"B\0A\00", align 1
@.str2 = private unnamed_addr constant [7 x i8] c"A: %d\0A\00", align 1
@llvm.global_ctors = appending global [2 x { i32, void ()* }] [{ i32, void ()* } { i32 65535, void ()* @A }, { i32, void ()* } { i32 65535, void ()* @C }]
@llvm.global_dtors = appending global [2 x { i32, void ()* }] [{ i32, void ()* } { i32 65535, void ()* @B }, { i32, void ()* } { i32 65535, void ()* @D }]

define void @A() nounwind {
entry:
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8*, ...)

define void @B() nounwind {
entry:
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str1, i32 0, i32 0))
  ret void
}

define internal void @C() nounwind {
entry:
  %call = call i32 @foo()
  %call1 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([7 x i8]* @.str2, i32 0, i32 0), i32 %call)
  ret void
}

define internal void @D() nounwind {
entry:
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str1, i32 0, i32 0))
  ret void
}

define i32 @main() nounwind {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval
  ret i32 0
}

define internal i32 @foo() nounwind {
entry:
  ret i32 10
}
