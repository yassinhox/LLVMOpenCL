; ModuleID = '<stdin>'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64"

%0 = type <{ i32, i32 }>
%1 = type <{ i32, i32 }>
%2 = type <{ i32, i32 }>
%3 = type <{ i16, i32, [10 x i8] }>

@s0_align_x = global i32 4, align 4
@s0_align_y = global i32 1, align 4
@s0_align = global i32 4, align 4
@s1_align_x = global i32 1, align 4
@s1_align_y = global i32 1, align 4
@s1_align = global i32 1, align 4
@s2_align_x = global i32 2, align 4
@s2_align_y = global i32 2, align 4
@s2_align = global i32 2, align 4
@s3_1 = global i32 1, align 4

define i32 @s0_load_x(%0*) nounwind {
  %2 = alloca %0*, align 8
  store %0* %0, %0** %2, align 8
  %3 = load %0** %2, align 8
  %4 = getelementptr inbounds %0* %3, i32 0, i32 0
  %5 = load i32* %4, align 4
  ret i32 %5
}

define i32 @s0_load_y(%0*) nounwind {
  %2 = alloca %0*, align 8
  store %0* %0, %0** %2, align 8
  %3 = load %0** %2, align 8
  %4 = getelementptr inbounds %0* %3, i32 0, i32 1
  %5 = load i32* %4, align 1
  ret i32 %5
}

define void @s0_copy(%0*, %0*) nounwind {
  %3 = alloca %0*, align 8
  %4 = alloca %0*, align 8
  store %0* %0, %0** %3, align 8
  store %0* %1, %0** %4, align 8
  %5 = load %0** %4, align 8
  %6 = load %0** %3, align 8
  %7 = bitcast %0* %5 to i8*
  %8 = bitcast %0* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %8, i64 8, i32 4, i1 false)
  ret void
}

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind

define i32 @s1_load_x(%1*) nounwind {
  %2 = alloca %1*, align 8
  store %1* %0, %1** %2, align 8
  %3 = load %1** %2, align 8
  %4 = getelementptr inbounds %1* %3, i32 0, i32 0
  %5 = load i32* %4, align 1
  ret i32 %5
}

define i32 @s1_load_y(%1*) nounwind {
  %2 = alloca %1*, align 8
  store %1* %0, %1** %2, align 8
  %3 = load %1** %2, align 8
  %4 = getelementptr inbounds %1* %3, i32 0, i32 1
  %5 = load i32* %4, align 1
  ret i32 %5
}

define void @s1_copy(%1*, %1*) nounwind {
  %3 = alloca %1*, align 8
  %4 = alloca %1*, align 8
  store %1* %0, %1** %3, align 8
  store %1* %1, %1** %4, align 8
  %5 = load %1** %4, align 8
  %6 = load %1** %3, align 8
  %7 = bitcast %1* %5 to i8*
  %8 = bitcast %1* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %8, i64 8, i32 1, i1 false)
  ret void
}

define i32 @s2_load_x(%2*) nounwind {
  %2 = alloca %2*, align 8
  store %2* %0, %2** %2, align 8
  %3 = load %2** %2, align 8
  %4 = getelementptr inbounds %2* %3, i32 0, i32 0
  %5 = load i32* %4, align 2
  ret i32 %5
}

define i32 @s2_load_y(%2*) nounwind {
  %2 = alloca %2*, align 8
  store %2* %0, %2** %2, align 8
  %3 = load %2** %2, align 8
  %4 = getelementptr inbounds %2* %3, i32 0, i32 1
  %5 = load i32* %4, align 2
  ret i32 %5
}

define void @s2_copy(%2*, %2*) nounwind {
  %3 = alloca %2*, align 8
  %4 = alloca %2*, align 8
  store %2* %0, %2** %3, align 8
  store %2* %1, %2** %4, align 8
  %5 = load %2** %4, align 8
  %6 = load %2** %3, align 8
  %7 = bitcast %2* %5 to i8*
  %8 = bitcast %2* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %8, i64 8, i32 2, i1 false)
  ret void
}

define i32 @test3(%3*) nounwind {
  %2 = alloca %3*, align 8
  store %3* %0, %3** %2, align 8
  %3 = load %3** %2, align 8
  %4 = getelementptr inbounds %3* %3, i32 0, i32 1
  %5 = load i32* %4, align 1
  ret i32 %5
}
