; ModuleID = '/home/jazouani/llvm/llvm-3.2/tools/clang/test/CodeGen/transparent-union.c'
target datalayout = "e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:32:32-n8:16:32-S128"
target triple = "i386-unknown-unknown"

%union.transp_t0 = type { i8* }

define void @f1_0(i32* %a0) nounwind {
entry:
  %a0.addr = alloca i32*, align 4
  %f0p = alloca void (i8*)*, align 4
  %agg.tmp = alloca %union.transp_t0, align 4
  %.compoundliteral = alloca %union.transp_t0, align 4
  store i32* %a0, i32** %a0.addr, align 4
  store void (i8*)* bitcast (void (%union.transp_t0*)* @f0 to void (i8*)*), void (i8*)** %f0p, align 4
  %f0 = bitcast %union.transp_t0* %.compoundliteral to i8**
  %0 = load i32** %a0.addr, align 4
  %1 = bitcast i32* %0 to i8*
  store i8* %1, i8** %f0, align 4
  %2 = bitcast %union.transp_t0* %agg.tmp to i8*
  %3 = bitcast %union.transp_t0* %.compoundliteral to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %2, i8* %3, i32 4, i32 4, i1 false)
  call void @f0(%union.transp_t0* byval align 4 %agg.tmp)
  %4 = load void (i8*)** %f0p, align 4
  %5 = load i32** %a0.addr, align 4
  %6 = bitcast i32* %5 to i8*
  call void %4(i8* %6)
  ret void
}

declare void @f0(%union.transp_t0* byval align 4)

declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture, i8* nocapture, i32, i32, i1) nounwind

define void @f1_1(i32* %a0) nounwind {
entry:
  %a0.addr = alloca i32*, align 4
  %.compoundliteral = alloca %union.transp_t0, align 4
  store i32* %a0, i32** %a0.addr, align 4
  %f0 = bitcast %union.transp_t0* %.compoundliteral to i8**
  %0 = load i32** %a0.addr, align 4
  %1 = bitcast i32* %0 to i8*
  store i8* %1, i8** %f0, align 4
  call void @f0(%union.transp_t0* byval align 4 %.compoundliteral)
  ret void
}
