; ModuleID = '/home/jazouani/llvm/llvm-3.2/tools/clang/test/CodeGen/c-strings.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.s = type { i8* }

@.str = private unnamed_addr constant [6 x i8] c"hello\00", align 1
@f1.x = internal global i8* getelementptr inbounds ([6 x i8]* @.str, i32 0, i32 0), align 8
@f2.x = internal global [6 x i8] c"hello\00", align 1
@f3.x = internal global [8 x i8] c"hello\00\00\00", align 1
@f4.x = internal global %struct.s { i8* getelementptr inbounds ([6 x i8]* @.str, i32 0, i32 0) }, align 8
@x = global [3 x i8] c"ola", align 1

define void @f0() nounwind {
entry:
  %call = call i32 (...)* @bar(i8* getelementptr inbounds ([6 x i8]* @.str, i32 0, i32 0))
  ret void
}

declare i32 @bar(...)

define void @f1() nounwind {
entry:
  %0 = load i8** @f1.x, align 8
  %call = call i32 (...)* @bar(i8* %0)
  ret void
}

define void @f2() nounwind {
entry:
  %call = call i32 (...)* @bar(i8* getelementptr inbounds ([6 x i8]* @f2.x, i32 0, i32 0))
  ret void
}

define void @f3() nounwind {
entry:
  %call = call i32 (...)* @bar(i8* getelementptr inbounds ([8 x i8]* @f3.x, i32 0, i32 0))
  ret void
}

define void @f4() nounwind {
entry:
  %call = call i32 (...)* @gaz(%struct.s* @f4.x)
  ret void
}

declare i32 @gaz(...)
