; ModuleID = '<stdin>'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin10"

%0 = type { i8*, %0*, i32, i32, i32 }

define void @foo() nounwind {
  %1 = alloca %0, align 8
  %2 = getelementptr inbounds %0* %1, i32 0, i32 0
  store i8* null, i8** %2
  %3 = getelementptr inbounds %0* %1, i32 0, i32 1
  store %0* %1, %0** %3
  %4 = getelementptr inbounds %0* %1, i32 0, i32 2
  store i32 0, i32* %4
  %5 = getelementptr inbounds %0* %1, i32 0, i32 3
  store i32 32, i32* %5
  %6 = call i32 (...)* @rhs()
  %7 = getelementptr inbounds %0* %1, i32 0, i32 1
  %8 = load %0** %7
  %9 = getelementptr inbounds %0* %8, i32 0, i32 4
  store i32 %6, i32* %9, align 4
  %10 = call i32 (...)* @rhs()
  %11 = getelementptr inbounds %0* %1, i32 0, i32 1
  %12 = load %0** %11
  %13 = getelementptr inbounds %0* %12, i32 0, i32 4
  %14 = load i32* %13, align 4
  %15 = add nsw i32 %14, %10
  store i32 %15, i32* %13, align 4
  %16 = bitcast %0* %1 to i8*
  call void @_Block_object_dispose(i8* %16, i32 8)
  ret void
}

declare i32 @rhs(...)

declare void @_Block_object_dispose(i8*, i32)
