; ModuleID = '/home/jazouani/llvm/llvm-3.2/tools/clang/test/CodeGen/packed-arrays.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unk-unk"

%struct.s0 = type <{ [2 x i32] }>
%struct.s1 = type <{ [2 x i32], i32, i32 }>
%struct.s2 = type <{ [2 x i32], i32, i32 }>
%struct.s3 = type <{ [2 x i32], i32, i32 }>

@align0 = global i32 1, align 4
@align1 = global i32 4, align 4
@align2 = global i32 1, align 4
@align3 = global i32 1, align 4
@align0_x = global i32 1, align 4
@align1_x = global i32 1, align 4
@align2_x = global i32 1, align 4
@align3_x = global i32 1, align 4
@align0_x0 = global i32 4, align 4
@align1_x0 = global i32 4, align 4
@align2_x0 = global i32 4, align 4
@align3_x0 = global i32 4, align 4
@g4 = external global [5 x double]

define i32 @f0_a(%struct.s0* nocapture %a) nounwind readonly optsize {
entry:
  %arrayidx = getelementptr inbounds %struct.s0* %a, i64 0, i32 0, i64 1
  %0 = load i32* %arrayidx, align 1, !tbaa !0
  ret i32 %0
}

define i32 @f0_b(%struct.s0* nocapture %a) nounwind readonly optsize {
entry:
  %add.ptr = getelementptr inbounds %struct.s0* %a, i64 0, i32 0, i64 1
  %0 = load i32* %add.ptr, align 4, !tbaa !0
  ret i32 %0
}

define i32 @f1_a(%struct.s1* nocapture %a) nounwind readonly optsize {
entry:
  %arrayidx = getelementptr inbounds %struct.s1* %a, i64 0, i32 0, i64 1
  %0 = load i32* %arrayidx, align 1, !tbaa !0
  ret i32 %0
}

define i32 @f1_b(%struct.s1* nocapture %a) nounwind readonly optsize {
entry:
  %add.ptr = getelementptr inbounds %struct.s1* %a, i64 0, i32 0, i64 1
  %0 = load i32* %add.ptr, align 4, !tbaa !0
  ret i32 %0
}

define i32 @f1_c(%struct.s1* nocapture %a) nounwind readonly optsize {
entry:
  %y = getelementptr inbounds %struct.s1* %a, i64 0, i32 1
  %0 = load i32* %y, align 4, !tbaa !0
  ret i32 %0
}

define i32 @f1_d(%struct.s1* nocapture %a) nounwind readonly optsize {
entry:
  %z = getelementptr inbounds %struct.s1* %a, i64 0, i32 2
  %0 = load i32* %z, align 1, !tbaa !0
  ret i32 %0
}

define i32 @f2_a(%struct.s2* nocapture %a) nounwind readonly optsize {
entry:
  %arrayidx = getelementptr inbounds %struct.s2* %a, i64 0, i32 0, i64 1
  %0 = load i32* %arrayidx, align 1, !tbaa !0
  ret i32 %0
}

define i32 @f2_b(%struct.s2* nocapture %a) nounwind readonly optsize {
entry:
  %add.ptr = getelementptr inbounds %struct.s2* %a, i64 0, i32 0, i64 1
  %0 = load i32* %add.ptr, align 4, !tbaa !0
  ret i32 %0
}

define i32 @f2_c(%struct.s2* nocapture %a) nounwind readonly optsize {
entry:
  %y = getelementptr inbounds %struct.s2* %a, i64 0, i32 1
  %0 = load i32* %y, align 1, !tbaa !0
  ret i32 %0
}

define i32 @f2_d(%struct.s2* nocapture %a) nounwind readonly optsize {
entry:
  %z = getelementptr inbounds %struct.s2* %a, i64 0, i32 2
  %0 = load i32* %z, align 1, !tbaa !0
  ret i32 %0
}

define i32 @f3_a(%struct.s3* nocapture %a) nounwind readonly optsize {
entry:
  %arrayidx = getelementptr inbounds %struct.s3* %a, i64 0, i32 0, i64 1
  %0 = load i32* %arrayidx, align 1, !tbaa !0
  ret i32 %0
}

define i32 @f3_b(%struct.s3* nocapture %a) nounwind readonly optsize {
entry:
  %add.ptr = getelementptr inbounds %struct.s3* %a, i64 0, i32 0, i64 1
  %0 = load i32* %add.ptr, align 4, !tbaa !0
  ret i32 %0
}

define i32 @f3_c(%struct.s3* nocapture %a) nounwind readonly optsize {
entry:
  %y = getelementptr inbounds %struct.s3* %a, i64 0, i32 1
  %0 = load i32* %y, align 1, !tbaa !0
  ret i32 %0
}

define i32 @f3_d(%struct.s3* nocapture %a) nounwind readonly optsize {
entry:
  %z = getelementptr inbounds %struct.s3* %a, i64 0, i32 2
  %0 = load i32* %z, align 1, !tbaa !0
  ret i32 %0
}

define double @f4() nounwind readonly optsize {
entry:
  %0 = load double* getelementptr inbounds ([5 x double]* @g4, i64 0, i64 1), align 8, !tbaa !3
  ret double %0
}

!0 = metadata !{metadata !"int", metadata !1}
!1 = metadata !{metadata !"omnipotent char", metadata !2}
!2 = metadata !{metadata !"Simple C/C++ TBAA"}
!3 = metadata !{metadata !"double", metadata !1}
