; ModuleID = '/home/jazouani/llvm/llvm-3.2/tools/clang/test/CodeGen/array.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@f2.c = private unnamed_addr constant [5 x i32] [i32 0, i32 1, i32 2, i32 3, i32 0], align 16

define void @f() nounwind {
entry:
  %a = alloca [2 x i32], align 4
  %arrayidx = getelementptr inbounds [2 x i32]* %a, i32 0, i64 0
  store i32 0, i32* %arrayidx, align 4
  ret void
}

define void @f2() nounwind {
entry:
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %a = alloca [10 x i32], align 16
  %b = alloca [10 x i32], align 16
  %c = alloca [5 x i32], align 16
  store i32 0, i32* %x, align 4
  store i32 1, i32* %y, align 4
  %arrayinit.begin = getelementptr inbounds [10 x i32]* %a, i64 0, i64 0
  %0 = load i32* %y, align 4
  store i32 %0, i32* %arrayinit.begin
  %arrayinit.element = getelementptr inbounds i32* %arrayinit.begin, i64 1
  %1 = load i32* %x, align 4
  store i32 %1, i32* %arrayinit.element
  %arrayinit.element1 = getelementptr inbounds i32* %arrayinit.element, i64 1
  store i32 2, i32* %arrayinit.element1
  %arrayinit.element2 = getelementptr inbounds i32* %arrayinit.element1, i64 1
  store i32 3, i32* %arrayinit.element2
  %arrayinit.start = getelementptr inbounds i32* %arrayinit.element2, i64 1
  %arrayinit.end = getelementptr inbounds i32* %arrayinit.begin, i64 10
  br label %arrayinit.body

arrayinit.body:                                   ; preds = %arrayinit.body, %entry
  %arrayinit.cur = phi i32* [ %arrayinit.start, %entry ], [ %arrayinit.next, %arrayinit.body ]
  store i32 0, i32* %arrayinit.cur
  %arrayinit.next = getelementptr inbounds i32* %arrayinit.cur, i64 1
  %arrayinit.done = icmp eq i32* %arrayinit.next, %arrayinit.end
  br i1 %arrayinit.done, label %arrayinit.end3, label %arrayinit.body

arrayinit.end3:                                   ; preds = %arrayinit.body
  %arrayinit.begin4 = getelementptr inbounds [10 x i32]* %b, i64 0, i64 0
  store i32 2, i32* %arrayinit.begin4
  %arrayinit.element5 = getelementptr inbounds i32* %arrayinit.begin4, i64 1
  store i32 4, i32* %arrayinit.element5
  %arrayinit.element6 = getelementptr inbounds i32* %arrayinit.element5, i64 1
  %2 = load i32* %x, align 4
  store i32 %2, i32* %arrayinit.element6
  %arrayinit.element7 = getelementptr inbounds i32* %arrayinit.element6, i64 1
  store i32 6, i32* %arrayinit.element7
  %arrayinit.element8 = getelementptr inbounds i32* %arrayinit.element7, i64 1
  %3 = load i32* %y, align 4
  store i32 %3, i32* %arrayinit.element8
  %arrayinit.element9 = getelementptr inbounds i32* %arrayinit.element8, i64 1
  store i32 8, i32* %arrayinit.element9
  %arrayinit.start10 = getelementptr inbounds i32* %arrayinit.element9, i64 1
  %arrayinit.end11 = getelementptr inbounds i32* %arrayinit.begin4, i64 10
  br label %arrayinit.body12

arrayinit.body12:                                 ; preds = %arrayinit.body12, %arrayinit.end3
  %arrayinit.cur13 = phi i32* [ %arrayinit.start10, %arrayinit.end3 ], [ %arrayinit.next14, %arrayinit.body12 ]
  store i32 0, i32* %arrayinit.cur13
  %arrayinit.next14 = getelementptr inbounds i32* %arrayinit.cur13, i64 1
  %arrayinit.done15 = icmp eq i32* %arrayinit.next14, %arrayinit.end11
  br i1 %arrayinit.done15, label %arrayinit.end16, label %arrayinit.body12

arrayinit.end16:                                  ; preds = %arrayinit.body12
  %4 = bitcast [5 x i32]* %c to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* bitcast ([5 x i32]* @f2.c to i8*), i64 20, i32 16, i1 false)
  ret void
}

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind
