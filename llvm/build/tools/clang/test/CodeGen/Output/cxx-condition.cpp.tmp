; ModuleID = '/home/jazouani/llvm/llvm-3.2/tools/clang/test/CodeGen/cxx-condition.cpp'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @_Z1fv() nounwind {
entry:
  %a = alloca i32, align 4
  %x = alloca i32, align 4
  %x1 = alloca i32, align 4
  %x4 = alloca i32, align 4
  %x6 = alloca i32, align 4
  %0 = load i32* %a, align 4
  store i32 %0, i32* %x, align 4
  %1 = load i32* %x, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32* %a, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %a, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i32* %x, align 4
  store i32 %3, i32* %a, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %4 = load i32* %a, align 4
  store i32 %4, i32* %x1, align 4
  %5 = load i32* %x1, align 4
  %tobool2 = icmp ne i32 %5, 0
  br i1 %tobool2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32* %a, align 4
  %inc3 = add nsw i32 %6, 1
  store i32 %inc3, i32* %a, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %7 = load i32* %a, align 4
  store i32 %7, i32* %x4, align 4
  %8 = load i32* %x4, align 4
  %tobool5 = icmp ne i32 %8, 0
  br i1 %tobool5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32* %a, align 4
  %dec = add nsw i32 %9, -1
  store i32 %dec, i32* %a, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %x6, align 4
  %10 = load i32* %x6, align 4
  switch i32 %10, label %sw.epilog [
  ]

sw.epilog:                                        ; preds = %for.end
  ret void
}
