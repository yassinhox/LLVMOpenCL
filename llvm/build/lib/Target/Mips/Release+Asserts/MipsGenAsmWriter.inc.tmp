/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void MipsInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    3598U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    3591U,	// BUNDLE
    3622U,	// LIFETIME_START
    3578U,	// LIFETIME_END
    5937U,	// ABSQ_S_PH
    5146U,	// ABSQ_S_QB
    7360U,	// ABSQ_S_W
    4199836U,	// ADD
    4200046U,	// ADDQH_PH
    4200163U,	// ADDQH_R_PH
    4201564U,	// ADDQH_R_W
    4201508U,	// ADDQH_W
    4200120U,	// ADDQ_PH
    4200219U,	// ADDQ_S_PH
    4201644U,	// ADDQ_S_W
    4199610U,	// ADDSC
    4199318U,	// ADDUH_QB
    4199426U,	// ADDUH_R_QB
    4200318U,	// ADDU_PH
    4199531U,	// ADDU_QB
    4200263U,	// ADDU_S_PH
    4199472U,	// ADDU_S_QB
    4199617U,	// ADDWC
    4200525U,	// ADDi
    4201327U,	// ADDiu
    4201308U,	// ADDu
    40357U,	// ADJCALLSTACKDOWN
    40376U,	// ADJCALLSTACKUP
    4199858U,	// AND
    4199858U,	// AND64
    71309395U,	// ANDi
    4199872U,	// APPEND
    272634428U,	// ATOMIC_CMP_SWAP_I16
    272634428U,	// ATOMIC_CMP_SWAP_I16_P8
    272634068U,	// ATOMIC_CMP_SWAP_I32
    272634068U,	// ATOMIC_CMP_SWAP_I32_P8
    272634272U,	// ATOMIC_CMP_SWAP_I64
    272634272U,	// ATOMIC_CMP_SWAP_I64_P8
    272634579U,	// ATOMIC_CMP_SWAP_I8
    272634579U,	// ATOMIC_CMP_SWAP_I8_P8
    4198895U,	// ATOMIC_LOAD_ADD_I16
    4198895U,	// ATOMIC_LOAD_ADD_I16_P8
    4198535U,	// ATOMIC_LOAD_ADD_I32
    4198535U,	// ATOMIC_LOAD_ADD_I32_P8
    4198739U,	// ATOMIC_LOAD_ADD_I64
    4198739U,	// ATOMIC_LOAD_ADD_I64_P8
    4199050U,	// ATOMIC_LOAD_ADD_I8
    4199050U,	// ATOMIC_LOAD_ADD_I8_P8
    4198915U,	// ATOMIC_LOAD_AND_I16
    4198915U,	// ATOMIC_LOAD_AND_I16_P8
    4198555U,	// ATOMIC_LOAD_AND_I32
    4198555U,	// ATOMIC_LOAD_AND_I32_P8
    4198759U,	// ATOMIC_LOAD_AND_I64
    4198759U,	// ATOMIC_LOAD_AND_I64_P8
    4199069U,	// ATOMIC_LOAD_AND_I8
    4199069U,	// ATOMIC_LOAD_AND_I8_P8
    4198935U,	// ATOMIC_LOAD_NAND_I16
    4198935U,	// ATOMIC_LOAD_NAND_I16_P8
    4198575U,	// ATOMIC_LOAD_NAND_I32
    4198575U,	// ATOMIC_LOAD_NAND_I32_P8
    4198779U,	// ATOMIC_LOAD_NAND_I64
    4198779U,	// ATOMIC_LOAD_NAND_I64_P8
    4199088U,	// ATOMIC_LOAD_NAND_I8
    4199088U,	// ATOMIC_LOAD_NAND_I8_P8
    4198992U,	// ATOMIC_LOAD_OR_I16
    4198992U,	// ATOMIC_LOAD_OR_I16_P8
    4198632U,	// ATOMIC_LOAD_OR_I32
    4198632U,	// ATOMIC_LOAD_OR_I32_P8
    4198836U,	// ATOMIC_LOAD_OR_I64
    4198836U,	// ATOMIC_LOAD_OR_I64_P8
    4199142U,	// ATOMIC_LOAD_OR_I8
    4199142U,	// ATOMIC_LOAD_OR_I8_P8
    4198875U,	// ATOMIC_LOAD_SUB_I16
    4198875U,	// ATOMIC_LOAD_SUB_I16_P8
    4198515U,	// ATOMIC_LOAD_SUB_I32
    4198515U,	// ATOMIC_LOAD_SUB_I32_P8
    4198719U,	// ATOMIC_LOAD_SUB_I64
    4198719U,	// ATOMIC_LOAD_SUB_I64_P8
    4199031U,	// ATOMIC_LOAD_SUB_I8
    4199031U,	// ATOMIC_LOAD_SUB_I8_P8
    4199011U,	// ATOMIC_LOAD_XOR_I16
    4199011U,	// ATOMIC_LOAD_XOR_I16_P8
    4198651U,	// ATOMIC_LOAD_XOR_I32
    4198651U,	// ATOMIC_LOAD_XOR_I32_P8
    4198855U,	// ATOMIC_LOAD_XOR_I64
    4198855U,	// ATOMIC_LOAD_XOR_I64_P8
    4199160U,	// ATOMIC_LOAD_XOR_I8
    4199160U,	// ATOMIC_LOAD_XOR_I8_P8
    4198956U,	// ATOMIC_SWAP_I16
    4198956U,	// ATOMIC_SWAP_I16_P8
    4198596U,	// ATOMIC_SWAP_I32
    4198596U,	// ATOMIC_SWAP_I32_P8
    4198800U,	// ATOMIC_SWAP_I64
    4198800U,	// ATOMIC_SWAP_I64_P8
    4199108U,	// ATOMIC_SWAP_I8
    4199108U,	// ATOMIC_SWAP_I8_P8
    7023U,	// AddiuRxImmX16
    72559U,	// AddiuRxPcImmX16
    531311U,	// AddiuRxRxImmX16
    1055599U,	// AddiuRxRyOffMemX16
    4201308U,	// AdduRxRyRz16
    529842U,	// AndRxRxRy16
    37717U,	// B
    4200787U,	// BALIGN
    39061U,	// BAL_BR
    38377U,	// BC1F
    39723U,	// BC1T
    4200867U,	// BEQ
    4200867U,	// BEQ64
    7448U,	// BGEZ
    7448U,	// BGEZ64
    6303U,	// BGEZAL
    7492U,	// BGTZ
    7492U,	// BGTZ64
    7063U,	// BITREV
    7454U,	// BLEZ
    7454U,	// BLEZ64
    7498U,	// BLTZ
    7498U,	// BLTZ64
    6311U,	// BLTZAL
    4199884U,	// BNE
    4199884U,	// BNE64
    37143U,	// BPOSGE32
    0U,	// BPOSGE32_PSEUDO
    7479U,	// BeqzRxImmX16
    37717U,	// BimmX16
    7460U,	// BnezRxImmX16
    8395146U,	// BteqzT8CmpX16
    8394857U,	// BteqzT8CmpiX16
    8395569U,	// BteqzT8SltX16
    8394869U,	// BteqzT8SltiX16
    8395638U,	// BteqzT8SltiuX16
    8395645U,	// BteqzT8SltuX16
    11581U,	// BteqzX16
    12589450U,	// BtnezT8CmpX16
    12589161U,	// BtnezT8CmpiX16
    12589873U,	// BtnezT8SltX16
    12589173U,	// BtnezT8SltiX16
    12589942U,	// BtnezT8SltiuX16
    12589949U,	// BtnezT8SltuX16
    11562U,	// BtnezX16
    0U,	// BuildPairF64
    5375U,	// CEIL_L_D64
    6813U,	// CEIL_L_S
    5488U,	// CEIL_W_D32
    5488U,	// CEIL_W_D64
    6917U,	// CEIL_W_S
    4131U,	// CFC1
    6498U,	// CLO
    7474U,	// CLZ
    4199364U,	// CMPGDU_EQ_QB
    4199269U,	// CMPGDU_LE_QB
    4199483U,	// CMPGDU_LT_QB
    4199378U,	// CMPGU_EQ_QB
    4199283U,	// CMPGU_LE_QB
    4199497U,	// CMPGU_LT_QB
    5087U,	// CMPU_EQ_QB
    4992U,	// CMPU_LE_QB
    5206U,	// CMPU_LT_QB
    5825U,	// CMP_EQ_PH
    5721U,	// CMP_LE_PH
    5994U,	// CMP_LT_PH
    38353U,	// CPRESTORE
    110640U,	// CTC1
    6758U,	// CVT_D32_S
    7123U,	// CVT_D32_W
    6275U,	// CVT_D64_L
    6758U,	// CVT_D64_S
    7123U,	// CVT_D64_W
    5396U,	// CVT_L_D64
    6834U,	// CVT_L_S
    5420U,	// CVT_S_D32
    5420U,	// CVT_S_D64
    6284U,	// CVT_S_L
    7311U,	// CVT_S_W
    5509U,	// CVT_W_D32
    5509U,	// CVT_W_D64
    6938U,	// CVT_W_S
    4199835U,	// DADD
    4200524U,	// DADDi
    4201326U,	// DADDiu
    4201307U,	// DADDu
    71309395U,	// DANDi
    6497U,	// DCLO
    7473U,	// DCLZ
    339746275U,	// DEXT
    339746262U,	// DEXTM
    339746288U,	// DEXTU
    339746269U,	// DINS
    339746255U,	// DINSM
    339746281U,	// DINSU
    71307273U,	// DMFC0_3OP64
    4137U,	// DMFC1
    71307569U,	// DMFC2_3OP64
    16400U,	// DMTC0_3OP64
    110646U,	// DMTC1
    16696U,	// DMTC2_3OP64
    6966U,	// DMULT
    7043U,	// DMULTu
    4200377U,	// DPAQX_SA_W_PH
    0U,	// DPAQX_SA_W_PH_PSEUDO
    4200460U,	// DPAQX_S_W_PH
    0U,	// DPAQX_S_W_PH_PSEUDO
    4201517U,	// DPAQ_SA_L_W
    0U,	// DPAQ_SA_L_W_PSEUDO
    4200419U,	// DPAQ_S_W_PH
    0U,	// DPAQ_S_W_PH_PSEUDO
    4200623U,	// DPAU_H_QBL
    0U,	// DPAU_H_QBL_PSEUDO
    4200872U,	// DPAU_H_QBR
    0U,	// DPAU_H_QBR_PSEUDO
    4200498U,	// DPAX_W_PH
    0U,	// DPAX_W_PH_PSEUDO
    4200367U,	// DPA_W_PH
    0U,	// DPA_W_PH_PSEUDO
    4200392U,	// DPSQX_SA_W_PH
    0U,	// DPSQX_SA_W_PH_PSEUDO
    4200474U,	// DPSQX_S_W_PH
    0U,	// DPSQX_S_W_PH_PSEUDO
    4201530U,	// DPSQ_SA_L_W
    0U,	// DPSQ_SA_L_W_PSEUDO
    4200447U,	// DPSQ_S_W_PH
    0U,	// DPSQ_S_W_PH_PSEUDO
    4200635U,	// DPSU_H_QBL
    0U,	// DPSU_H_QBL_PSEUDO
    4200884U,	// DPSU_H_QBR
    0U,	// DPSU_H_QBR_PSEUDO
    4200509U,	// DPSX_W_PH
    0U,	// DPSX_W_PH_PSEUDO
    4200488U,	// DPS_W_PH
    0U,	// DPS_W_PH_PSEUDO
    4201029U,	// DROTR
    138943429U,	// DROTRV
    5647U,	// DSBH
    7576U,	// DSDIV
    5543U,	// DSHD
    4200760U,	// DSLL
    4198689U,	// DSLL32
    16783672U,	// DSLL64_32
    138943391U,	// DSLLV
    4199245U,	// DSRA
    4198671U,	// DSRA32
    138943376U,	// DSRAV
    4200766U,	// DSRL
    4198697U,	// DSRL32
    138943398U,	// DSRLV
    4201293U,	// DSUBu
    7562U,	// DUDIV
    7577U,	// DivRxRy16
    7563U,	// DivuRxRy16
    1055599U,	// DynAlloc
    1055598U,	// DynAlloc64
    339746276U,	// EXT
    71309725U,	// EXTP
    71309690U,	// EXTPDP
    4201397U,	// EXTPDPV
    4201406U,	// EXTPV
    4201707U,	// EXTRV_RS_W
    4201596U,	// EXTRV_R_W
    4199940U,	// EXTRV_S_H
    4201719U,	// EXTRV_W
    71310560U,	// EXTR_RS_W
    71310439U,	// EXTR_R_W
    71308794U,	// EXTR_S_H
    71310471U,	// EXTR_W
    0U,	// ExtractElementF64
    5429U,	// FABS_D32
    5429U,	// FABS_D64
    6858U,	// FABS_S
    4199635U,	// FADD_D32
    4199635U,	// FADD_D64
    4201073U,	// FADD_S
    155127U,	// FCMP_D32
    155127U,	// FCMP_D64
    187895U,	// FCMP_S32
    4199756U,	// FDIV_D32
    4199756U,	// FDIV_D64
    4201185U,	// FDIV_S
    5385U,	// FLOOR_L_D64
    6823U,	// FLOOR_L_S
    5498U,	// FLOOR_W_D32
    5498U,	// FLOOR_W_D64
    6927U,	// FLOOR_W_S
    5459U,	// FMOV_D32
    5459U,	// FMOV_D64
    6888U,	// FMOV_S
    4199709U,	// FMUL_D32
    4199709U,	// FMUL_D64
    4201147U,	// FMUL_S
    5346U,	// FNEG_D32
    5346U,	// FNEG_D64
    6784U,	// FNEG_S
    5436U,	// FSQRT_D32
    5436U,	// FSQRT_D64
    6865U,	// FSQRT_S
    4199626U,	// FSUB_D32
    4199626U,	// FSUB_D64
    4201055U,	// FSUB_S
    339746270U,	// INS
    531405U,	// INSV
    39040U,	// J
    39066U,	// JAL
    39477U,	// JALR
    39477U,	// JALR64
    39473U,	// JR
    39473U,	// JR64
    3646U,	// JrRa16
    3637U,	// JrcRa16
    40278U,	// JrcRx16
    36865U,	// JumpLinkReg16
    1577816U,	// LB
    1577816U,	// LB64
    1577816U,	// LB64_P8
    21503245U,	// LBUX
    1577816U,	// LB_P8
    1579848U,	// LBu
    1579848U,	// LBu64
    1579848U,	// LBu64_P8
    1579848U,	// LBu_P8
    1578414U,	// LD
    1576983U,	// LDC1
    1576983U,	// LDC164
    1576983U,	// LDC164_P8
    1579254U,	// LDL
    1579254U,	// LDL_P8
    1579503U,	// LDR
    1579503U,	// LDR_P8
    21499977U,	// LDXC1
    21499977U,	// LDXC164
    21499977U,	// LDXC164_P8
    1578414U,	// LD_P8
    1055599U,	// LEA_ADDiu
    1055598U,	// LEA_ADDiu64
    1578528U,	// LH
    1578528U,	// LH64
    1578528U,	// LH64_P8
    21503240U,	// LHX
    1578528U,	// LH_P8
    1579881U,	// LHu
    1579881U,	// LHu64
    1579881U,	// LHu64_P8
    1579881U,	// LHu_P8
    1579322U,	// LL
    1578413U,	// LLD
    1578413U,	// LLD_P8
    1579322U,	// LL_P8
    21499991U,	// LUXC1
    21499991U,	// LUXC164
    2103419U,	// LUi
    2103419U,	// LUi64
    1580288U,	// LW
    1580288U,	// LW64
    1580288U,	// LW64_P8
    1577021U,	// LWC1
    1577021U,	// LWC1_P8
    1579337U,	// LWL
    1579337U,	// LWL64
    1579337U,	// LWL64_P8
    1579337U,	// LWL_P8
    1579603U,	// LWR
    1579603U,	// LWR64
    1579603U,	// LWR64_P8
    1579603U,	// LWR_P8
    21503251U,	// LWX
    21500005U,	// LWXC1
    21500005U,	// LWXC1_P8
    1580288U,	// LW_P8
    1579915U,	// LWu64
    1579915U,	// LWu64_P8
    1577816U,	// LbRxRyOffMemX16
    1579848U,	// LbuRxRyOffMemX16
    1578528U,	// LhRxRyOffMemX16
    1579881U,	// LhuRxRyOffMemX16
    6245U,	// LiRxImmX16
    4887U,	// LoadAddr32Imm
    1577751U,	// LoadAddr32Reg
    6245U,	// LoadImm32Reg
    1580288U,	// LwRxRyOffMemX16
    25697536U,	// LwRxSpImmX16
    5537U,	// MADD
    7010U,	// MADDU
    4201314U,	// MADDU_DSP
    0U,	// MADDU_DSP_PSEUDO
    272635090U,	// MADD_D32
    272635090U,	// MADD_D64
    4199841U,	// MADD_DSP
    0U,	// MADD_DSP_PSEUDO
    272636528U,	// MADD_S
    4200704U,	// MAQ_SA_W_PHL
    0U,	// MAQ_SA_W_PHL_PSEUDO
    4200953U,	// MAQ_SA_W_PHR
    0U,	// MAQ_SA_W_PHR_PSEUDO
    4200732U,	// MAQ_S_W_PHL
    0U,	// MAQ_S_W_PHL_PSEUDO
    4200981U,	// MAQ_S_W_PHR
    0U,	// MAQ_S_W_PHR_PSEUDO
    71307274U,	// MFC0_3OP
    71307274U,	// MFC0_3OP64
    4138U,	// MFC1
    71307570U,	// MFC2_3OP
    71307570U,	// MFC2_3OP64
    39001U,	// MFHI
    39001U,	// MFHI64
    39271U,	// MFLO
    39271U,	// MFLO64
    4199596U,	// MODSUB
    3608U,	// MOVCCRToCCR
    29365466U,	// MOVF_D32
    29365466U,	// MOVF_D64
    29365743U,	// MOVF_I
    29365743U,	// MOVF_I64
    29366904U,	// MOVF_S
    4199716U,	// MOVN_I64_D64
    4200795U,	// MOVN_I64_I
    4200795U,	// MOVN_I64_I64
    4201154U,	// MOVN_I64_S
    4199716U,	// MOVN_I_D32
    4199716U,	// MOVN_I_D64
    4200795U,	// MOVN_I_I
    4200795U,	// MOVN_I_I64
    4201154U,	// MOVN_I_S
    29365572U,	// MOVT_D32
    29365572U,	// MOVT_D64
    29367106U,	// MOVT_I
    29367106U,	// MOVT_I64
    29367001U,	// MOVT_S
    4199822U,	// MOVZ_I64_D64
    4201808U,	// MOVZ_I64_I
    4201808U,	// MOVZ_I64_I64
    4201251U,	// MOVZ_I64_S
    4199822U,	// MOVZ_I_D32
    4199822U,	// MOVZ_I_D64
    4201808U,	// MOVZ_I_I
    4201808U,	// MOVZ_I_I64
    4201251U,	// MOVZ_I_S
    5300U,	// MSUB
    6996U,	// MSUBU
    4201300U,	// MSUBU_DSP
    0U,	// MSUBU_DSP_PSEUDO
    272635081U,	// MSUB_D32
    272635081U,	// MSUB_D64
    4199604U,	// MSUB_DSP
    0U,	// MSUB_DSP_PSEUDO
    272636510U,	// MSUB_S
    16401U,	// MTC0_3OP
    16401U,	// MTC0_3OP64
    110647U,	// MTC1
    16697U,	// MTC2_3OP
    16697U,	// MTC2_3OP64
    39007U,	// MTHI
    39007U,	// MTHI64
    113026U,	// MTHLIP
    0U,	// MTHLIP_PSEUDO
    39284U,	// MTLO
    39284U,	// MTLO64
    4200772U,	// MUL
    4200745U,	// MULEQ_S_W_PHL
    4200994U,	// MULEQ_S_W_PHR
    4200647U,	// MULEU_S_PH_QBL
    4200896U,	// MULEU_S_PH_QBR
    4200286U,	// MULQ_RS_PH
    4201685U,	// MULQ_RS_W
    4200230U,	// MULQ_S_PH
    4201654U,	// MULQ_S_W
    4200432U,	// MULSAQ_S_W_PH
    0U,	// MULSAQ_S_W_PH_PSEUDO
    4200407U,	// MULSA_W_PH
    0U,	// MULSA_W_PH_PSEUDO
    6967U,	// MULT
    4201348U,	// MULTU_DSP
    0U,	// MULTU_DSP_PSEUDO
    4201271U,	// MULT_DSP
    0U,	// MULT_DSP_PSEUDO
    7044U,	// MULTu
    4200103U,	// MUL_PH
    4200198U,	// MUL_S_PH
    39001U,	// Mfhi16
    39271U,	// Mflo16
    5603U,	// Move32R16
    5603U,	// MoveR3216
    6967U,	// MultRxRy16
    2833207U,	// MultRxRyRz16
    7044U,	// MultuRxRy16
    2833284U,	// MultuRxRyRz16
    272635089U,	// NMADD_D32
    272635089U,	// NMADD_D64
    272636527U,	// NMADD_S
    272635080U,	// NMSUB_D32
    272635080U,	// NMSUB_D64
    272636509U,	// NMSUB_S
    3654U,	// NOP
    4201019U,	// NOR
    4201019U,	// NOR64
    5621U,	// NegRxRy16
    6973U,	// NotRxRy16
    4201020U,	// OR
    4201020U,	// OR64
    71309424U,	// ORi
    71309424U,	// ORi64
    531004U,	// OrRxRxRy16
    4200092U,	// PACKRL_PH
    4200056U,	// PICK_PH
    4199328U,	// PICK_QB
    6374U,	// PRECEQU_PH_QBL
    4891U,	// PRECEQU_PH_QBLA
    6623U,	// PRECEQU_PH_QBR
    4924U,	// PRECEQU_PH_QBRA
    6414U,	// PRECEQ_W_PHL
    6663U,	// PRECEQ_W_PHR
    6359U,	// PRECEU_PH_QBL
    4875U,	// PRECEU_PH_QBLA
    6608U,	// PRECEU_PH_QBR
    4908U,	// PRECEU_PH_QBRA
    4200008U,	// PRECRQU_S_QB_PH
    4201452U,	// PRECRQ_PH_W
    4199981U,	// PRECRQ_QB_PH
    4201483U,	// PRECRQ_RS_PH_W
    4199995U,	// PRECR_QB_PH
    4201436U,	// PRECR_SRA_PH_W
    4201465U,	// PRECR_SRA_R_PH_W
    4199863U,	// PREPEND
    5276U,	// RADDU_W_QB
    2103695U,	// RDDSP
    6732U,	// RDHWR
    6732U,	// RDHWR64
    6043U,	// REPLV_PH
    5256U,	// REPLV_QB
    2102922U,	// REPL_PH
    2102194U,	// REPL_QB
    39473U,	// RET
    4201030U,	// ROTR
    138943430U,	// ROTRV
    5364U,	// ROUND_L_D64
    6802U,	// ROUND_L_S
    5477U,	// ROUND_W_D32
    5477U,	// ROUND_W_D64
    6906U,	// ROUND_W_S
    9684U,	// RestoreIncSpF16
    11612U,	// RestoreRaF16
    0U,	// RetRA
    0U,	// RetRA16
    1578152U,	// SB
    1578152U,	// SB64
    1578152U,	// SB64_P8
    1578152U,	// SB_P8
    242877U,	// SC
    243094U,	// SCD
    243094U,	// SCD_P8
    242877U,	// SC_P8
    1578440U,	// SD
    1576989U,	// SDC1
    1576989U,	// SDC164
    1576989U,	// SDC164_P8
    7577U,	// SDIV
    1579259U,	// SDL
    1579259U,	// SDL_P8
    1579508U,	// SDR
    1579508U,	// SDR_P8
    21499984U,	// SDXC1
    21499984U,	// SDXC164
    21499984U,	// SDXC164_P8
    1578440U,	// SD_P8
    4947U,	// SEB
    4947U,	// SEB64
    5659U,	// SEH
    5659U,	// SEH64
    1579080U,	// SH
    1579080U,	// SH64
    1579080U,	// SH64_P8
    6509U,	// SHILO
    7085U,	// SHILOV
    0U,	// SHILOV_PSEUDO
    0U,	// SHILO_PSEUDO
    4200337U,	// SHLLV_PH
    4199550U,	// SHLLV_QB
    4200274U,	// SHLLV_S_PH
    4201674U,	// SHLLV_S_W
    71308929U,	// SHLL_PH
    71308201U,	// SHLL_QB
    71309051U,	// SHLL_S_PH
    71310488U,	// SHLL_S_W
    4200327U,	// SHRAV_PH
    4199540U,	// SHRAV_QB
    4200175U,	// SHRAV_R_PH
    4199438U,	// SHRAV_R_QB
    4201585U,	// SHRAV_R_W
    71308836U,	// SHRA_PH
    71308124U,	// SHRA_QB
    71309004U,	// SHRA_R_PH
    71308267U,	// SHRA_R_QB
    71310407U,	// SHRA_R_W
    4200357U,	// SHRLV_PH
    4199570U,	// SHRLV_QB
    71308947U,	// SHRL_PH
    71308219U,	// SHRL_QB
    1579080U,	// SH_P8
    4200761U,	// SLL
    33560889U,	// SLL64_32
    33560889U,	// SLL64_64
    138943392U,	// SLLV
    4201265U,	// SLT
    4201265U,	// SLT64
    4200565U,	// SLTi
    4200565U,	// SLTi64
    4201334U,	// SLTiu
    4201334U,	// SLTiu64
    4201341U,	// SLTu
    4201341U,	// SLTu64
    4199246U,	// SRA
    138943377U,	// SRAV
    4200767U,	// SRL
    138943399U,	// SRLV
    4199599U,	// SUB
    4200036U,	// SUBQH_PH
    4200151U,	// SUBQH_R_PH
    4201553U,	// SUBQH_R_W
    4201499U,	// SUBQH_W
    4200111U,	// SUBQ_PH
    4200208U,	// SUBQ_S_PH
    4201634U,	// SUBQ_S_W
    4199308U,	// SUBUH_QB
    4199414U,	// SUBUH_R_QB
    4200309U,	// SUBU_PH
    4199522U,	// SUBU_QB
    4200252U,	// SUBU_S_PH
    4199461U,	// SUBU_S_QB
    4201294U,	// SUBu
    21499998U,	// SUXC1
    21499998U,	// SUXC164
    1580292U,	// SW
    1580292U,	// SW64
    1580292U,	// SW64_P8
    1577027U,	// SWC1
    1577027U,	// SWC1_P8
    1579342U,	// SWL
    1579342U,	// SWL64
    1579342U,	// SWL64_P8
    1579342U,	// SWL_P8
    1579608U,	// SWR
    1579608U,	// SWR64
    1579608U,	// SWR64_P8
    1579608U,	// SWR_P8
    21500012U,	// SWXC1
    21500012U,	// SWXC1_P8
    1580292U,	// SW_P8
    40393U,	// SYNC
    9693U,	// SaveDecSpF16
    11637U,	// SaveRaF16
    1578152U,	// SbRxRyOffMemX16
    290103U,	// SelBeqZ
    290084U,	// SelBneZ
    40921482U,	// SelTBteqZCmp
    40921193U,	// SelTBteqZCmpi
    40921905U,	// SelTBteqZSlt
    40921205U,	// SelTBteqZSlti
    40921974U,	// SelTBteqZSltiu
    40921981U,	// SelTBteqZSltu
    45115786U,	// SelTBtneZCmp
    45115497U,	// SelTBtneZCmpi
    45116209U,	// SelTBtneZSlt
    45115509U,	// SelTBtneZSlti
    45116278U,	// SelTBtneZSltiu
    45116285U,	// SelTBtneZSltu
    1579080U,	// ShRxRyOffMemX16
    4200761U,	// SllX16
    531360U,	// SllvRxRy16
    3881777U,	// SltCCRxRy16
    6961U,	// SltRxRy16
    3881077U,	// SltiCCRxImmX16
    3881846U,	// SltiuCCRxImmX16
    3881853U,	// SltuCCRxRy16
    3881853U,	// SltuRxRyRz16
    4199246U,	// SraX16
    531345U,	// SravRxRy16
    4200767U,	// SrlX16
    531367U,	// SrlvRxRy16
    4201294U,	// SubuRxRyRz16
    1580292U,	// SwRxRyOffMemX16
    25697540U,	// SwRxSpImmX16
    39040U,	// TAILCALL
    39473U,	// TAILCALL64_R
    39473U,	// TAILCALL_R
    5353U,	// TRUNC_L_D64
    6791U,	// TRUNC_L_S
    5466U,	// TRUNC_W_D32
    5466U,	// TRUNC_W_D64
    6895U,	// TRUNC_W_S
    7563U,	// UDIV
    2103702U,	// WRDSP
    5653U,	// WSBH
    4201024U,	// XOR
    4201024U,	// XOR64
    71309423U,	// XORi
    71309423U,	// XORi64
    531008U,	// XorRxRxRy16
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 'j', 'a', 'l', 'r', 'c', 32, 9, 0,
  /* 8 */ 'd', 'm', 'f', 'c', '0', 9, 0,
  /* 15 */ 'd', 'm', 't', 'c', '0', 9, 0,
  /* 22 */ 'l', 'd', 'c', '1', 9, 0,
  /* 28 */ 's', 'd', 'c', '1', 9, 0,
  /* 34 */ 'c', 'f', 'c', '1', 9, 0,
  /* 40 */ 'd', 'm', 'f', 'c', '1', 9, 0,
  /* 47 */ 'c', 't', 'c', '1', 9, 0,
  /* 53 */ 'd', 'm', 't', 'c', '1', 9, 0,
  /* 60 */ 'l', 'w', 'c', '1', 9, 0,
  /* 66 */ 's', 'w', 'c', '1', 9, 0,
  /* 72 */ 'l', 'd', 'x', 'c', '1', 9, 0,
  /* 79 */ 's', 'd', 'x', 'c', '1', 9, 0,
  /* 86 */ 'l', 'u', 'x', 'c', '1', 9, 0,
  /* 93 */ 's', 'u', 'x', 'c', '1', 9, 0,
  /* 100 */ 'l', 'w', 'x', 'c', '1', 9, 0,
  /* 107 */ 's', 'w', 'x', 'c', '1', 9, 0,
  /* 114 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 's', 'u', 'b', '_', '3', '2', 9, 0,
  /* 134 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'a', 'd', 'd', '_', '3', '2', 9, 0,
  /* 154 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'a', 'n', 'd', '_', '3', '2', 9, 0,
  /* 174 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'n', 'a', 'n', 'd', '_', '3', '2', 9, 0,
  /* 195 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 's', 'w', 'a', 'p', '_', '3', '2', 9, 0,
  /* 211 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'c', 'm', 'p', '_', 's', 'w', 'a', 'p', '_', '3', '2', 9, 0,
  /* 231 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'o', 'r', '_', '3', '2', 9, 0,
  /* 250 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'x', 'o', 'r', '_', '3', '2', 9, 0,
  /* 270 */ 'd', 's', 'r', 'a', '3', '2', 9, 0,
  /* 278 */ 'b', 'p', 'o', 's', 'g', 'e', '3', '2', 9, 0,
  /* 288 */ 'd', 's', 'l', 'l', '3', '2', 9, 0,
  /* 296 */ 'd', 's', 'r', 'l', '3', '2', 9, 0,
  /* 304 */ 'd', 'm', 'f', 'c', '2', 9, 0,
  /* 311 */ 'd', 'm', 't', 'c', '2', 9, 0,
  /* 318 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 's', 'u', 'b', '_', '6', '4', 9, 0,
  /* 338 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'a', 'd', 'd', '_', '6', '4', 9, 0,
  /* 358 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'a', 'n', 'd', '_', '6', '4', 9, 0,
  /* 378 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'n', 'a', 'n', 'd', '_', '6', '4', 9, 0,
  /* 399 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 's', 'w', 'a', 'p', '_', '6', '4', 9, 0,
  /* 415 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'c', 'm', 'p', '_', 's', 'w', 'a', 'p', '_', '6', '4', 9, 0,
  /* 435 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'o', 'r', '_', '6', '4', 9, 0,
  /* 454 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'x', 'o', 'r', '_', '6', '4', 9, 0,
  /* 474 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 's', 'u', 'b', '_', '1', '6', 9, 0,
  /* 494 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'a', 'd', 'd', '_', '1', '6', 9, 0,
  /* 514 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'a', 'n', 'd', '_', '1', '6', 9, 0,
  /* 534 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'n', 'a', 'n', 'd', '_', '1', '6', 9, 0,
  /* 555 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 's', 'w', 'a', 'p', '_', '1', '6', 9, 0,
  /* 571 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'c', 'm', 'p', '_', 's', 'w', 'a', 'p', '_', '1', '6', 9, 0,
  /* 591 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'o', 'r', '_', '1', '6', 9, 0,
  /* 610 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'x', 'o', 'r', '_', '1', '6', 9, 0,
  /* 630 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 's', 'u', 'b', '_', '8', 9, 0,
  /* 649 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'a', 'd', 'd', '_', '8', 9, 0,
  /* 668 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'a', 'n', 'd', '_', '8', 9, 0,
  /* 687 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'n', 'a', 'n', 'd', '_', '8', 9, 0,
  /* 707 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 's', 'w', 'a', 'p', '_', '8', 9, 0,
  /* 722 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'c', 'm', 'p', '_', 's', 'w', 'a', 'p', '_', '8', 9, 0,
  /* 741 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'o', 'r', '_', '8', 9, 0,
  /* 759 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'x', 'o', 'r', '_', '8', 9, 0,
  /* 778 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 794 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 811 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 827 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 844 */ 'd', 's', 'r', 'a', 9, 0,
  /* 850 */ 's', 'e', 'b', 9, 0,
  /* 855 */ 'l', 'b', 9, 0,
  /* 859 */ 's', 'h', 'r', 'a', '.', 'q', 'b', 9, 0,
  /* 868 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 882 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 895 */ 'c', 'm', 'p', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 907 */ 's', 'u', 'b', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 917 */ 'a', 'd', 'd', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 927 */ 'p', 'i', 'c', 'k', '.', 'q', 'b', 9, 0,
  /* 936 */ 's', 'h', 'l', 'l', '.', 'q', 'b', 9, 0,
  /* 945 */ 'r', 'e', 'p', 'l', '.', 'q', 'b', 9, 0,
  /* 954 */ 's', 'h', 'r', 'l', '.', 'q', 'b', 9, 0,
  /* 963 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 977 */ 'c', 'm', 'p', 'g', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 990 */ 'c', 'm', 'p', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1002 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1013 */ 's', 'u', 'b', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1025 */ 'a', 'd', 'd', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1037 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1049 */ 'a', 'b', 's', 'q', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1060 */ 's', 'u', 'b', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1071 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1082 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1096 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1109 */ 'c', 'm', 'p', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1121 */ 's', 'u', 'b', 'u', '.', 'q', 'b', 9, 0,
  /* 1130 */ 'a', 'd', 'd', 'u', '.', 'q', 'b', 9, 0,
  /* 1139 */ 's', 'h', 'r', 'a', 'v', '.', 'q', 'b', 9, 0,
  /* 1149 */ 's', 'h', 'l', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1159 */ 'r', 'e', 'p', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1169 */ 's', 'h', 'r', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1179 */ 'r', 'a', 'd', 'd', 'u', '.', 'w', '.', 'q', 'b', 9, 0,
  /* 1191 */ 's', 'b', 9, 0,
  /* 1195 */ 'm', 'o', 'd', 's', 'u', 'b', 9, 0,
  /* 1203 */ 'm', 's', 'u', 'b', 9, 0,
  /* 1209 */ 'a', 'd', 'd', 's', 'c', 9, 0,
  /* 1216 */ 'a', 'd', 'd', 'w', 'c', 9, 0,
  /* 1223 */ 'n', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 1232 */ 'n', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 1241 */ 'm', 'o', 'v', 'f', '.', 'd', 9, 0,
  /* 1249 */ 'n', 'e', 'g', '.', 'd', 9, 0,
  /* 1256 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 'd', 9, 0,
  /* 1267 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 'd', 9, 0,
  /* 1278 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 'd', 9, 0,
  /* 1288 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 'd', 9, 0,
  /* 1299 */ 'c', 'v', 't', '.', 'l', '.', 'd', 9, 0,
  /* 1308 */ 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 1315 */ 'm', 'o', 'v', 'n', '.', 'd', 9, 0,
  /* 1323 */ 'c', 'v', 't', '.', 's', '.', 'd', 9, 0,
  /* 1332 */ 'a', 'b', 's', '.', 'd', 9, 0,
  /* 1339 */ 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 1347 */ 'm', 'o', 'v', 't', '.', 'd', 9, 0,
  /* 1355 */ 'd', 'i', 'v', '.', 'd', 9, 0,
  /* 1362 */ 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 1369 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 'd', 9, 0,
  /* 1380 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 'd', 9, 0,
  /* 1391 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 'd', 9, 0,
  /* 1401 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 'd', 9, 0,
  /* 1412 */ 'c', 'v', 't', '.', 'w', '.', 'd', 9, 0,
  /* 1421 */ 'm', 'o', 'v', 'z', '.', 'd', 9, 0,
  /* 1429 */ 's', 'c', 'd', 9, 0,
  /* 1434 */ 'd', 'a', 'd', 'd', 9, 0,
  /* 1440 */ 'm', 'a', 'd', 'd', 9, 0,
  /* 1446 */ 'd', 's', 'h', 'd', 9, 0,
  /* 1452 */ 'l', 'l', 'd', 9, 0,
  /* 1457 */ 'a', 'n', 'd', 9, 0,
  /* 1462 */ 'p', 'r', 'e', 'p', 'e', 'n', 'd', 9, 0,
  /* 1471 */ 'a', 'p', 'p', 'e', 'n', 'd', 9, 0,
  /* 1479 */ 's', 'd', 9, 0,
  /* 1483 */ 'b', 'n', 'e', 9, 0,
  /* 1488 */ '.', 'c', 'p', 'r', 'e', 's', 't', 'o', 'r', 'e', 9, 0,
  /* 1500 */ 's', 'a', 'v', 'e', 9, 0,
  /* 1506 */ 'm', 'o', 'v', 'e', 9, 0,
  /* 1512 */ 'b', 'c', '1', 'f', 9, 0,
  /* 1518 */ 'm', 'o', 'v', 'f', 9, 0,
  /* 1524 */ 'n', 'e', 'g', 9, 0,
  /* 1529 */ 'e', 'x', 't', 'r', '_', 's', '.', 'h', 9, 0,
  /* 1539 */ 'e', 'x', 't', 'r', 'v', '_', 's', '.', 'h', 9, 0,
  /* 1550 */ 'd', 's', 'b', 'h', 9, 0,
  /* 1556 */ 'w', 's', 'b', 'h', 9, 0,
  /* 1562 */ 's', 'e', 'h', 9, 0,
  /* 1567 */ 'l', 'h', 9, 0,
  /* 1571 */ 's', 'h', 'r', 'a', '.', 'p', 'h', 9, 0,
  /* 1580 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 1594 */ 'p', 'r', 'e', 'c', 'r', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 1607 */ 'p', 'r', 'e', 'c', 'r', 'q', 'u', '_', 's', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 1624 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'p', 'h', 9, 0,
  /* 1635 */ 's', 'u', 'b', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 1645 */ 'a', 'd', 'd', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 1655 */ 'p', 'i', 'c', 'k', '.', 'p', 'h', 9, 0,
  /* 1664 */ 's', 'h', 'l', 'l', '.', 'p', 'h', 9, 0,
  /* 1673 */ 'r', 'e', 'p', 'l', '.', 'p', 'h', 9, 0,
  /* 1682 */ 's', 'h', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 1691 */ 'p', 'a', 'c', 'k', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 1702 */ 'm', 'u', 'l', '.', 'p', 'h', 9, 0,
  /* 1710 */ 's', 'u', 'b', 'q', '.', 'p', 'h', 9, 0,
  /* 1719 */ 'a', 'd', 'd', 'q', '.', 'p', 'h', 9, 0,
  /* 1728 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'p', 'h', 9, 0,
  /* 1739 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 1750 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 1762 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 1774 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 1786 */ 's', 'h', 'l', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1797 */ 'm', 'u', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1807 */ 's', 'u', 'b', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1818 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1829 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1840 */ 'a', 'b', 's', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1851 */ 's', 'u', 'b', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1862 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1873 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1885 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'p', 'h', 9, 0,
  /* 1897 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'p', 'h', 9, 0,
  /* 1908 */ 's', 'u', 'b', 'u', '.', 'p', 'h', 9, 0,
  /* 1917 */ 'a', 'd', 'd', 'u', '.', 'p', 'h', 9, 0,
  /* 1926 */ 's', 'h', 'r', 'a', 'v', '.', 'p', 'h', 9, 0,
  /* 1936 */ 's', 'h', 'l', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 1946 */ 'r', 'e', 'p', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 1956 */ 's', 'h', 'r', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 1966 */ 'd', 'p', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1976 */ 'd', 'p', 'a', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1991 */ 'd', 'p', 's', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 2006 */ 'm', 'u', 'l', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 2018 */ 'd', 'p', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 2031 */ 'm', 'u', 'l', 's', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 2046 */ 'd', 'p', 's', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 2059 */ 'd', 'p', 'a', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 2073 */ 'd', 'p', 's', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 2087 */ 'd', 'p', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 2097 */ 'd', 'p', 'a', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 2108 */ 'd', 'p', 's', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 2119 */ 's', 'h', 9, 0,
  /* 2123 */ 'd', 'a', 'd', 'd', 'i', 9, 0,
  /* 2130 */ 'a', 'n', 'd', 'i', 9, 0,
  /* 2136 */ 'm', 'f', 'h', 'i', 9, 0,
  /* 2142 */ 'm', 't', 'h', 'i', 9, 0,
  /* 2148 */ 'l', 'i', 9, 0,
  /* 2152 */ 'c', 'm', 'p', 'i', 9, 0,
  /* 2158 */ 'x', 'o', 'r', 'i', 9, 0,
  /* 2164 */ 's', 'l', 't', 'i', 9, 0,
  /* 2170 */ 'l', 'u', 'i', 9, 0,
  /* 2175 */ 'j', 9, 0,
  /* 2178 */ 'c', 'v', 't', '.', 'd', '.', 'l', 9, 0,
  /* 2187 */ 'c', 'v', 't', '.', 's', '.', 'l', 9, 0,
  /* 2196 */ 'b', 'a', 'l', 9, 0,
  /* 2201 */ 'j', 'a', 'l', 9, 0,
  /* 2206 */ 'b', 'g', 'e', 'z', 'a', 'l', 9, 0,
  /* 2214 */ 'b', 'l', 't', 'z', 'a', 'l', 9, 0,
  /* 2222 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 2234 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 2246 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 2262 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 2277 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 2293 */ 'l', 'd', 'l', 9, 0,
  /* 2298 */ 's', 'd', 'l', 9, 0,
  /* 2303 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 2317 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 2331 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 2344 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 2359 */ 'd', 's', 'l', 'l', 9, 0,
  /* 2365 */ 'd', 's', 'r', 'l', 9, 0,
  /* 2371 */ 'm', 'u', 'l', 9, 0,
  /* 2376 */ 'l', 'w', 'l', 9, 0,
  /* 2381 */ 's', 'w', 'l', 9, 0,
  /* 2386 */ 'b', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 2394 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 2400 */ 'd', 'c', 'l', 'o', 9, 0,
  /* 2406 */ 'm', 'f', 'l', 'o', 9, 0,
  /* 2412 */ 's', 'h', 'i', 'l', 'o', 9, 0,
  /* 2419 */ 'm', 't', 'l', 'o', 9, 0,
  /* 2425 */ 'e', 'x', 't', 'p', 'd', 'p', 9, 0,
  /* 2433 */ 'm', 't', 'h', 'l', 'i', 'p', 9, 0,
  /* 2441 */ 'c', 'm', 'p', 9, 0,
  /* 2446 */ 'r', 'd', 'd', 's', 'p', 9, 0,
  /* 2453 */ 'w', 'r', 'd', 's', 'p', 9, 0,
  /* 2460 */ 'e', 'x', 't', 'p', 9, 0,
  /* 2466 */ 'b', 'e', 'q', 9, 0,
  /* 2471 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 2483 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 2495 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 2511 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 2526 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 2542 */ 'l', 'd', 'r', 9, 0,
  /* 2547 */ 's', 'd', 'r', 9, 0,
  /* 2552 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 2566 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 2580 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 2593 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 2608 */ 'j', 'r', 9, 0,
  /* 2612 */ 'j', 'a', 'l', 'r', 9, 0,
  /* 2618 */ 'n', 'o', 'r', 9, 0,
  /* 2623 */ 'x', 'o', 'r', 9, 0,
  /* 2628 */ 'd', 'r', 'o', 't', 'r', 9, 0,
  /* 2635 */ 'r', 'd', 'h', 'w', 'r', 9, 0,
  /* 2642 */ 'l', 'w', 'r', 9, 0,
  /* 2647 */ 's', 'w', 'r', 9, 0,
  /* 2652 */ 'n', 'm', 's', 'u', 'b', '.', 's', 9, 0,
  /* 2661 */ 'c', 'v', 't', '.', 'd', '.', 's', 9, 0,
  /* 2670 */ 'n', 'm', 'a', 'd', 'd', '.', 's', 9, 0,
  /* 2679 */ 'm', 'o', 'v', 'f', '.', 's', 9, 0,
  /* 2687 */ 'n', 'e', 'g', '.', 's', 9, 0,
  /* 2694 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 's', 9, 0,
  /* 2705 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 's', 9, 0,
  /* 2716 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 's', 9, 0,
  /* 2726 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 's', 9, 0,
  /* 2737 */ 'c', 'v', 't', '.', 'l', '.', 's', 9, 0,
  /* 2746 */ 'm', 'u', 'l', '.', 's', 9, 0,
  /* 2753 */ 'm', 'o', 'v', 'n', '.', 's', 9, 0,
  /* 2761 */ 'a', 'b', 's', '.', 's', 9, 0,
  /* 2768 */ 's', 'q', 'r', 't', '.', 's', 9, 0,
  /* 2776 */ 'm', 'o', 'v', 't', '.', 's', 9, 0,
  /* 2784 */ 'd', 'i', 'v', '.', 's', 9, 0,
  /* 2791 */ 'm', 'o', 'v', '.', 's', 9, 0,
  /* 2798 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 's', 9, 0,
  /* 2809 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 's', 9, 0,
  /* 2820 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 's', 9, 0,
  /* 2830 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 's', 9, 0,
  /* 2841 */ 'c', 'v', 't', '.', 'w', '.', 's', 9, 0,
  /* 2850 */ 'm', 'o', 'v', 'z', '.', 's', 9, 0,
  /* 2858 */ 'b', 'c', '1', 't', 9, 0,
  /* 2864 */ 's', 'l', 't', 9, 0,
  /* 2869 */ 'd', 'm', 'u', 'l', 't', 9, 0,
  /* 2876 */ 'n', 'o', 't', 9, 0,
  /* 2881 */ 'm', 'o', 'v', 't', 9, 0,
  /* 2887 */ 'l', 'b', 'u', 9, 0,
  /* 2892 */ 'd', 's', 'u', 'b', 'u', 9, 0,
  /* 2899 */ 'm', 's', 'u', 'b', 'u', 9, 0,
  /* 2906 */ 'd', 'a', 'd', 'd', 'u', 9, 0,
  /* 2913 */ 'm', 'a', 'd', 'd', 'u', 9, 0,
  /* 2920 */ 'l', 'h', 'u', 9, 0,
  /* 2925 */ 'd', 'a', 'd', 'd', 'i', 'u', 9, 0,
  /* 2933 */ 's', 'l', 't', 'i', 'u', 9, 0,
  /* 2940 */ 's', 'l', 't', 'u', 9, 0,
  /* 2946 */ 'd', 'm', 'u', 'l', 't', 'u', 9, 0,
  /* 2954 */ 'l', 'w', 'u', 9, 0,
  /* 2959 */ 'd', 's', 'r', 'a', 'v', 9, 0,
  /* 2966 */ 'b', 'i', 't', 'r', 'e', 'v', 9, 0,
  /* 2974 */ 'd', 's', 'l', 'l', 'v', 9, 0,
  /* 2981 */ 'd', 's', 'r', 'l', 'v', 9, 0,
  /* 2988 */ 's', 'h', 'i', 'l', 'o', 'v', 9, 0,
  /* 2996 */ 'e', 'x', 't', 'p', 'd', 'p', 'v', 9, 0,
  /* 3005 */ 'e', 'x', 't', 'p', 'v', 9, 0,
  /* 3012 */ 'd', 'r', 'o', 't', 'r', 'v', 9, 0,
  /* 3020 */ 'i', 'n', 's', 'v', 9, 0,
  /* 3026 */ 'c', 'v', 't', '.', 'd', '.', 'w', 9, 0,
  /* 3035 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 3051 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 3064 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '_', 'r', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 3082 */ 'p', 'r', 'e', 'c', 'r', 'q', '_', 'r', 's', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 3098 */ 's', 'u', 'b', 'q', 'h', '.', 'w', 9, 0,
  /* 3107 */ 'a', 'd', 'd', 'q', 'h', '.', 'w', 9, 0,
  /* 3116 */ 'd', 'p', 'a', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 3129 */ 'd', 'p', 's', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 3142 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'w', 9, 0,
  /* 3152 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 3163 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 3174 */ 'e', 'x', 't', 'r', '_', 'r', '.', 'w', 9, 0,
  /* 3184 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 3195 */ 'e', 'x', 't', 'r', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 3206 */ 'e', 'x', 't', 'r', '.', 'w', 9, 0,
  /* 3214 */ 'c', 'v', 't', '.', 's', '.', 'w', 9, 0,
  /* 3223 */ 's', 'h', 'l', 'l', '_', 's', '.', 'w', 9, 0,
  /* 3233 */ 's', 'u', 'b', 'q', '_', 's', '.', 'w', 9, 0,
  /* 3243 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'w', 9, 0,
  /* 3253 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'w', 9, 0,
  /* 3263 */ 'a', 'b', 's', 'q', '_', 's', '.', 'w', 9, 0,
  /* 3273 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'w', 9, 0,
  /* 3284 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'w', 9, 0,
  /* 3295 */ 'e', 'x', 't', 'r', '_', 'r', 's', '.', 'w', 9, 0,
  /* 3306 */ 'e', 'x', 't', 'r', 'v', '_', 'r', 's', '.', 'w', 9, 0,
  /* 3318 */ 'e', 'x', 't', 'r', 'v', '.', 'w', 9, 0,
  /* 3327 */ 'l', 'w', 9, 0,
  /* 3331 */ 's', 'w', 9, 0,
  /* 3335 */ 'l', 'h', 'x', 9, 0,
  /* 3340 */ 'l', 'b', 'u', 'x', 9, 0,
  /* 3346 */ 'l', 'w', 'x', 9, 0,
  /* 3351 */ 'b', 'g', 'e', 'z', 9, 0,
  /* 3357 */ 'b', 'l', 'e', 'z', 9, 0,
  /* 3363 */ 'b', 'n', 'e', 'z', 9, 0,
  /* 3369 */ 'b', 't', 'n', 'e', 'z', 9, 0,
  /* 3376 */ 'd', 'c', 'l', 'z', 9, 0,
  /* 3382 */ 'b', 'e', 'q', 'z', 9, 0,
  /* 3388 */ 'b', 't', 'e', 'q', 'z', 9, 0,
  /* 3395 */ 'b', 'g', 't', 'z', 9, 0,
  /* 3401 */ 'b', 'l', 't', 'z', 9, 0,
  /* 3407 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 3413 */ 'j', 'r', 'c', 9, 32, 0,
  /* 3419 */ 'r', 'e', 's', 't', 'o', 'r', 'e', 9, '$', 'r', 'a', ',', 32, 32, '$', 's', '0', ',', 32, '$', 's', '1', ',', 32, 0,
  /* 3444 */ 's', 'a', 'v', 'e', 9, '$', 'r', 'a', ',', 32, '$', 's', '0', ',', 32, '$', 's', '1', ',', 32, 0,
  /* 3465 */ 'd', 'd', 'i', 'v', 'u', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 3479 */ 'd', 'd', 'i', 'v', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 3492 */ '!', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 32, 0,
  /* 3511 */ '!', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 32, 0,
  /* 3528 */ 's', 'y', 'n', 'c', 32, 0,
  /* 3534 */ 'd', 'i', 'n', 's', 'm', 32, 0,
  /* 3541 */ 'd', 'e', 'x', 't', 'm', 32, 0,
  /* 3548 */ 'd', 'i', 'n', 's', 32, 0,
  /* 3554 */ 'd', 'e', 'x', 't', 32, 0,
  /* 3560 */ 'd', 'i', 'n', 's', 'u', 32, 0,
  /* 3567 */ 'd', 'e', 'x', 't', 'u', 32, 0,
  /* 3574 */ 'c', '.', 0,
  /* 3577 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 3590 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 3597 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 3607 */ '#', 32, 'M', 'O', 'V', 'C', 'C', 'R', 'T', 'o', 'C', 'C', 'R', 0,
  /* 3621 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 3636 */ 'j', 'r', 'c', 9, 32, '$', 'r', 'a', 0,
  /* 3645 */ 'j', 'r', 9, 32, '$', 'r', 'a', 0,
  /* 3653 */ 'n', 'o', 'p', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint32_t Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 12) & 7) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, JrRa16, JrcRa16, MOVC...
    return;
    break;
  case 1:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // BteqzX16, BtnezX16, RestoreIncSpF16, RestoreRaF16, SaveDecSpF16, SaveR...
    printUnsignedImm(MI, 0, O); 
    return;
    break;
  case 3:
    // CTC1, DMTC1, MTC1, MTHLIP, MultRxRyRz16, MultuRxRyRz16, SC, SCD, SCD_P...
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 4:
    // DMTC0_3OP64, DMTC2_3OP64, MTC0_3OP, MTC0_3OP64, MTC2_3OP, MTC2_3OP64
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printUnsignedImm(MI, 1, O); 
    return;
    break;
  case 5:
    // FCMP_D32, FCMP_D64, FCMP_S32
    printFCCOperand(MI, 2, O); 
    break;
  case 6:
    // SelBeqZ, SelBneZ, SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZ...
    printOperand(MI, 3, O); 
    break;
  }


  // Fragment 1 encoded into 4 bits for 9 unique commands.
  switch ((Bits >> 15) & 15) {
  default:   // unreachable.
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ...
    O << ", "; 
    break;
  case 1:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP, B, BAL_BR, BC1F, BC1T, BPOSGE32, Bim...
    return;
    break;
  case 2:
    // AddiuRxPcImmX16
    O << ", $pc, "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 3:
    // CTC1, DMTC1, MTC1, MTHLIP
    printOperand(MI, 0, O); 
    return;
    break;
  case 4:
    // FCMP_D32, FCMP_D64
    O << ".d\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 5:
    // FCMP_S32
    O << ".s\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 6:
    // MultRxRyRz16, MultuRxRyRz16, SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImm...
    printOperand(MI, 2, O); 
    break;
  case 7:
    // SC, SCD, SCD_P8, SC_P8
    printMemOperand(MI, 2, O); 
    return;
    break;
  case 8:
    // SelBeqZ, SelBneZ
    O << ", .+4\n\t\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 19) & 7) {
  default:   // unreachable.
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // AddiuRxRxImmX16, AndRxRxRy16, DROTRV, DSLLV, DSRAV, DSRLV, INSV, LBUX,...
    printOperand(MI, 2, O); 
    break;
  case 2:
    // AddiuRxRyOffMemX16, DynAlloc, DynAlloc64, LEA_ADDiu, LEA_ADDiu64
    printMemOperandEA(MI, 1, O); 
    return;
    break;
  case 3:
    // LB, LB64, LB64_P8, LB_P8, LBu, LBu64, LBu64_P8, LBu_P8, LD, LDC1, LDC1...
    printMemOperand(MI, 1, O); 
    return;
    break;
  case 4:
    // LUi, LUi64, RDDSP, REPL_PH, REPL_QB, WRDSP
    printUnsignedImm(MI, 1, O); 
    return;
    break;
  case 5:
    // MultRxRyRz16, MultuRxRyRz16
    O << "\n\tmflo\t"; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 6:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    printOperand(MI, 4, O); 
    break;
  case 7:
    // SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImmX16, SltuCCRxRy16, SltuRxRyRz...
    O << "\n\tmove\t"; 
    printOperand(MI, 0, O); 
    O << ", $t8"; 
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 22) & 15) {
  default:   // unreachable.
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, AddiuRxImmX16, AddiuRxRxImmX16, AndRxR...
    return;
    break;
  case 1:
    // ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, ADDQ_S_PH, ADD...
    O << ", "; 
    break;
  case 2:
    // BteqzT8CmpX16, BteqzT8CmpiX16, BteqzT8SltX16, BteqzT8SltiX16, BteqzT8S...
    O << "\n\tbteqz\t"; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 3:
    // BtnezT8CmpX16, BtnezT8CmpiX16, BtnezT8SltX16, BtnezT8SltiX16, BtnezT8S...
    O << "\n\tbtnez\t"; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // DSLL64_32
    O << ", 32"; 
    return;
    break;
  case 5:
    // LBUX, LDXC1, LDXC164, LDXC164_P8, LHX, LUXC1, LUXC164, LWX, LWXC1, LWX...
    O << '('; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 6:
    // LwRxSpImmX16, SwRxSpImmX16
    O << " ( "; 
    printOperand(MI, 1, O); 
    O << " ); "; 
    return;
    break;
  case 7:
    // MOVF_D32, MOVF_D64, MOVF_I, MOVF_I64, MOVF_S, MOVT_D32, MOVT_D64, MOVT...
    O << ", $fcc0"; 
    return;
    break;
  case 8:
    // SLL64_32, SLL64_64
    O << ", 0"; 
    return;
    break;
  case 9:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    O << "\n\tbteqz\t.+4\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 10:
    // SelTBtneZCmp, SelTBtneZCmpi, SelTBtneZSlt, SelTBtneZSlti, SelTBtneZSlt...
    O << "\n\tbtnez\t.+4\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 26) & 3) {
  default:   // unreachable.
  case 0:
    // ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, ADDQ_S_PH, ADD...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ANDi, DANDi, DEXT, DEXTM, DEXTU, DINS, DINSM, DINSU, DMFC0_3OP64, DMFC...
    printUnsignedImm(MI, 2, O); 
    break;
  case 2:
    // DROTRV, DSLLV, DSRAV, DSRLV, ROTRV, SLLV, SRAV, SRLV
    printOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 28) & 1) {
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I16_P8, ATOMIC_CMP_SWAP_I32, ATOM...
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
  } else {
    // ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, ADDQ_S_PH, ADD...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *MipsInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 159 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'f', '1', '0', 0,
  /* 4 */ 'f', '2', '0', 0,
  /* 8 */ 'f', '3', '0', 0,
  /* 12 */ 'a', 'c', '0', 0,
  /* 16 */ 'f', 'c', 'c', '0', 0,
  /* 21 */ 'f', '0', 0,
  /* 24 */ 'f', '1', '1', 0,
  /* 28 */ 'f', '2', '1', 0,
  /* 32 */ 'f', '3', '1', 0,
  /* 36 */ 'a', 'c', '1', 0,
  /* 40 */ 'f', '1', 0,
  /* 43 */ 'f', '1', '2', 0,
  /* 47 */ 'f', '2', '2', 0,
  /* 51 */ 'a', 'c', '2', 0,
  /* 55 */ 'f', '2', 0,
  /* 58 */ 'f', '1', '3', 0,
  /* 62 */ 'f', '2', '3', 0,
  /* 66 */ 'a', 'c', '3', 0,
  /* 70 */ 'f', '3', 0,
  /* 73 */ 'f', '1', '4', 0,
  /* 77 */ 'f', '2', '4', 0,
  /* 81 */ 'f', '4', 0,
  /* 84 */ 'f', '1', '5', 0,
  /* 88 */ 'f', '2', '5', 0,
  /* 92 */ 'f', '5', 0,
  /* 95 */ 'f', '1', '6', 0,
  /* 99 */ 'f', '2', '6', 0,
  /* 103 */ 'f', '6', 0,
  /* 106 */ 'f', '1', '7', 0,
  /* 110 */ 'f', '2', '7', 0,
  /* 114 */ 'f', '7', 0,
  /* 117 */ 'f', '1', '8', 0,
  /* 121 */ 'f', '2', '8', 0,
  /* 125 */ 'f', '8', 0,
  /* 128 */ 'f', '1', '9', 0,
  /* 132 */ 'f', '2', '9', 0,
  /* 136 */ 'f', '9', 0,
  /* 139 */ 'r', 'a', 0,
  /* 142 */ 'p', 'c', 0,
  /* 145 */ 'h', 'i', 0,
  /* 148 */ 'd', 's', 'p', 'c', 't', 'r', 'l', 0,
  /* 156 */ 'l', 'o', 0,
  /* 159 */ 'z', 'e', 'r', 'o', 0,
  /* 164 */ 'f', 'p', 0,
  /* 167 */ 'g', 'p', 0,
  /* 170 */ 's', 'p', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    75, 75, 86, 86, 97, 97, 108, 108, 12, 36, 51, 66, 26, 26, 
    21, 21, 55, 40, 81, 55, 103, 70, 125, 81, 0, 92, 43, 103, 
    73, 114, 95, 125, 117, 136, 4, 0, 47, 24, 77, 43, 99, 58, 
    121, 73, 8, 84, 95, 106, 117, 128, 4, 28, 47, 62, 77, 88, 
    99, 110, 121, 132, 8, 32, 148, 21, 40, 55, 70, 81, 92, 103, 
    114, 125, 136, 0, 24, 43, 58, 73, 84, 95, 106, 117, 128, 4, 
    28, 47, 62, 77, 88, 99, 110, 121, 132, 8, 32, 16, 33, 164, 
    164, 167, 167, 145, 145, 133, 133, 100, 100, 111, 111, 156, 156, 142, 
    139, 139, 96, 96, 107, 107, 118, 118, 129, 129, 5, 5, 29, 29, 
    48, 48, 63, 63, 170, 170, 119, 119, 130, 130, 1, 1, 25, 25, 
    44, 44, 59, 59, 74, 74, 85, 85, 78, 78, 89, 89, 45, 45, 
    60, 60, 159, 159, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static unsigned getMapOperandNumber(const SmallVectorImpl<std::pair<StringRef, unsigned> > &OpMap,
                                    StringRef Name) {
  for (SmallVectorImpl<std::pair<StringRef, unsigned> >::const_iterator
         I = OpMap.begin(), E = OpMap.end(); I != E; ++I)
    if (I->first == Name)
      return I->second;
  llvm_unreachable("Operand not in map!");
}

bool MipsInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  StringRef AsmString;
  SmallVector<std::pair<StringRef, unsigned>, 4> OpMap;
  switch (MI->getOpcode()) {
  default: return false;
  case Mips::ADD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (ADD CPURegs:$dst, CPURegs:$src, ZERO)
      AsmString = "move $dst,$src";
      OpMap.push_back(std::make_pair("dst", 0));
      OpMap.push_back(std::make_pair("src", 1));
      break;
    }
    return false;
  case Mips::DADD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (DADD CPU64Regs:$dst, CPU64Regs:$src, ZERO_64)
      AsmString = "move $dst,$src";
      OpMap.push_back(std::make_pair("dst", 0));
      OpMap.push_back(std::make_pair("src", 1));
      break;
    }
    return false;
  case Mips::DMFC0_3OP64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getImm() == 0) {
      // (DMFC0_3OP64 CPU64Regs:$rt, CPU64Regs:$rd, 0)
      AsmString = "dmfc0 $rt, $rd";
      OpMap.push_back(std::make_pair("rd", 1));
      OpMap.push_back(std::make_pair("rt", 0));
      break;
    }
    return false;
  case Mips::DMFC2_3OP64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getImm() == 0) {
      // (DMFC2_3OP64 CPU64Regs:$rt, CPU64Regs:$rd, 0)
      AsmString = "dmfc2 $rt, $rd";
      OpMap.push_back(std::make_pair("rd", 1));
      OpMap.push_back(std::make_pair("rt", 0));
      break;
    }
    return false;
  case Mips::DMTC0_3OP64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (DMTC0_3OP64 CPU64Regs:$rd, 0, CPU64Regs:$rt)
      AsmString = "dmtc0 $rt, $rd";
      OpMap.push_back(std::make_pair("rd", 0));
      OpMap.push_back(std::make_pair("rt", 2));
      break;
    }
    return false;
  case Mips::DMTC2_3OP64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (DMTC2_3OP64 CPU64Regs:$rd, 0, CPU64Regs:$rt)
      AsmString = "dmtc2 $rt, $rd";
      OpMap.push_back(std::make_pair("rd", 0));
      OpMap.push_back(std::make_pair("rt", 2));
      break;
    }
    return false;
  case Mips::JR:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(0).getReg())) {
      // (JR CPURegs:$rs)
      AsmString = "j $rs";
      OpMap.push_back(std::make_pair("rs", 0));
      break;
    }
    return false;
  case Mips::MFC0_3OP:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getImm() == 0) {
      // (MFC0_3OP CPURegs:$rt, CPURegs:$rd, 0)
      AsmString = "mfc0 $rt, $rd";
      OpMap.push_back(std::make_pair("rd", 1));
      OpMap.push_back(std::make_pair("rt", 0));
      break;
    }
    return false;
  case Mips::MFC0_3OP64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getImm() == 0) {
      // (MFC0_3OP64 CPU64Regs:$rt, CPU64Regs:$rd, 0)
      AsmString = "mfc0 $rt, $rd";
      OpMap.push_back(std::make_pair("rd", 1));
      OpMap.push_back(std::make_pair("rt", 0));
      break;
    }
    return false;
  case Mips::MFC2_3OP:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getImm() == 0) {
      // (MFC2_3OP CPURegs:$rt, CPURegs:$rd, 0)
      AsmString = "mfc2 $rt, $rd";
      OpMap.push_back(std::make_pair("rd", 1));
      OpMap.push_back(std::make_pair("rt", 0));
      break;
    }
    return false;
  case Mips::MFC2_3OP64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getImm() == 0) {
      // (MFC2_3OP64 CPU64Regs:$rt, CPU64Regs:$rd, 0)
      AsmString = "mfc2 $rt, $rd";
      OpMap.push_back(std::make_pair("rd", 1));
      OpMap.push_back(std::make_pair("rt", 0));
      break;
    }
    return false;
  case Mips::MTC0_3OP:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (MTC0_3OP CPURegs:$rd, 0, CPURegs:$rt)
      AsmString = "mtc0 $rt, $rd";
      OpMap.push_back(std::make_pair("rd", 0));
      OpMap.push_back(std::make_pair("rt", 2));
      break;
    }
    return false;
  case Mips::MTC0_3OP64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (MTC0_3OP64 CPU64Regs:$rd, 0, CPU64Regs:$rt)
      AsmString = "mtc0 $rt, $rd";
      OpMap.push_back(std::make_pair("rd", 0));
      OpMap.push_back(std::make_pair("rt", 2));
      break;
    }
    return false;
  case Mips::MTC2_3OP:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (MTC2_3OP CPURegs:$rd, 0, CPURegs:$rt)
      AsmString = "mtc2 $rt, $rd";
      OpMap.push_back(std::make_pair("rd", 0));
      OpMap.push_back(std::make_pair("rt", 2));
      break;
    }
    return false;
  case Mips::MTC2_3OP64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (MTC2_3OP64 CPU64Regs:$rd, 0, CPU64Regs:$rt)
      AsmString = "mtc2 $rt, $rd";
      OpMap.push_back(std::make_pair("rd", 0));
      OpMap.push_back(std::make_pair("rt", 2));
      break;
    }
    return false;
  case Mips::NOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (NOR CPURegs:$rt, CPURegs:$rs, ZERO)
      AsmString = "not $rt,$rs";
      OpMap.push_back(std::make_pair("rs", 1));
      OpMap.push_back(std::make_pair("rt", 0));
      break;
    }
    return false;
  case Mips::SUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUB CPURegs:$rt, ZERO, CPURegs:$rs)
      AsmString = "neg $rt,$rs";
      OpMap.push_back(std::make_pair("rs", 2));
      OpMap.push_back(std::make_pair("rt", 0));
      break;
    }
    return false;
  case Mips::SUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBu CPURegs:$rt, ZERO, CPURegs:$rs)
      AsmString = "negu $rt,$rs";
      OpMap.push_back(std::make_pair("rs", 2));
      OpMap.push_back(std::make_pair("rt", 0));
      break;
    }
    return false;
  }

  std::pair<StringRef, StringRef> ASM = AsmString.split(' ');
  OS << '\t' << ASM.first;
  if (!ASM.second.empty()) {
    OS << '\t';
    for (StringRef::iterator
         I = ASM.second.begin(), E = ASM.second.end(); I != E; ) {
      if (*I == '$') {
        StringRef::iterator Start = ++I;
        while (I != E &&
               ((*I >= 'a' && *I <= 'z') ||
                (*I >= 'A' && *I <= 'Z') ||
                (*I >= '0' && *I <= '9') ||
                *I == '_'))
          ++I;
        StringRef Name(Start, I - Start);
        printOperand(MI, getMapOperandNumber(OpMap, Name), OS);
      } else {
        OS << *I++;
      }
    }
  }

  return true;
}

#endif // PRINT_ALIAS_INSTR
