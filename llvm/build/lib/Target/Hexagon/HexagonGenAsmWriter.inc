/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void HexagonInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    311U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    304U,	// BUNDLE
    321U,	// LIFETIME_START
    291U,	// LIFETIME_END
    518U,	// ADD64_rr
    4614U,	// ADDASL
    268435974U,	// ADD_ri
    270541851U,	// ADD_ri_cNotPt
    270541935U,	// ADD_ri_cPt
    270545947U,	// ADD_ri_cdnNotPt
    270546031U,	// ADD_ri_cdnPt
    518U,	// ADD_rr
    2106395U,	// ADD_rr_cNotPt
    2106479U,	// ADD_rr_cPt
    2110491U,	// ADD_rr_cdnNotPt
    2110575U,	// ADD_rr_cdnPt
    4211206U,	// ADDi_ASLri_V4
    6308358U,	// ADDi_LSRri_V4
    276840966U,	// ADDi_MPYri_V4
    8405510U,	// ADDi_MPYrr_V4
    536871430U,	// ADDr_ADDri_V4
    805306886U,	// ADDr_MPYir_V4
    1073742342U,	// ADDr_MPYri_V4
    1073742342U,	// ADDr_MPYrr_V4
    1342177798U,	// ADDr_SUBri_V4
    1342177798U,	// ADDri_SUBr_V4
    1621119494U,	// ADDri_acc
    1891652102U,	// ADDrr_acc
    336U,	// ADJCALLSTACKDOWN
    336U,	// ADJCALLSTACKUP
    268435974U,	// ADJDYNALLOC
    25172U,	// ALLOCFRAME
    29190U,	// ALL_pp
    14713350U,	// AND_pnotp
    2160099846U,	// AND_pp
    2426438150U,	// AND_ri
    2160099846U,	// AND_rr
    2160099846U,	// AND_rr64
    16786459U,	// AND_rr_cNotPt
    16786543U,	// AND_rr_cPt
    16790555U,	// AND_rr_cdnNotPt
    16790639U,	// AND_rr_cdnPt
    2166391302U,	// ANDd_NOTd_V4
    4231686U,	// ANDi_ASLri_V4
    6328838U,	// ANDi_LSRri_V4
    1897964038U,	// ANDr_ANDr_NOTr_V4
    1891672582U,	// ANDr_ANDrr_V4
    45574U,	// ANDr_ORrr_V4
    49670U,	// ANDr_XORrr_V4
    53766U,	// ANY_pp
    21029382U,	// ARGEXTEND
    2426466822U,	// ASL
    66054U,	// ASLH
    23077915U,	// ASLH_cNotPt_V4
    23077999U,	// ASLH_cPt_V4
    23082011U,	// ASLH_cdnNotPt_V4
    23082095U,	// ASLH_cdnPt_V4
    1621168646U,	// ASL_ADD_ri
    1891701254U,	// ASL_ADD_rr
    1621168646U,	// ASL_ADDd_ri
    1891701254U,	// ASL_ADDd_rr
    1621172742U,	// ASL_AND_ri
    1891705350U,	// ASL_AND_rr
    1621172742U,	// ASL_ANDd_ri
    1891705350U,	// ASL_ANDd_rr
    1621176838U,	// ASL_OR_ri
    1891709446U,	// ASL_OR_rr
    1621176838U,	// ASL_ORd_ri
    1891709446U,	// ASL_ORd_rr
    1621180934U,	// ASL_SUB_ri
    1891713542U,	// ASL_SUB_rr
    1621180934U,	// ASL_SUBd_ri
    1891713542U,	// ASL_SUBd_rr
    1621185030U,	// ASL_XOR_ri
    1621185030U,	// ASL_XORd_ri
    2160128518U,	// ASL_rr
    2160128518U,	// ASLd
    2426466822U,	// ASLd_ri
    1891717638U,	// ASLd_rr_xor_V4
    90630U,	// ASRH
    25175067U,	// ASRH_cNotPt_V4
    25175151U,	// ASRH_cPt_V4
    25179163U,	// ASRH_cdnNotPt_V4
    25179247U,	// ASRH_cdnPt_V4
    1621193222U,	// ASR_ADD_ri
    1891725830U,	// ASR_ADD_rr
    1621193222U,	// ASR_ADDd_ri
    1891725830U,	// ASR_ADDd_rr
    1621197318U,	// ASR_AND_ri
    1891729926U,	// ASR_AND_rr
    1621197318U,	// ASR_ANDd_ri
    1891729926U,	// ASR_ANDd_rr
    1621201414U,	// ASR_OR_ri
    1891734022U,	// ASR_OR_rr
    1621201414U,	// ASR_ORd_ri
    1891734022U,	// ASR_ORd_rr
    1621205510U,	// ASR_SUB_ri
    1891738118U,	// ASR_SUB_rr
    1621205510U,	// ASR_SUBd_ri
    1891738118U,	// ASR_SUBd_rr
    2426515974U,	// ASR_ri
    2160177670U,	// ASR_rr
    2426515974U,	// ASRd_ri
    2160177670U,	// ASRd_rr
    115206U,	// ASRd_rr_xor_V4
    392U,	// BARRIER
    119407U,	// BRCOND
    123412U,	// BR_JT
    123393U,	// CALL
    123405U,	// CALLR
    123405U,	// CALLRv3
    123393U,	// CALLv3
    2426532358U,	// CLRBIT
    2426532358U,	// CLRBIT_31
    2160198150U,	// CMPEHexagon4rr
    2426536454U,	// CMPEQri
    2160198150U,	// CMPEQrr
    135686U,	// CMPGEUri
    139782U,	// CMPGEri
    2160210438U,	// CMPGT64rr
    2160214534U,	// CMPGTU64rr
    2426552838U,	// CMPGTUri
    2160214534U,	// CMPGTUrr
    2426548742U,	// CMPGTri
    2160210438U,	// CMPGTrr
    152070U,	// CMPLTUrr
    156166U,	// CMPLTrr
    2426565126U,	// CMPbEQri_V4
    2160226822U,	// CMPbEQrr_sbsb_V4
    2160226822U,	// CMPbEQrr_ubub_V4
    2426569222U,	// CMPbGTUri_V4
    2160230918U,	// CMPbGTUrr_V4
    168454U,	// CMPbGTrr_V4
    2426577414U,	// CMPhEQri_V4
    2160239110U,	// CMPhEQrr_shl_V4
    2160239110U,	// CMPhEQrr_xor_V4
    2426581510U,	// CMPhGTUri_V4
    2160243206U,	// CMPhGTUrr_V4
    180742U,	// CMPhGTrr_shl_V4
    2426589702U,	// COMBINE_ii
    2160251398U,	// COMBINE_ir_V4
    2426593798U,	// COMBINE_ri_V4
    2160255494U,	// COMBINE_rr
    27272219U,	// COMBINE_rr_cNotPt
    27272303U,	// COMBINE_rr_cPt
    27276315U,	// COMBINE_rr_cdnNotPt
    27276399U,	// COMBINE_rr_cdnPt
    2713907718U,	// CONST32
    2713907718U,	// CONST32GP_set
    2684547590U,	// CONST32_Float_Real
    2684547590U,	// CONST32_Int_Real
    197126U,	// CONST32_Label
    2713907718U,	// CONST32_set
    31650310U,	// CONST32_set_jt
    201222U,	// CONST64_Float_Real
    201222U,	// CONST64_Int_Real
    205318U,	// CONVERT_d2df
    209414U,	// CONVERT_d2sf
    33767942U,	// CONVERT_df2d
    35865094U,	// CONVERT_df2d_nchop
    217606U,	// CONVERT_df2sf
    33776134U,	// CONVERT_df2ud
    35873286U,	// CONVERT_df2ud_nchop
    33780230U,	// CONVERT_df2uw
    35877382U,	// CONVERT_df2uw_nchop
    33784326U,	// CONVERT_df2w
    35881478U,	// CONVERT_df2w_nchop
    33788422U,	// CONVERT_sf2d
    35885574U,	// CONVERT_sf2d_nchop
    238086U,	// CONVERT_sf2df
    33796614U,	// CONVERT_sf2ud
    35893766U,	// CONVERT_sf2ud_nchop
    33800710U,	// CONVERT_sf2uw
    35897862U,	// CONVERT_sf2uw_nchop
    33804806U,	// CONVERT_sf2w
    35901958U,	// CONVERT_sf2w_nchop
    254470U,	// CONVERT_ud2df
    258566U,	// CONVERT_ud2sf
    262662U,	// CONVERT_uw2df
    266758U,	// CONVERT_uw2sf
    270854U,	// CONVERT_w2df
    274950U,	// CONVERT_w2sf
    360U,	// DEALLOCFRAME
    373U,	// DEALLOC_RET_V4
    279067U,	// DEALLOC_RET_cNotPt_V4
    283163U,	// DEALLOC_RET_cNotdnPnt_V4
    287259U,	// DEALLOC_RET_cNotdnPt_V4
    279151U,	// DEALLOC_RET_cPt_V4
    283247U,	// DEALLOC_RET_cdnPnt_V4
    287343U,	// DEALLOC_RET_cdnPt_V4
    271U,	// ENDLOOP0
    291334U,	// FCMPOEQ32_rr
    295430U,	// FCMPOEQ64_rr
    299526U,	// FCMPOGE32_rr
    303622U,	// FCMPOGE64_rr
    307718U,	// FCMPOGT32_rr
    311814U,	// FCMPOGT64_rr
    291334U,	// FCMPUEQ32_rr
    295430U,	// FCMPUEQ64_rr
    299526U,	// FCMPUGE32_rr
    303622U,	// FCMPUGE64_rr
    307718U,	// FCMPUGT32_rr
    311814U,	// FCMPUGT64_rr
    2713907718U,	// FCONST32_nsdata
    38064646U,	// FMADD_dp
    38068742U,	// FMADD_sp
    324102U,	// FMAX_dp
    328198U,	// FMAX_sp
    332294U,	// FMIN_dp
    336390U,	// FMIN_sp
    35992070U,	// HEXAGON_A2_abs
    35992070U,	// HEXAGON_A2_absp
    40186374U,	// HEXAGON_A2_abssat
    518U,	// HEXAGON_A2_add
    2952790534U,	// HEXAGON_A2_addh_h16_hh
    2952790534U,	// HEXAGON_A2_addh_h16_hl
    3221225990U,	// HEXAGON_A2_addh_h16_lh
    3221225990U,	// HEXAGON_A2_addh_h16_ll
    2952790534U,	// HEXAGON_A2_addh_h16_sat_hh
    2952790534U,	// HEXAGON_A2_addh_h16_sat_hl
    3221225990U,	// HEXAGON_A2_addh_h16_sat_lh
    3221225990U,	// HEXAGON_A2_addh_h16_sat_ll
    3221225990U,	// HEXAGON_A2_addh_l16_hl
    3221225990U,	// HEXAGON_A2_addh_l16_ll
    3221225990U,	// HEXAGON_A2_addh_l16_sat_hl
    3221225990U,	// HEXAGON_A2_addh_l16_sat_ll
    268435974U,	// HEXAGON_A2_addi
    518U,	// HEXAGON_A2_addp
    518U,	// HEXAGON_A2_addsat
    2160099846U,	// HEXAGON_A2_and
    2426438150U,	// HEXAGON_A2_andir
    2160099846U,	// HEXAGON_A2_andp
    66054U,	// HEXAGON_A2_aslh
    90630U,	// HEXAGON_A2_asrh
    2189615622U,	// HEXAGON_A2_combine_hh
    2189615622U,	// HEXAGON_A2_combine_hl
    2191712774U,	// HEXAGON_A2_combine_lh
    2191712774U,	// HEXAGON_A2_combine_ll
    2426589702U,	// HEXAGON_A2_combineii
    2160255494U,	// HEXAGON_A2_combinew
    344582U,	// HEXAGON_A2_max
    348678U,	// HEXAGON_A2_maxu
    352774U,	// HEXAGON_A2_min
    356870U,	// HEXAGON_A2_minu
    36012550U,	// HEXAGON_A2_neg
    36012550U,	// HEXAGON_A2_negp
    40206854U,	// HEXAGON_A2_negsat
    365062U,	// HEXAGON_A2_not
    365062U,	// HEXAGON_A2_notp
    2160435718U,	// HEXAGON_A2_or
    2426774022U,	// HEXAGON_A2_orir
    2160435718U,	// HEXAGON_A2_orp
    373254U,	// HEXAGON_A2_sat
    377350U,	// HEXAGON_A2_satb
    381446U,	// HEXAGON_A2_sath
    385542U,	// HEXAGON_A2_satub
    389638U,	// HEXAGON_A2_satuh
    2160460294U,	// HEXAGON_A2_sub
    2189820422U,	// HEXAGON_A2_subh_h16_hh
    2189820422U,	// HEXAGON_A2_subh_h16_hl
    2191917574U,	// HEXAGON_A2_subh_h16_lh
    2191917574U,	// HEXAGON_A2_subh_h16_ll
    2189820422U,	// HEXAGON_A2_subh_h16_sat_hh
    2189820422U,	// HEXAGON_A2_subh_h16_sat_hl
    2191917574U,	// HEXAGON_A2_subh_h16_sat_lh
    2191917574U,	// HEXAGON_A2_subh_h16_sat_ll
    2191917574U,	// HEXAGON_A2_subh_l16_hl
    2191917574U,	// HEXAGON_A2_subh_l16_ll
    2191917574U,	// HEXAGON_A2_subh_l16_sat_hl
    2191917574U,	// HEXAGON_A2_subh_l16_sat_ll
    2160460294U,	// HEXAGON_A2_subp
    2160464390U,	// HEXAGON_A2_subri
    2160460294U,	// HEXAGON_A2_subsat
    36053510U,	// HEXAGON_A2_svaddh
    40247814U,	// HEXAGON_A2_svaddhs
    406022U,	// HEXAGON_A2_svadduhs
    36061702U,	// HEXAGON_A2_svavgh
    46547462U,	// HEXAGON_A2_svavghs
    36065798U,	// HEXAGON_A2_svnavgh
    36069894U,	// HEXAGON_A2_svsubh
    40264198U,	// HEXAGON_A2_svsubhs
    422406U,	// HEXAGON_A2_svsubuhs
    426502U,	// HEXAGON_A2_swiz
    430598U,	// HEXAGON_A2_sxtb
    434694U,	// HEXAGON_A2_sxth
    438790U,	// HEXAGON_A2_sxtw
    21029382U,	// HEXAGON_A2_tfr
    442886U,	// HEXAGON_A2_tfrih
    446982U,	// HEXAGON_A2_tfril
    21029382U,	// HEXAGON_A2_tfrp
    451078U,	// HEXAGON_A2_tfrpi
    451078U,	// HEXAGON_A2_tfrsi
    36106758U,	// HEXAGON_A2_vabsh
    40301062U,	// HEXAGON_A2_vabshsat
    36110854U,	// HEXAGON_A2_vabsw
    40305158U,	// HEXAGON_A2_vabswsat
    36053510U,	// HEXAGON_A2_vaddh
    40247814U,	// HEXAGON_A2_vaddhs
    36114950U,	// HEXAGON_A2_vaddub
    40309254U,	// HEXAGON_A2_vaddubs
    406022U,	// HEXAGON_A2_vadduhs
    36119046U,	// HEXAGON_A2_vaddw
    40313350U,	// HEXAGON_A2_vaddws
    36061702U,	// HEXAGON_A2_vavgh
    48644614U,	// HEXAGON_A2_vavghcr
    46547462U,	// HEXAGON_A2_vavghr
    36123142U,	// HEXAGON_A2_vavgub
    46608902U,	// HEXAGON_A2_vavgubr
    36127238U,	// HEXAGON_A2_vavguh
    46612998U,	// HEXAGON_A2_vavguhr
    36131334U,	// HEXAGON_A2_vavguw
    46617094U,	// HEXAGON_A2_vavguwr
    36135430U,	// HEXAGON_A2_vavgw
    48718342U,	// HEXAGON_A2_vavgwcr
    46621190U,	// HEXAGON_A2_vavgwr
    487942U,	// HEXAGON_A2_vcmpbeq
    492038U,	// HEXAGON_A2_vcmpbgtu
    496134U,	// HEXAGON_A2_vcmpheq
    500230U,	// HEXAGON_A2_vcmphgt
    504326U,	// HEXAGON_A2_vcmphgtu
    508422U,	// HEXAGON_A2_vcmpweq
    512518U,	// HEXAGON_A2_vcmpwgt
    516614U,	// HEXAGON_A2_vcmpwgtu
    520710U,	// HEXAGON_A2_vconj
    524806U,	// HEXAGON_A2_vmaxh
    528902U,	// HEXAGON_A2_vmaxub
    532998U,	// HEXAGON_A2_vmaxuh
    537094U,	// HEXAGON_A2_vmaxuw
    541190U,	// HEXAGON_A2_vmaxw
    545286U,	// HEXAGON_A2_vminh
    549382U,	// HEXAGON_A2_vminub
    553478U,	// HEXAGON_A2_vminuh
    557574U,	// HEXAGON_A2_vminuw
    561670U,	// HEXAGON_A2_vminw
    36065798U,	// HEXAGON_A2_vnavgh
    50745862U,	// HEXAGON_A2_vnavghcr
    52843014U,	// HEXAGON_A2_vnavghr
    36217350U,	// HEXAGON_A2_vnavgw
    50897414U,	// HEXAGON_A2_vnavgwcr
    52994566U,	// HEXAGON_A2_vnavgwr
    569862U,	// HEXAGON_A2_vraddub
    573958U,	// HEXAGON_A2_vraddub_acc
    578054U,	// HEXAGON_A2_vrsadub
    582150U,	// HEXAGON_A2_vrsadub_acc
    36069894U,	// HEXAGON_A2_vsubh
    40264198U,	// HEXAGON_A2_vsubhs
    36237830U,	// HEXAGON_A2_vsubub
    40432134U,	// HEXAGON_A2_vsububs
    422406U,	// HEXAGON_A2_vsubuhs
    36241926U,	// HEXAGON_A2_vsubw
    40436230U,	// HEXAGON_A2_vsubws
    594438U,	// HEXAGON_A2_xor
    594438U,	// HEXAGON_A2_xorp
    598534U,	// HEXAGON_A2_zxtb
    602630U,	// HEXAGON_A2_zxth
    2427011590U,	// HEXAGON_A4_cround_ri
    2160673286U,	// HEXAGON_A4_cround_rr
    610822U,	// HEXAGON_A4_modwrapu
    2427019782U,	// HEXAGON_A4_round_ri
    2427019782U,	// HEXAGON_A4_round_ri_sat
    2160681478U,	// HEXAGON_A4_round_rr
    2160681478U,	// HEXAGON_A4_round_rr_sat
    619014U,	// HEXAGON_A5_vaddhubs
    29190U,	// HEXAGON_C2_all8
    2160099846U,	// HEXAGON_C2_and
    14713350U,	// HEXAGON_C2_andn
    53766U,	// HEXAGON_C2_any8
    2160198150U,	// HEXAGON_C2_cmpeq
    2426536454U,	// HEXAGON_C2_cmpeqi
    2160198150U,	// HEXAGON_C2_cmpeqp
    139782U,	// HEXAGON_C2_cmpgei
    135686U,	// HEXAGON_C2_cmpgeui
    2160210438U,	// HEXAGON_C2_cmpgt
    2426548742U,	// HEXAGON_C2_cmpgti
    2160210438U,	// HEXAGON_C2_cmpgtp
    2160214534U,	// HEXAGON_C2_cmpgtu
    2426552838U,	// HEXAGON_C2_cmpgtui
    2160214534U,	// HEXAGON_C2_cmpgtup
    156166U,	// HEXAGON_C2_cmplt
    152070U,	// HEXAGON_C2_cmpltu
    623110U,	// HEXAGON_C2_mask
    2160693766U,	// HEXAGON_C2_mux
    2427032070U,	// HEXAGON_C2_muxii
    2160693766U,	// HEXAGON_C2_muxir
    2427032070U,	// HEXAGON_C2_muxri
    365062U,	// HEXAGON_C2_not
    2160435718U,	// HEXAGON_C2_or
    15049222U,	// HEXAGON_C2_orn
    21029382U,	// HEXAGON_C2_pxfer_map
    21029382U,	// HEXAGON_C2_tfrpr
    21029382U,	// HEXAGON_C2_tfrrp
    631302U,	// HEXAGON_C2_vitpack
    635398U,	// HEXAGON_C2_vmux
    594438U,	// HEXAGON_C2_xor
    639494U,	// HEXAGON_C4_fastcorner9
    643590U,	// HEXAGON_C4_fastcorner9_not
    205318U,	// HEXAGON_F2_conv_d2df
    209414U,	// HEXAGON_F2_conv_d2sf
    35865094U,	// HEXAGON_F2_conv_df2d
    35865094U,	// HEXAGON_F2_conv_df2d_chop
    217606U,	// HEXAGON_F2_conv_df2sf
    35873286U,	// HEXAGON_F2_conv_df2ud
    35873286U,	// HEXAGON_F2_conv_df2ud_chop
    35877382U,	// HEXAGON_F2_conv_df2uw
    35877382U,	// HEXAGON_F2_conv_df2uw_chop
    35881478U,	// HEXAGON_F2_conv_df2w
    35881478U,	// HEXAGON_F2_conv_df2w_chop
    35885574U,	// HEXAGON_F2_conv_sf2d
    35885574U,	// HEXAGON_F2_conv_sf2d_chop
    238086U,	// HEXAGON_F2_conv_sf2df
    35893766U,	// HEXAGON_F2_conv_sf2ud
    35893766U,	// HEXAGON_F2_conv_sf2ud_chop
    35897862U,	// HEXAGON_F2_conv_sf2uw
    35897862U,	// HEXAGON_F2_conv_sf2uw_chop
    35901958U,	// HEXAGON_F2_conv_sf2w
    35901958U,	// HEXAGON_F2_conv_sf2w_chop
    254470U,	// HEXAGON_F2_conv_ud2df
    258566U,	// HEXAGON_F2_conv_ud2sf
    262662U,	// HEXAGON_F2_conv_uw2df
    266758U,	// HEXAGON_F2_conv_uw2sf
    270854U,	// HEXAGON_F2_conv_w2df
    274950U,	// HEXAGON_F2_conv_w2sf
    647686U,	// HEXAGON_F2_dfadd
    651782U,	// HEXAGON_F2_dfclass
    295430U,	// HEXAGON_F2_dfcmpeq
    303622U,	// HEXAGON_F2_dfcmpge
    311814U,	// HEXAGON_F2_dfcmpgt
    655878U,	// HEXAGON_F2_dfcmpuo
    659974U,	// HEXAGON_F2_dffixupd
    664070U,	// HEXAGON_F2_dffixupn
    668166U,	// HEXAGON_F2_dffixupr
    315910U,	// HEXAGON_F2_dffma
    315910U,	// HEXAGON_F2_dffma_lib
    38064646U,	// HEXAGON_F2_dffma_sc
    36323846U,	// HEXAGON_F2_dffms
    55198214U,	// HEXAGON_F2_dffms_lib
    57299462U,	// HEXAGON_F2_dfimm_n
    59396614U,	// HEXAGON_F2_dfimm_p
    324102U,	// HEXAGON_F2_dfmax
    332294U,	// HEXAGON_F2_dfmin
    680454U,	// HEXAGON_F2_dfmpy
    684550U,	// HEXAGON_F2_dfsub
    688646U,	// HEXAGON_F2_sfadd
    692742U,	// HEXAGON_F2_sfclass
    291334U,	// HEXAGON_F2_sfcmpeq
    299526U,	// HEXAGON_F2_sfcmpge
    307718U,	// HEXAGON_F2_sfcmpgt
    696838U,	// HEXAGON_F2_sfcmpuo
    700934U,	// HEXAGON_F2_sffixupd
    705030U,	// HEXAGON_F2_sffixupn
    709126U,	// HEXAGON_F2_sffixupr
    320006U,	// HEXAGON_F2_sffma
    320006U,	// HEXAGON_F2_sffma_lib
    38068742U,	// HEXAGON_F2_sffma_sc
    36364806U,	// HEXAGON_F2_sffms
    55239174U,	// HEXAGON_F2_sffms_lib
    57340422U,	// HEXAGON_F2_sfimm_n
    59437574U,	// HEXAGON_F2_sfimm_p
    328198U,	// HEXAGON_F2_sfmax
    336390U,	// HEXAGON_F2_sfmin
    721414U,	// HEXAGON_F2_sfmpy
    725510U,	// HEXAGON_F2_sfsub
    1891652102U,	// HEXAGON_M2_acci
    1621119494U,	// HEXAGON_M2_accii
    729606U,	// HEXAGON_M2_cmaci_s0
    733702U,	// HEXAGON_M2_cmacr_s0
    40583686U,	// HEXAGON_M2_cmacs_s0
    61555206U,	// HEXAGON_M2_cmacs_s1
    63652358U,	// HEXAGON_M2_cmacsc_s0
    65749510U,	// HEXAGON_M2_cmacsc_s1
    741894U,	// HEXAGON_M2_cmpyi_s0
    745990U,	// HEXAGON_M2_cmpyr_s0
    53178886U,	// HEXAGON_M2_cmpyrs_s0
    67858950U,	// HEXAGON_M2_cmpyrs_s1
    69956102U,	// HEXAGON_M2_cmpyrsc_s0
    72053254U,	// HEXAGON_M2_cmpyrsc_s1
    40595974U,	// HEXAGON_M2_cmpys_s0
    61567494U,	// HEXAGON_M2_cmpys_s1
    63664646U,	// HEXAGON_M2_cmpysc_s0
    65761798U,	// HEXAGON_M2_cmpysc_s1
    40600070U,	// HEXAGON_M2_cnacs_s0
    61571590U,	// HEXAGON_M2_cnacs_s1
    63668742U,	// HEXAGON_M2_cnacsc_s0
    65765894U,	// HEXAGON_M2_cnacsc_s1
    1892389382U,	// HEXAGON_M2_dpmpyss_acc_s0
    1892393478U,	// HEXAGON_M2_dpmpyss_nac_s0
    2160833030U,	// HEXAGON_M2_dpmpyss_rnd_s0
    2160833030U,	// HEXAGON_M2_dpmpyss_s0
    1892401670U,	// HEXAGON_M2_dpmpyuu_acc_s0
    1892405766U,	// HEXAGON_M2_dpmpyuu_nac_s0
    2160845318U,	// HEXAGON_M2_dpmpyuu_s0
    2160833030U,	// HEXAGON_M2_hmmpyh_rs1
    2160833030U,	// HEXAGON_M2_hmmpyl_rs1
    1892413958U,	// HEXAGON_M2_maci
    786950U,	// HEXAGON_M2_macsin
    1621881350U,	// HEXAGON_M2_macsip
    53219846U,	// HEXAGON_M2_mmachs_rs0
    67899910U,	// HEXAGON_M2_mmachs_rs1
    40636934U,	// HEXAGON_M2_mmachs_s0
    61608454U,	// HEXAGON_M2_mmachs_s1
    53223942U,	// HEXAGON_M2_mmacls_rs0
    67904006U,	// HEXAGON_M2_mmacls_rs1
    40641030U,	// HEXAGON_M2_mmacls_s0
    61612550U,	// HEXAGON_M2_mmacls_s1
    53228038U,	// HEXAGON_M2_mmacuhs_rs0
    67908102U,	// HEXAGON_M2_mmacuhs_rs1
    40645126U,	// HEXAGON_M2_mmacuhs_s0
    61616646U,	// HEXAGON_M2_mmacuhs_s1
    53232134U,	// HEXAGON_M2_mmaculs_rs0
    67912198U,	// HEXAGON_M2_mmaculs_rs1
    40649222U,	// HEXAGON_M2_mmaculs_s0
    61620742U,	// HEXAGON_M2_mmaculs_s1
    53236230U,	// HEXAGON_M2_mmpyh_rs0
    67916294U,	// HEXAGON_M2_mmpyh_rs1
    40653318U,	// HEXAGON_M2_mmpyh_s0
    61624838U,	// HEXAGON_M2_mmpyh_s1
    53240326U,	// HEXAGON_M2_mmpyl_rs0
    67920390U,	// HEXAGON_M2_mmpyl_rs1
    40657414U,	// HEXAGON_M2_mmpyl_s0
    61628934U,	// HEXAGON_M2_mmpyl_s1
    53244422U,	// HEXAGON_M2_mmpyuh_rs0
    67924486U,	// HEXAGON_M2_mmpyuh_rs1
    40661510U,	// HEXAGON_M2_mmpyuh_s0
    61633030U,	// HEXAGON_M2_mmpyuh_s1
    53248518U,	// HEXAGON_M2_mmpyul_rs0
    67928582U,	// HEXAGON_M2_mmpyul_rs1
    40665606U,	// HEXAGON_M2_mmpyul_s0
    61637126U,	// HEXAGON_M2_mmpyul_s1
    1921749510U,	// HEXAGON_M2_mpy_acc_hh_s0
    1921749510U,	// HEXAGON_M2_mpy_acc_hh_s1
    1921749510U,	// HEXAGON_M2_mpy_acc_hl_s0
    1921749510U,	// HEXAGON_M2_mpy_acc_hl_s1
    1923846662U,	// HEXAGON_M2_mpy_acc_lh_s0
    1923846662U,	// HEXAGON_M2_mpy_acc_lh_s1
    1923846662U,	// HEXAGON_M2_mpy_acc_ll_s0
    1923846662U,	// HEXAGON_M2_mpy_acc_ll_s1
    1921749510U,	// HEXAGON_M2_mpy_acc_sat_hh_s0
    1921749510U,	// HEXAGON_M2_mpy_acc_sat_hh_s1
    1921749510U,	// HEXAGON_M2_mpy_acc_sat_hl_s0
    1921749510U,	// HEXAGON_M2_mpy_acc_sat_hl_s1
    1923846662U,	// HEXAGON_M2_mpy_acc_sat_lh_s0
    1923846662U,	// HEXAGON_M2_mpy_acc_sat_lh_s1
    1923846662U,	// HEXAGON_M2_mpy_acc_sat_ll_s0
    1923846662U,	// HEXAGON_M2_mpy_acc_sat_ll_s1
    2190193158U,	// HEXAGON_M2_mpy_hh_s0
    2190193158U,	// HEXAGON_M2_mpy_hh_s1
    2190193158U,	// HEXAGON_M2_mpy_hl_s0
    2190193158U,	// HEXAGON_M2_mpy_hl_s1
    2192290310U,	// HEXAGON_M2_mpy_lh_s0
    2192290310U,	// HEXAGON_M2_mpy_lh_s1
    2192290310U,	// HEXAGON_M2_mpy_ll_s0
    2192290310U,	// HEXAGON_M2_mpy_ll_s1
    1921753606U,	// HEXAGON_M2_mpy_nac_hh_s0
    1921753606U,	// HEXAGON_M2_mpy_nac_hh_s1
    1921753606U,	// HEXAGON_M2_mpy_nac_hl_s0
    1921753606U,	// HEXAGON_M2_mpy_nac_hl_s1
    1923850758U,	// HEXAGON_M2_mpy_nac_lh_s0
    1923850758U,	// HEXAGON_M2_mpy_nac_lh_s1
    1923850758U,	// HEXAGON_M2_mpy_nac_ll_s0
    1923850758U,	// HEXAGON_M2_mpy_nac_ll_s1
    1921753606U,	// HEXAGON_M2_mpy_nac_sat_hh_s0
    1921753606U,	// HEXAGON_M2_mpy_nac_sat_hh_s1
    1921753606U,	// HEXAGON_M2_mpy_nac_sat_hl_s0
    1921753606U,	// HEXAGON_M2_mpy_nac_sat_hl_s1
    1923850758U,	// HEXAGON_M2_mpy_nac_sat_lh_s0
    1923850758U,	// HEXAGON_M2_mpy_nac_sat_lh_s1
    1923850758U,	// HEXAGON_M2_mpy_nac_sat_ll_s0
    1923850758U,	// HEXAGON_M2_mpy_nac_sat_ll_s1
    2190193158U,	// HEXAGON_M2_mpy_rnd_hh_s0
    2190193158U,	// HEXAGON_M2_mpy_rnd_hh_s1
    2190193158U,	// HEXAGON_M2_mpy_rnd_hl_s0
    2190193158U,	// HEXAGON_M2_mpy_rnd_hl_s1
    2192290310U,	// HEXAGON_M2_mpy_rnd_lh_s0
    2192290310U,	// HEXAGON_M2_mpy_rnd_lh_s1
    2192290310U,	// HEXAGON_M2_mpy_rnd_ll_s0
    2192290310U,	// HEXAGON_M2_mpy_rnd_ll_s1
    2190193158U,	// HEXAGON_M2_mpy_sat_hh_s0
    2190193158U,	// HEXAGON_M2_mpy_sat_hh_s1
    2190193158U,	// HEXAGON_M2_mpy_sat_hl_s0
    2190193158U,	// HEXAGON_M2_mpy_sat_hl_s1
    2192290310U,	// HEXAGON_M2_mpy_sat_lh_s0
    2192290310U,	// HEXAGON_M2_mpy_sat_lh_s1
    2192290310U,	// HEXAGON_M2_mpy_sat_ll_s0
    2192290310U,	// HEXAGON_M2_mpy_sat_ll_s1
    2190193158U,	// HEXAGON_M2_mpy_sat_rnd_hh_s0
    2190193158U,	// HEXAGON_M2_mpy_sat_rnd_hh_s1
    2190193158U,	// HEXAGON_M2_mpy_sat_rnd_hl_s0
    2190193158U,	// HEXAGON_M2_mpy_sat_rnd_hl_s1
    2192290310U,	// HEXAGON_M2_mpy_sat_rnd_lh_s0
    2192290310U,	// HEXAGON_M2_mpy_sat_rnd_lh_s1
    2192290310U,	// HEXAGON_M2_mpy_sat_rnd_ll_s0
    2192290310U,	// HEXAGON_M2_mpy_sat_rnd_ll_s1
    2160833030U,	// HEXAGON_M2_mpy_up
    1921749510U,	// HEXAGON_M2_mpyd_acc_hh_s0
    1921749510U,	// HEXAGON_M2_mpyd_acc_hh_s1
    1921749510U,	// HEXAGON_M2_mpyd_acc_hl_s0
    1921749510U,	// HEXAGON_M2_mpyd_acc_hl_s1
    1923846662U,	// HEXAGON_M2_mpyd_acc_lh_s0
    1923846662U,	// HEXAGON_M2_mpyd_acc_lh_s1
    1923846662U,	// HEXAGON_M2_mpyd_acc_ll_s0
    1923846662U,	// HEXAGON_M2_mpyd_acc_ll_s1
    2190193158U,	// HEXAGON_M2_mpyd_hh_s0
    2190193158U,	// HEXAGON_M2_mpyd_hh_s1
    2190193158U,	// HEXAGON_M2_mpyd_hl_s0
    2190193158U,	// HEXAGON_M2_mpyd_hl_s1
    2192290310U,	// HEXAGON_M2_mpyd_lh_s0
    2192290310U,	// HEXAGON_M2_mpyd_lh_s1
    2192290310U,	// HEXAGON_M2_mpyd_ll_s0
    2192290310U,	// HEXAGON_M2_mpyd_ll_s1
    1921753606U,	// HEXAGON_M2_mpyd_nac_hh_s0
    1921753606U,	// HEXAGON_M2_mpyd_nac_hh_s1
    1921753606U,	// HEXAGON_M2_mpyd_nac_hl_s0
    1921753606U,	// HEXAGON_M2_mpyd_nac_hl_s1
    1923850758U,	// HEXAGON_M2_mpyd_nac_lh_s0
    1923850758U,	// HEXAGON_M2_mpyd_nac_lh_s1
    1923850758U,	// HEXAGON_M2_mpyd_nac_ll_s0
    1923850758U,	// HEXAGON_M2_mpyd_nac_ll_s1
    2190193158U,	// HEXAGON_M2_mpyd_rnd_hh_s0
    2190193158U,	// HEXAGON_M2_mpyd_rnd_hh_s1
    2190193158U,	// HEXAGON_M2_mpyd_rnd_hl_s0
    2190193158U,	// HEXAGON_M2_mpyd_rnd_hl_s1
    2192290310U,	// HEXAGON_M2_mpyd_rnd_lh_s0
    2192290310U,	// HEXAGON_M2_mpyd_rnd_lh_s1
    2192290310U,	// HEXAGON_M2_mpyd_rnd_ll_s0
    2192290310U,	// HEXAGON_M2_mpyd_rnd_ll_s1
    2160890374U,	// HEXAGON_M2_mpyi
    1921761798U,	// HEXAGON_M2_mpyu_acc_hh_s0
    1921761798U,	// HEXAGON_M2_mpyu_acc_hh_s1
    1921761798U,	// HEXAGON_M2_mpyu_acc_hl_s0
    1921761798U,	// HEXAGON_M2_mpyu_acc_hl_s1
    1923858950U,	// HEXAGON_M2_mpyu_acc_lh_s0
    1923858950U,	// HEXAGON_M2_mpyu_acc_lh_s1
    1923858950U,	// HEXAGON_M2_mpyu_acc_ll_s0
    1923858950U,	// HEXAGON_M2_mpyu_acc_ll_s1
    2190205446U,	// HEXAGON_M2_mpyu_hh_s0
    2190205446U,	// HEXAGON_M2_mpyu_hh_s1
    2190205446U,	// HEXAGON_M2_mpyu_hl_s0
    2190205446U,	// HEXAGON_M2_mpyu_hl_s1
    2192302598U,	// HEXAGON_M2_mpyu_lh_s0
    2192302598U,	// HEXAGON_M2_mpyu_lh_s1
    2192302598U,	// HEXAGON_M2_mpyu_ll_s0
    2192302598U,	// HEXAGON_M2_mpyu_ll_s1
    1921765894U,	// HEXAGON_M2_mpyu_nac_hh_s0
    1921765894U,	// HEXAGON_M2_mpyu_nac_hh_s1
    1921765894U,	// HEXAGON_M2_mpyu_nac_hl_s0
    1921765894U,	// HEXAGON_M2_mpyu_nac_hl_s1
    1923863046U,	// HEXAGON_M2_mpyu_nac_lh_s0
    1923863046U,	// HEXAGON_M2_mpyu_nac_lh_s1
    1923863046U,	// HEXAGON_M2_mpyu_nac_ll_s0
    1923863046U,	// HEXAGON_M2_mpyu_nac_ll_s1
    2160845318U,	// HEXAGON_M2_mpyu_up
    1921761798U,	// HEXAGON_M2_mpyud_acc_hh_s0
    1921761798U,	// HEXAGON_M2_mpyud_acc_hh_s1
    1921761798U,	// HEXAGON_M2_mpyud_acc_hl_s0
    1921761798U,	// HEXAGON_M2_mpyud_acc_hl_s1
    1923858950U,	// HEXAGON_M2_mpyud_acc_lh_s0
    1923858950U,	// HEXAGON_M2_mpyud_acc_lh_s1
    1923858950U,	// HEXAGON_M2_mpyud_acc_ll_s0
    1923858950U,	// HEXAGON_M2_mpyud_acc_ll_s1
    2190205446U,	// HEXAGON_M2_mpyud_hh_s0
    2190205446U,	// HEXAGON_M2_mpyud_hh_s1
    2190205446U,	// HEXAGON_M2_mpyud_hl_s0
    2190205446U,	// HEXAGON_M2_mpyud_hl_s1
    2192302598U,	// HEXAGON_M2_mpyud_lh_s0
    2192302598U,	// HEXAGON_M2_mpyud_lh_s1
    2192302598U,	// HEXAGON_M2_mpyud_ll_s0
    2192302598U,	// HEXAGON_M2_mpyud_ll_s1
    1921765894U,	// HEXAGON_M2_mpyud_nac_hh_s0
    1921765894U,	// HEXAGON_M2_mpyud_nac_hh_s1
    1921765894U,	// HEXAGON_M2_mpyud_nac_hl_s0
    1921765894U,	// HEXAGON_M2_mpyud_nac_hl_s1
    1923863046U,	// HEXAGON_M2_mpyud_nac_lh_s0
    1923863046U,	// HEXAGON_M2_mpyud_nac_lh_s1
    1923863046U,	// HEXAGON_M2_mpyud_nac_ll_s0
    1923863046U,	// HEXAGON_M2_mpyud_nac_ll_s1
    827910U,	// HEXAGON_M2_mpyui
    1892463110U,	// HEXAGON_M2_nacci
    1621930502U,	// HEXAGON_M2_naccii
    836102U,	// HEXAGON_M2_subacc
    840198U,	// HEXAGON_M2_vabsdiffh
    844294U,	// HEXAGON_M2_vabsdiffw
    848390U,	// HEXAGON_M2_vcmac_s0_sat_i
    852486U,	// HEXAGON_M2_vcmac_s0_sat_r
    40702470U,	// HEXAGON_M2_vcmpy_s0_sat_i
    40706566U,	// HEXAGON_M2_vcmpy_s0_sat_r
    61673990U,	// HEXAGON_M2_vcmpy_s1_sat_i
    61678086U,	// HEXAGON_M2_vcmpy_s1_sat_r
    40710662U,	// HEXAGON_M2_vdmacs_s0
    61682182U,	// HEXAGON_M2_vdmacs_s1
    53297670U,	// HEXAGON_M2_vdmpyrs_s0
    67977734U,	// HEXAGON_M2_vdmpyrs_s1
    40714758U,	// HEXAGON_M2_vdmpys_s0
    61686278U,	// HEXAGON_M2_vdmpys_s1
    36524550U,	// HEXAGON_M2_vmac2
    36528646U,	// HEXAGON_M2_vmac2es
    40722950U,	// HEXAGON_M2_vmac2es_s0
    61694470U,	// HEXAGON_M2_vmac2es_s1
    40718854U,	// HEXAGON_M2_vmac2s_s0
    61690374U,	// HEXAGON_M2_vmac2s_s1
    40727046U,	// HEXAGON_M2_vmpy2es_s0
    61698566U,	// HEXAGON_M2_vmpy2es_s1
    40731142U,	// HEXAGON_M2_vmpy2s_s0
    53314054U,	// HEXAGON_M2_vmpy2s_s0pack
    61702662U,	// HEXAGON_M2_vmpy2s_s1
    67994118U,	// HEXAGON_M2_vmpy2s_s1pack
    36540934U,	// HEXAGON_M2_vrcmaci_s0
    74289670U,	// HEXAGON_M2_vrcmaci_s0c
    36545030U,	// HEXAGON_M2_vrcmacr_s0
    74293766U,	// HEXAGON_M2_vrcmacr_s0c
    36549126U,	// HEXAGON_M2_vrcmpyi_s0
    74297862U,	// HEXAGON_M2_vrcmpyi_s0c
    36553222U,	// HEXAGON_M2_vrcmpyr_s0
    74301958U,	// HEXAGON_M2_vrcmpyr_s0c
    905734U,	// HEXAGON_M2_vrmac_s0
    909830U,	// HEXAGON_M2_vrmpy_s0
    913926U,	// HEXAGON_M2_xor_xacc
    1891672582U,	// HEXAGON_M4_and_and
    1897964038U,	// HEXAGON_M4_and_andn
    45574U,	// HEXAGON_M4_and_or
    49670U,	// HEXAGON_M4_and_xor
    1892549126U,	// HEXAGON_M4_or_and
    1898840582U,	// HEXAGON_M4_or_andn
    1892553222U,	// HEXAGON_M4_or_or
    926214U,	// HEXAGON_M4_or_xor
    1892561414U,	// HEXAGON_M4_xor_and
    1898852870U,	// HEXAGON_M4_xor_andn
    934406U,	// HEXAGON_M4_xor_or
    938502U,	// HEXAGON_M5_vdmacbsu
    942598U,	// HEXAGON_M5_vdmpybsu
    946694U,	// HEXAGON_M5_vmacbsu
    950790U,	// HEXAGON_M5_vmacbuu
    954886U,	// HEXAGON_M5_vmpybsu
    958982U,	// HEXAGON_M5_vmpybuu
    963078U,	// HEXAGON_M5_vrmacbsu
    967174U,	// HEXAGON_M5_vrmacbuu
    971270U,	// HEXAGON_M5_vrmpybsu
    975366U,	// HEXAGON_M5_vrmpybuu
    4614U,	// HEXAGON_S2_addasl_rrri
    2426466822U,	// HEXAGON_S2_asl_i_p
    1621168646U,	// HEXAGON_S2_asl_i_p_acc
    1621172742U,	// HEXAGON_S2_asl_i_p_and
    1621180934U,	// HEXAGON_S2_asl_i_p_nac
    1621176838U,	// HEXAGON_S2_asl_i_p_or
    1621185030U,	// HEXAGON_S2_asl_i_p_xacc
    2426466822U,	// HEXAGON_S2_asl_i_r
    1621168646U,	// HEXAGON_S2_asl_i_r_acc
    1621172742U,	// HEXAGON_S2_asl_i_r_and
    1621180934U,	// HEXAGON_S2_asl_i_r_nac
    1621176838U,	// HEXAGON_S2_asl_i_r_or
    2160128518U,	// HEXAGON_S2_asl_i_r_sat
    1621185030U,	// HEXAGON_S2_asl_i_r_xacc
    979462U,	// HEXAGON_S2_asl_i_vh
    983558U,	// HEXAGON_S2_asl_i_vw
    2160128518U,	// HEXAGON_S2_asl_r_p
    1891701254U,	// HEXAGON_S2_asl_r_p_acc
    1891705350U,	// HEXAGON_S2_asl_r_p_and
    1891713542U,	// HEXAGON_S2_asl_r_p_nac
    1891709446U,	// HEXAGON_S2_asl_r_p_or
    2160128518U,	// HEXAGON_S2_asl_r_r
    1891701254U,	// HEXAGON_S2_asl_r_r_acc
    1891705350U,	// HEXAGON_S2_asl_r_r_and
    1891713542U,	// HEXAGON_S2_asl_r_r_nac
    1891709446U,	// HEXAGON_S2_asl_r_r_or
    2160128518U,	// HEXAGON_S2_asl_r_r_sat
    979462U,	// HEXAGON_S2_asl_r_vh
    983558U,	// HEXAGON_S2_asl_r_vw
    2426515974U,	// HEXAGON_S2_asr_i_p
    1621193222U,	// HEXAGON_S2_asr_i_p_acc
    1621197318U,	// HEXAGON_S2_asr_i_p_and
    1621205510U,	// HEXAGON_S2_asr_i_p_nac
    1621201414U,	// HEXAGON_S2_asr_i_p_or
    2426515974U,	// HEXAGON_S2_asr_i_p_rnd
    987654U,	// HEXAGON_S2_asr_i_p_rnd_goodsyntax
    2426515974U,	// HEXAGON_S2_asr_i_r
    1621193222U,	// HEXAGON_S2_asr_i_r_acc
    1621197318U,	// HEXAGON_S2_asr_i_r_and
    1621205510U,	// HEXAGON_S2_asr_i_r_nac
    1621201414U,	// HEXAGON_S2_asr_i_r_or
    2426515974U,	// HEXAGON_S2_asr_i_r_rnd
    987654U,	// HEXAGON_S2_asr_i_r_rnd_goodsyntax
    2427396614U,	// HEXAGON_S2_asr_i_svw_trun
    2161062406U,	// HEXAGON_S2_asr_i_vh
    2161058310U,	// HEXAGON_S2_asr_i_vw
    2160177670U,	// HEXAGON_S2_asr_r_p
    1891725830U,	// HEXAGON_S2_asr_r_p_acc
    1891729926U,	// HEXAGON_S2_asr_r_p_and
    1891738118U,	// HEXAGON_S2_asr_r_p_nac
    1891734022U,	// HEXAGON_S2_asr_r_p_or
    2160177670U,	// HEXAGON_S2_asr_r_r
    1891725830U,	// HEXAGON_S2_asr_r_r_acc
    1891729926U,	// HEXAGON_S2_asr_r_r_and
    1891738118U,	// HEXAGON_S2_asr_r_r_nac
    1891734022U,	// HEXAGON_S2_asr_r_r_or
    2160177670U,	// HEXAGON_S2_asr_r_r_sat
    2161058310U,	// HEXAGON_S2_asr_r_svw_trun
    2161062406U,	// HEXAGON_S2_asr_r_vh
    2161058310U,	// HEXAGON_S2_asr_r_vw
    999942U,	// HEXAGON_S2_cl0
    999942U,	// HEXAGON_S2_cl0p
    1004038U,	// HEXAGON_S2_cl1
    1004038U,	// HEXAGON_S2_cl1p
    1008134U,	// HEXAGON_S2_clb
    1012230U,	// HEXAGON_S2_clbnorm
    1008134U,	// HEXAGON_S2_clbp
    2426532358U,	// HEXAGON_S2_clrbit_i
    2160194054U,	// HEXAGON_S2_clrbit_r
    1016326U,	// HEXAGON_S2_ct0
    1020422U,	// HEXAGON_S2_ct1
    2427429382U,	// HEXAGON_S2_extractu
    2161091078U,	// HEXAGON_S2_extractu_rp
    2427429382U,	// HEXAGON_S2_extractup
    2161091078U,	// HEXAGON_S2_extractup_rp
    1028614U,	// HEXAGON_S2_lsl_r_p
    1032710U,	// HEXAGON_S2_lsl_r_p_acc
    1036806U,	// HEXAGON_S2_lsl_r_p_and
    1040902U,	// HEXAGON_S2_lsl_r_p_nac
    1044998U,	// HEXAGON_S2_lsl_r_p_or
    1028614U,	// HEXAGON_S2_lsl_r_r
    1032710U,	// HEXAGON_S2_lsl_r_r_acc
    1036806U,	// HEXAGON_S2_lsl_r_r_and
    1040902U,	// HEXAGON_S2_lsl_r_r_nac
    1044998U,	// HEXAGON_S2_lsl_r_r_or
    1049094U,	// HEXAGON_S2_lsl_r_vh
    1053190U,	// HEXAGON_S2_lsl_r_vw
    2427462150U,	// HEXAGON_S2_lsr_i_p
    1622159878U,	// HEXAGON_S2_lsr_i_p_acc
    1622163974U,	// HEXAGON_S2_lsr_i_p_and
    1622168070U,	// HEXAGON_S2_lsr_i_p_nac
    1622172166U,	// HEXAGON_S2_lsr_i_p_or
    1622176262U,	// HEXAGON_S2_lsr_i_p_xacc
    2427462150U,	// HEXAGON_S2_lsr_i_r
    1622159878U,	// HEXAGON_S2_lsr_i_r_acc
    1622163974U,	// HEXAGON_S2_lsr_i_r_and
    1622168070U,	// HEXAGON_S2_lsr_i_r_nac
    1622172166U,	// HEXAGON_S2_lsr_i_r_or
    1622176262U,	// HEXAGON_S2_lsr_i_r_xacc
    1081862U,	// HEXAGON_S2_lsr_i_vh
    1085958U,	// HEXAGON_S2_lsr_i_vw
    2161123846U,	// HEXAGON_S2_lsr_r_p
    1892692486U,	// HEXAGON_S2_lsr_r_p_acc
    1892696582U,	// HEXAGON_S2_lsr_r_p_and
    1892700678U,	// HEXAGON_S2_lsr_r_p_nac
    1892704774U,	// HEXAGON_S2_lsr_r_p_or
    2161123846U,	// HEXAGON_S2_lsr_r_r
    1892692486U,	// HEXAGON_S2_lsr_r_r_acc
    1892696582U,	// HEXAGON_S2_lsr_r_r_and
    1892700678U,	// HEXAGON_S2_lsr_r_r_nac
    1892704774U,	// HEXAGON_S2_lsr_r_r_or
    1081862U,	// HEXAGON_S2_lsr_r_vh
    1085958U,	// HEXAGON_S2_lsr_r_vw
    1090054U,	// HEXAGON_S2_packhl
    1094150U,	// HEXAGON_S2_parityp
    2427503110U,	// HEXAGON_S2_setbit_i
    2161164806U,	// HEXAGON_S2_setbit_r
    1102342U,	// HEXAGON_S2_shuffeb
    1106438U,	// HEXAGON_S2_shuffeh
    1110534U,	// HEXAGON_S2_shuffob
    1114630U,	// HEXAGON_S2_shuffoh
    1118726U,	// HEXAGON_S2_svsathb
    1122822U,	// HEXAGON_S2_svsathub
    2427531782U,	// HEXAGON_S2_togglebit_i
    2161193478U,	// HEXAGON_S2_togglebit_r
    2427535878U,	// HEXAGON_S2_tstbit_i
    2161197574U,	// HEXAGON_S2_tstbit_r
    1622233606U,	// HEXAGON_S2_valignib
    1892766214U,	// HEXAGON_S2_valignrb
    1139206U,	// HEXAGON_S2_vcrotate
    36794886U,	// HEXAGON_S2_vrndpackwh
    40989190U,	// HEXAGON_S2_vrndpackwhs
    1118726U,	// HEXAGON_S2_vsathb
    1118726U,	// HEXAGON_S2_vsathb_nopack
    1122822U,	// HEXAGON_S2_vsathub
    1122822U,	// HEXAGON_S2_vsathub_nopack
    1147398U,	// HEXAGON_S2_vsatwh
    1147398U,	// HEXAGON_S2_vsatwh_nopack
    1151494U,	// HEXAGON_S2_vsatwuh
    1151494U,	// HEXAGON_S2_vsatwuh_nopack
    1155590U,	// HEXAGON_S2_vsplatrb
    1159686U,	// HEXAGON_S2_vsplatrh
    1163782U,	// HEXAGON_S2_vsxtbh
    1167878U,	// HEXAGON_S2_vsxthw
    1171974U,	// HEXAGON_S2_vtrunehb
    1176070U,	// HEXAGON_S2_vtrunewh
    1180166U,	// HEXAGON_S2_vtrunohb
    1184262U,	// HEXAGON_S2_vtrunowh
    1188358U,	// HEXAGON_S2_vzxtbh
    1192454U,	// HEXAGON_S2_vzxthw
    1622016518U,	// HEXAGON_S4_or_andi
    344302086U,	// HEXAGON_S4_or_andix
    1622020614U,	// HEXAGON_S4_or_ori
    53625350U,	// HEXAGON_S5_asrhub_rnd_sat_goodsyntax
    41042438U,	// HEXAGON_S5_asrhub_sat
    1200646U,	// HEXAGON_S5_popcountp
    2427400710U,	// HEXAGON_S5_vasrhrnd_goodsyntax
    3528614918U,	// HEXAGON_circ_ldd
    2714923526U,	// HI
    32666118U,	// HI_jt
    2685563398U,	// HI_label
    2685563398U,	// HIi
    518U,	// Hexagon_A2_addpsat
    518U,	// Hexagon_A2_addsp
    344582U,	// Hexagon_A2_maxp
    348678U,	// Hexagon_A2_maxup
    2166391302U,	// Hexagon_A4_andn
    2160251398U,	// Hexagon_A4_combineir
    2426593798U,	// Hexagon_A4_combineri
    2166727174U,	// Hexagon_A4_orn
    2160198150U,	// Hexagon_A4_rcmpeq
    2426536454U,	// Hexagon_A4_rcmpeqi
    2161279494U,	// Hexagon_A4_rcmpneq
    2427617798U,	// Hexagon_A4_rcmpneqi
    2161283590U,	// Hexagon_C2_bitsclr
    2427621894U,	// Hexagon_C2_bitsclri
    1221126U,	// Hexagon_C2_bitsset
    75530758U,	// Hexagon_C4_and_and
    3833627142U,	// Hexagon_C4_and_andn
    77627910U,	// Hexagon_C4_and_or
    3835724294U,	// Hexagon_C4_and_orn
    2161291782U,	// Hexagon_C4_cmplte
    2427630086U,	// Hexagon_C4_cmpltei
    2161295878U,	// Hexagon_C4_cmplteu
    2427634182U,	// Hexagon_C4_cmplteui
    2161279494U,	// Hexagon_C4_cmpneq
    2427617798U,	// Hexagon_C4_cmpneqi
    639494U,	// Hexagon_C4_fastcorner9
    643590U,	// Hexagon_C4_fastcorner9_not
    75866630U,	// Hexagon_C4_or_and
    3833963014U,	// Hexagon_C4_or_andn
    77963782U,	// Hexagon_C4_or_or
    3836060166U,	// Hexagon_C4_or_orn
    2427228678U,	// Hexagon_M2_mpysmi
    1233414U,	// Hexagon_M2_vradduh
    1237510U,	// Hexagon_M2_vrcmpys_acc_s1
    62059014U,	// Hexagon_M2_vrcmpys_s1
    68350470U,	// Hexagon_M2_vrcmpys_s1rp
    913926U,	// Hexagon_M4_xor_xacc
    1245702U,	// Hexagon_S2_brev
    1249798U,	// Hexagon_S2_deinterleave
    1622352390U,	// Hexagon_S2_insert
    1892884998U,	// Hexagon_S2_insert_rp
    1622352390U,	// Hexagon_S2_insertp
    1892884998U,	// Hexagon_S2_insertp_rp
    1257990U,	// Hexagon_S2_interleave
    1262086U,	// Hexagon_S2_lfsp
    1266182U,	// Hexagon_S2_tableidxb_goodsyntax
    1270278U,	// Hexagon_S2_tableidxd_goodsyntax
    1274374U,	// Hexagon_S2_tableidxh_goodsyntax
    1278470U,	// Hexagon_S2_tableidxw_goodsyntax
    1622381062U,	// Hexagon_S2_vspliceib
    1892913670U,	// Hexagon_S2_vsplicerb
    536871430U,	// Hexagon_S4_addaddi
    2166391302U,	// Hexagon_S4_andnp
    2166727174U,	// Hexagon_S4_ornp
    1342177798U,	// Hexagon_S4_subaddi
    253U,	// IMMEXT
    123399U,	// JMP
    281U,	// JMPR
    1286683U,	// JMPR_cNotPt
    1286767U,	// JMPR_cPt
    1290779U,	// JMPR_cdnNotPnt
    1294875U,	// JMPR_cdnNotPt_V3
    1290863U,	// JMPR_cdnPnt
    1294959U,	// JMPR_cdnPt_V3
    4107522705U,	// JMP_EQriNotPnt_ie_nv_V4
    4107522705U,	// JMP_EQriNotPnt_nv_V4
    4109619857U,	// JMP_EQriNotPntneg_ie_nv_V4
    4109619857U,	// JMP_EQriNotPntneg_nv_V4
    80990865U,	// JMP_EQriNotPt_ie_nv_V4
    80990865U,	// JMP_EQriNotPt_nv_V4
    83088017U,	// JMP_EQriNotPtneg_ie_nv_V4
    83088017U,	// JMP_EQriNotPtneg_nv_V4
    4107522718U,	// JMP_EQriPnt_ie_nv_V4
    4107522718U,	// JMP_EQriPnt_nv_V4
    4109619870U,	// JMP_EQriPntneg_ie_nv_V4
    4109619870U,	// JMP_EQriPntneg_nv_V4
    80990878U,	// JMP_EQriPt_ie_nv_V4
    80990878U,	// JMP_EQriPt_nv_V4
    83088030U,	// JMP_EQriPtneg_ie_nv_V4
    83088030U,	// JMP_EQriPtneg_nv_V4
    85189265U,	// JMP_EQrrNotPnt_ie_nv_V4
    85189265U,	// JMP_EQrrNotPnt_nv_V4
    87286417U,	// JMP_EQrrNotPt_ie_nv_V4
    87286417U,	// JMP_EQrrNotPt_nv_V4
    85189278U,	// JMP_EQrrPnt_ie_nv_V4
    85189278U,	// JMP_EQrrPnt_nv_V4
    87286430U,	// JMP_EQrrPt_ie_nv_V4
    87286430U,	// JMP_EQrrPt_nv_V4
    4107522780U,	// JMP_GTUriNotPnt_ie_nv_V4
    4107522780U,	// JMP_GTUriNotPnt_nv_V4
    80990940U,	// JMP_GTUriNotPt_ie_nv_V4
    80990940U,	// JMP_GTUriNotPt_nv_V4
    4107522794U,	// JMP_GTUriPnt_ie_nv_V4
    4107522794U,	// JMP_GTUriPnt_nv_V4
    80990954U,	// JMP_GTUriPt_ie_nv_V4
    80990954U,	// JMP_GTUriPt_nv_V4
    85189340U,	// JMP_GTUrrNotPnt_ie_nv_V4
    85189340U,	// JMP_GTUrrNotPnt_nv_V4
    87286492U,	// JMP_GTUrrNotPt_ie_nv_V4
    87286492U,	// JMP_GTUrrNotPt_nv_V4
    85189354U,	// JMP_GTUrrPnt_ie_nv_V4
    85189354U,	// JMP_GTUrrPnt_nv_V4
    87286506U,	// JMP_GTUrrPt_ie_nv_V4
    87286506U,	// JMP_GTUrrPt_nv_V4
    89387740U,	// JMP_GTUrrdnNotPnt_ie_nv_V4
    89387740U,	// JMP_GTUrrdnNotPnt_nv_V4
    91484892U,	// JMP_GTUrrdnNotPt_ie_nv_V4
    91484892U,	// JMP_GTUrrdnNotPt_nv_V4
    89387754U,	// JMP_GTUrrdnPnt_ie_nv_V4
    89387754U,	// JMP_GTUrrdnPnt_nv_V4
    91484906U,	// JMP_GTUrrdnPt_ie_nv_V4
    91484906U,	// JMP_GTUrrdnPt_nv_V4
    4107522730U,	// JMP_GTriNotPnt_ie_nv_V4
    4107522730U,	// JMP_GTriNotPnt_nv_V4
    4109619882U,	// JMP_GTriNotPntneg_ie_nv_V4
    4109619882U,	// JMP_GTriNotPntneg_nv_V4
    80990890U,	// JMP_GTriNotPt_ie_nv_V4
    80990890U,	// JMP_GTriNotPt_nv_V4
    83088042U,	// JMP_GTriNotPtneg_ie_nv_V4
    83088042U,	// JMP_GTriNotPtneg_nv_V4
    4107522743U,	// JMP_GTriPnt_ie_nv_V4
    4107522743U,	// JMP_GTriPnt_nv_V4
    4109619895U,	// JMP_GTriPntneg_ie_nv_V4
    4109619895U,	// JMP_GTriPntneg_nv_V4
    80990903U,	// JMP_GTriPt_ie_nv_V4
    80990903U,	// JMP_GTriPt_nv_V4
    83088055U,	// JMP_GTriPtneg_ie_nv_V4
    83088055U,	// JMP_GTriPtneg_nv_V4
    85189290U,	// JMP_GTrrNotPnt_ie_nv_V4
    85189290U,	// JMP_GTrrNotPnt_nv_V4
    87286442U,	// JMP_GTrrNotPt_ie_nv_V4
    87286442U,	// JMP_GTrrNotPt_nv_V4
    85189303U,	// JMP_GTrrPnt_ie_nv_V4
    85189303U,	// JMP_GTrrPnt_nv_V4
    87286455U,	// JMP_GTrrPt_ie_nv_V4
    87286455U,	// JMP_GTrrPt_nv_V4
    89387690U,	// JMP_GTrrdnNotPnt_ie_nv_V4
    89387690U,	// JMP_GTrrdnNotPnt_nv_V4
    91484842U,	// JMP_GTrrdnNotPt_ie_nv_V4
    91484842U,	// JMP_GTrrdnNotPt_nv_V4
    89387703U,	// JMP_GTrrdnPnt_ie_nv_V4
    89387703U,	// JMP_GTrrdnPnt_nv_V4
    91484855U,	// JMP_GTrrdnPt_ie_nv_V4
    91484855U,	// JMP_GTrrdnPt_nv_V4
    4107522755U,	// JMP_TSTBITr0NotPnt_ie_nv_V4
    4107522755U,	// JMP_TSTBITr0NotPnt_nv_V4
    80990915U,	// JMP_TSTBITr0NotPt_ie_nv_V4
    80990915U,	// JMP_TSTBITr0NotPt_nv_V4
    4107522768U,	// JMP_TSTBITr0Pnt_ie_nv_V4
    4107522768U,	// JMP_TSTBITr0Pnt_nv_V4
    80990928U,	// JMP_TSTBITr0Pt_ie_nv_V4
    80990928U,	// JMP_TSTBITr0Pt_nv_V4
    119407U,	// JMP_c
    119323U,	// JMP_cNot
    1311259U,	// JMP_cdnNotPnt
    1315355U,	// JMP_cdnNotPt
    1311343U,	// JMP_cdnPnt
    1315439U,	// JMP_cdnPt
    2715034118U,	// LDb_GP
    36975110U,	// LDb_GP_V4
    2776638491U,	// LDb_GP_cNotPt_V4
    2776638575U,	// LDb_GP_cPt_V4
    2776642587U,	// LDb_GP_cdnNotPt_V4
    2776642671U,	// LDb_GP_cdnPt_V4
    36979206U,	// LDd_GP
    36983302U,	// LDd_GP_V4
    2778735643U,	// LDd_GP_cNotPt_V4
    2778735727U,	// LDd_GP_cPt_V4
    2778739739U,	// LDd_GP_cdnNotPt_V4
    2778739823U,	// LDd_GP_cdnPt_V4
    2715050502U,	// LDh_GP
    36991494U,	// LDh_GP_V4
    2780832795U,	// LDh_GP_cNotPt_V4
    2780832879U,	// LDh_GP_cPt_V4
    2780836891U,	// LDh_GP_cdnNotPt_V4
    2780836975U,	// LDh_GP_cdnPt_V4
    2784264710U,	// LDrib
    299115014U,	// LDrib_GP
    2517905926U,	// LDrib_GP_V4
    360719387U,	// LDrib_GP_cNotPt_V4
    360719471U,	// LDrib_GP_cPt_V4
    360723483U,	// LDrib_GP_cdnNotPt_V4
    360723567U,	// LDrib_GP_cdnPt_V4
    1348102U,	// LDrib_abs_V4
    102769691U,	// LDrib_abs_cNotPt_V4
    102769775U,	// LDrib_abs_cPt_V4
    102773787U,	// LDrib_abs_cdnNotPt_V4
    102773871U,	// LDrib_abs_cdnPt_V4
    538214918U,	// LDrib_abs_set_V4
    806650374U,	// LDrib_abs_setimm_V4
    1178608667U,	// LDrib_cNotPt
    1178608751U,	// LDrib_cPt
    1178612763U,	// LDrib_cdnNotPt
    1178612847U,	// LDrib_cdnPt
    2765365766U,	// LDrib_imm_abs_V4
    106963995U,	// LDrib_imm_abs_cNotPt_V4
    106964079U,	// LDrib_imm_abs_cPt_V4
    106968091U,	// LDrib_imm_abs_cdnNotPt_V4
    106968175U,	// LDrib_imm_abs_cdnPt_V4
    1343521286U,	// LDrib_ind_lo_V4
    1611956742U,	// LDrib_indexed
    110404102U,	// LDrib_indexed_V4
    2252350491U,	// LDrib_indexed_cNotPt
    1990206491U,	// LDrib_indexed_cNotPt_V4
    2252350575U,	// LDrib_indexed_cPt
    1990206575U,	// LDrib_indexed_cPt_V4
    2252354587U,	// LDrib_indexed_cdnNotPt
    1990210587U,	// LDrib_indexed_cdnNotPt_V4
    2252354671U,	// LDrib_indexed_cdnPt
    1990210671U,	// LDrib_indexed_cdnPt_V4
    1725211142U,	// LDrib_indexed_shl_V4
    1453335579U,	// LDrib_indexed_shl_cNotPt_V4
    1453335663U,	// LDrib_indexed_shl_cPt_V4
    1453339675U,	// LDrib_indexed_shl_cdnNotPt_V4
    1453339759U,	// LDrib_indexed_shl_cdnPt_V4
    2784125446U,	// LDrid
    2517910022U,	// LDrid_GP
    2517914118U,	// LDrid_GP_V4
    362816539U,	// LDrid_GP_cNotPt_V4
    362816623U,	// LDrid_GP_cPt_V4
    362820635U,	// LDrid_GP_cdnNotPt_V4
    362820719U,	// LDrid_GP_cdnPt_V4
    1356294U,	// LDrid_abs_V4
    115352603U,	// LDrid_abs_cNotPt_V4
    115352687U,	// LDrid_abs_cPt_V4
    115356699U,	// LDrid_abs_cdnNotPt_V4
    115356783U,	// LDrid_abs_cdnPt_V4
    538075654U,	// LDrid_abs_set_V4
    806511110U,	// LDrid_abs_setimm_V4
    1191191579U,	// LDrid_cNotPt
    1191191663U,	// LDrid_cPt
    1191195675U,	// LDrid_cdnNotPt
    1191195759U,	// LDrid_cdnPt
    2784125446U,	// LDrid_f
    2530525702U,	// LDrid_ind_lo_V4
    1611817478U,	// LDrid_indexed
    2249507334U,	// LDrid_indexed_V4
    2264933403U,	// LDrid_indexed_cNotPt
    1998595099U,	// LDrid_indexed_cNotPt_V4
    2264933487U,	// LDrid_indexed_cPt
    1998595183U,	// LDrid_indexed_cPt_V4
    2264937499U,	// LDrid_indexed_cdnNotPt
    1998599195U,	// LDrid_indexed_cdnNotPt_V4
    2264937583U,	// LDrid_indexed_cdnPt
    1998599279U,	// LDrid_indexed_cdnPt_V4
    1611817478U,	// LDrid_indexed_f
    2249507334U,	// LDrid_indexed_shl_V4
    1461724187U,	// LDrid_indexed_shl_cNotPt_V4
    1461724271U,	// LDrid_indexed_shl_cPt_V4
    1461728283U,	// LDrid_indexed_shl_cdnNotPt_V4
    1461728367U,	// LDrid_indexed_shl_cdnPt_V4
    2784285190U,	// LDrih
    299131398U,	// LDrih_GP
    2517922310U,	// LDrih_GP_V4
    364913691U,	// LDrih_GP_cNotPt_V4
    364913775U,	// LDrih_GP_cPt_V4
    364917787U,	// LDrih_GP_cdnNotPt_V4
    364917871U,	// LDrih_GP_cdnPt_V4
    1368582U,	// LDrih_abs_V4
    121644059U,	// LDrih_abs_cNotPt_V4
    121644143U,	// LDrih_abs_cPt_V4
    121648155U,	// LDrih_abs_cdnNotPt_V4
    121648239U,	// LDrih_abs_cdnPt_V4
    538235398U,	// LDrih_abs_set_V4
    806670854U,	// LDrih_abs_setimm_V4
    1197483035U,	// LDrih_cNotPt
    1197483119U,	// LDrih_cPt
    1197487131U,	// LDrih_cdnNotPt
    1197487215U,	// LDrih_cdnPt
    2765382150U,	// LDrih_imm_abs_V4
    125838363U,	// LDrih_imm_abs_cNotPt_V4
    125838447U,	// LDrih_imm_abs_cPt_V4
    125842459U,	// LDrih_imm_abs_cdnNotPt_V4
    125842543U,	// LDrih_imm_abs_cdnPt_V4
    1343541766U,	// LDrih_ind_lo_V4
    1611977222U,	// LDrih_indexed
    110424582U,	// LDrih_indexed_V4
    2271224859U,	// LDrih_indexed_cNotPt
    2006983707U,	// LDrih_indexed_cNotPt_V4
    2271224943U,	// LDrih_indexed_cPt
    2006983791U,	// LDrih_indexed_cPt_V4
    2271228955U,	// LDrih_indexed_cdnNotPt
    2006987803U,	// LDrih_indexed_cdnNotPt_V4
    2271229039U,	// LDrih_indexed_cdnPt
    2006987887U,	// LDrih_indexed_cdnPt_V4
    1725231622U,	// LDrih_indexed_shl_V4
    1470112795U,	// LDrih_indexed_shl_cNotPt_V4
    1470112879U,	// LDrih_indexed_shl_cPt_V4
    1470116891U,	// LDrih_indexed_shl_cdnNotPt_V4
    1470116975U,	// LDrih_indexed_shl_cdnPt_V4
    2784297478U,	// LDriub
    299176454U,	// LDriub_GP
    2517967366U,	// LDriub_GP_V4
    398468123U,	// LDriub_GP_cNotPt_V4
    398468207U,	// LDriub_GP_cPt_V4
    398472219U,	// LDriub_GP_cdnNotPt_V4
    398472303U,	// LDriub_GP_cdnPt_V4
    1389062U,	// LDriub_abs_V4
    132129819U,	// LDriub_abs_cNotPt_V4
    132129903U,	// LDriub_abs_cPt_V4
    132133915U,	// LDriub_abs_cdnNotPt_V4
    132133999U,	// LDriub_abs_cdnPt_V4
    538247686U,	// LDriub_abs_set_V4
    806683142U,	// LDriub_abs_setimm_V4
    110445062U,	// LDriub_ae_indexed_V4
    1725252102U,	// LDriub_ae_indexed_shl_V4
    1207968795U,	// LDriub_cNotPt
    1207968879U,	// LDriub_cPt
    1207972891U,	// LDriub_cdnNotPt
    1207972975U,	// LDriub_cdnPt
    2765427206U,	// LDriub_imm_abs_V4
    136324123U,	// LDriub_imm_abs_cNotPt_V4
    136324207U,	// LDriub_imm_abs_cPt_V4
    136328219U,	// LDriub_imm_abs_cdnNotPt_V4
    136328303U,	// LDriub_imm_abs_cdnPt_V4
    1343554054U,	// LDriub_ind_lo_V4
    1611989510U,	// LDriub_indexed
    110445062U,	// LDriub_indexed_V4
    2281710619U,	// LDriub_indexed_cNotPt
    2017469467U,	// LDriub_indexed_cNotPt_V4
    2281710703U,	// LDriub_indexed_cPt
    2017469551U,	// LDriub_indexed_cPt_V4
    2281714715U,	// LDriub_indexed_cdnNotPt
    2017473563U,	// LDriub_indexed_cdnNotPt_V4
    2281714799U,	// LDriub_indexed_cdnPt
    2017473647U,	// LDriub_indexed_cdnPt_V4
    1725252102U,	// LDriub_indexed_shl_V4
    1480598555U,	// LDriub_indexed_shl_cNotPt_V4
    1480598639U,	// LDriub_indexed_shl_cPt_V4
    1480602651U,	// LDriub_indexed_shl_cdnNotPt_V4
    1480602735U,	// LDriub_indexed_shl_cdnPt_V4
    2784317958U,	// LDriuh
    299196934U,	// LDriuh_GP
    2517987846U,	// LDriuh_GP_V4
    408953883U,	// LDriuh_GP_cNotPt_V4
    408953967U,	// LDriuh_GP_cPt_V4
    408957979U,	// LDriuh_GP_cdnNotPt_V4
    408958063U,	// LDriuh_GP_cdnPt_V4
    1409542U,	// LDriuh_abs_V4
    142615579U,	// LDriuh_abs_cNotPt_V4
    142615663U,	// LDriuh_abs_cPt_V4
    142619675U,	// LDriuh_abs_cdnNotPt_V4
    142619759U,	// LDriuh_abs_cdnPt_V4
    538268166U,	// LDriuh_abs_set_V4
    806703622U,	// LDriuh_abs_setimm_V4
    110465542U,	// LDriuh_ae_indexed_V4
    1725272582U,	// LDriuh_ae_indexed_shl_V4
    1218454555U,	// LDriuh_cNotPt
    1218454639U,	// LDriuh_cPt
    1218458651U,	// LDriuh_cdnNotPt
    1218458735U,	// LDriuh_cdnPt
    2765447686U,	// LDriuh_imm_abs_V4
    146809883U,	// LDriuh_imm_abs_cNotPt_V4
    146809967U,	// LDriuh_imm_abs_cPt_V4
    146813979U,	// LDriuh_imm_abs_cdnNotPt_V4
    146814063U,	// LDriuh_imm_abs_cdnPt_V4
    1343574534U,	// LDriuh_ind_lo_V4
    1612009990U,	// LDriuh_indexed
    110465542U,	// LDriuh_indexed_V4
    2292196379U,	// LDriuh_indexed_cNotPt
    2027955227U,	// LDriuh_indexed_cNotPt_V4
    2292196463U,	// LDriuh_indexed_cPt
    2027955311U,	// LDriuh_indexed_cPt_V4
    2292200475U,	// LDriuh_indexed_cdnNotPt
    2027959323U,	// LDriuh_indexed_cdnNotPt_V4
    2292200559U,	// LDriuh_indexed_cdnPt
    2027959407U,	// LDriuh_indexed_cdnPt_V4
    1725272582U,	// LDriuh_indexed_shl_V4
    1491084315U,	// LDriuh_indexed_shl_cNotPt_V4
    1491084399U,	// LDriuh_indexed_shl_cPt_V4
    1491088411U,	// LDriuh_indexed_shl_cdnNotPt_V4
    1491088495U,	// LDriuh_indexed_shl_cdnPt_V4
    2784338438U,	// LDriw
    299217414U,	// LDriw_GP
    2518008326U,	// LDriw_GP_V4
    419439643U,	// LDriw_GP_cNotPt_V4
    419439727U,	// LDriw_GP_cPt_V4
    419443739U,	// LDriw_GP_cdnNotPt_V4
    419443823U,	// LDriw_GP_cdnPt_V4
    1430022U,	// LDriw_abs_V4
    153101339U,	// LDriw_abs_cNotPt_V4
    153101423U,	// LDriw_abs_cPt_V4
    153105435U,	// LDriw_abs_cdnNotPt_V4
    153105519U,	// LDriw_abs_cdnPt_V4
    538288646U,	// LDriw_abs_set_V4
    806724102U,	// LDriw_abs_setimm_V4
    1228940315U,	// LDriw_cNotPt
    1228940399U,	// LDriw_cPt
    1228944411U,	// LDriw_cdnNotPt
    1228944495U,	// LDriw_cdnPt
    2784338438U,	// LDriw_f
    2765468166U,	// LDriw_imm_abs_V4
    157295643U,	// LDriw_imm_abs_cNotPt_V4
    157295727U,	// LDriw_imm_abs_cPt_V4
    157299739U,	// LDriw_imm_abs_cdnNotPt_V4
    157299823U,	// LDriw_imm_abs_cdnPt_V4
    1343595014U,	// LDriw_ind_lo_V4
    1612030470U,	// LDriw_indexed
    110486022U,	// LDriw_indexed_V4
    2302682139U,	// LDriw_indexed_cNotPt
    2038440987U,	// LDriw_indexed_cNotPt_V4
    2302682223U,	// LDriw_indexed_cPt
    2038441071U,	// LDriw_indexed_cPt_V4
    2302686235U,	// LDriw_indexed_cdnNotPt
    2038445083U,	// LDriw_indexed_cdnNotPt_V4
    2302686319U,	// LDriw_indexed_cdnPt
    2038445167U,	// LDriw_indexed_cdnPt_V4
    1612030470U,	// LDriw_indexed_f
    1725293062U,	// LDriw_indexed_shl_V4
    1501570075U,	// LDriw_indexed_shl_cNotPt_V4
    1501570159U,	// LDriw_indexed_shl_cPt_V4
    1501574171U,	// LDriw_indexed_shl_cdnNotPt_V4
    1501574255U,	// LDriw_indexed_shl_cdnPt_V4
    400U,	// LDriw_pred
    400U,	// LDriw_pred_V4
    2715095558U,	// LDub_GP
    37036550U,	// LDub_GP_V4
    2814387227U,	// LDub_GP_cNotPt_V4
    2814387311U,	// LDub_GP_cPt_V4
    2814391323U,	// LDub_GP_cdnNotPt_V4
    2814391407U,	// LDub_GP_cdnPt_V4
    2715116038U,	// LDuh_GP
    37057030U,	// LDuh_GP_V4
    2824872987U,	// LDuh_GP_cNotPt_V4
    2824873071U,	// LDuh_GP_cPt_V4
    2824877083U,	// LDuh_GP_cdnNotPt_V4
    2824877167U,	// LDuh_GP_cdnPt_V4
    2715136518U,	// LDw_GP
    37077510U,	// LDw_GP_V4
    2835358747U,	// LDw_GP_cNotPt_V4
    2835358831U,	// LDw_GP_cPt_V4
    2835362843U,	// LDw_GP_cdnNotPt_V4
    2835362927U,	// LDw_GP_cdnPt_V4
    2715152902U,	// LO
    1442420U,	// LOOP0_i
    36958836U,	// LOOP0_r
    32895494U,	// LO_jt
    2685792774U,	// LO_label
    2685792774U,	// LOi
    1032710U,	// LSL_ADD_rr
    1032710U,	// LSL_ADDd_rr
    1036806U,	// LSL_AND_rr
    1036806U,	// LSL_ANDd_rr
    1044998U,	// LSL_OR_rr
    1044998U,	// LSL_ORd_rr
    1040902U,	// LSL_SUB_rr
    1040902U,	// LSL_SUBd_rr
    1028614U,	// LSL_rr
    1028614U,	// LSLd
    1446406U,	// LSLd_rr_xor_V4
    1450502U,	// LSLi_V4
    1622159878U,	// LSR_ADD_ri
    1892692486U,	// LSR_ADD_rr
    1622159878U,	// LSR_ADDd_ri
    1892692486U,	// LSR_ADDd_rr
    1622163974U,	// LSR_AND_ri
    1892696582U,	// LSR_AND_rr
    1622163974U,	// LSR_ANDd_ri
    1892696582U,	// LSR_ANDd_rr
    1622172166U,	// LSR_OR_ri
    1892704774U,	// LSR_OR_rr
    1622172166U,	// LSR_ORd_ri
    1892704774U,	// LSR_ORd_rr
    1622168070U,	// LSR_SUB_ri
    1892700678U,	// LSR_SUB_rr
    1622168070U,	// LSR_SUBd_ri
    1892700678U,	// LSR_SUBd_rr
    1622176262U,	// LSR_XOR_ri
    1622176262U,	// LSR_XORd_ri
    2427462150U,	// LSR_ri
    2161123846U,	// LSR_rr
    2427462150U,	// LSRd_ri
    2161123846U,	// LSRd_rr
    1892708870U,	// LSRd_rr_xor_V4
    623110U,	// MASK_p
    38097414U,	// MAXUd_rr
    38097414U,	// MAXUw_rr
    38093318U,	// MAXd_rr
    38093318U,	// MAXw_dd
    38093318U,	// MAXw_rr
    400U,	// MEMb_ADDSUBi_MEM_V4
    400U,	// MEMb_ADDSUBi_indexed_MEM_V4
    162936443U,	// MEMb_ADDi_MEM_V4
    2580955771U,	// MEMb_ADDi_indexed_MEM_V4
    2186688123U,	// MEMb_ADDr_MEM_V4
    2312520315U,	// MEMb_ADDr_indexed_MEM_V4
    1463931U,	// MEMb_ANDr_MEM_V4
    2312520315U,	// MEMb_ANDr_indexed_MEM_V4
    1468027U,	// MEMb_ORr_MEM_V4
    167133819U,	// MEMb_ORr_indexed_MEM_V4
    162952827U,	// MEMb_SUBi_MEM_V4
    2585150075U,	// MEMb_SUBi_indexed_MEM_V4
    2186704507U,	// MEMb_SUBr_MEM_V4
    2316714619U,	// MEMb_SUBr_indexed_MEM_V4
    400U,	// MEMh_ADDSUBi_MEM_V4
    400U,	// MEMh_ADDSUBi_indexed_MEM_V4
    162936459U,	// MEMh_ADDi_MEM_V4
    2580955787U,	// MEMh_ADDi_indexed_MEM_V4
    2186688139U,	// MEMh_ADDr_MEM_V4
    2312520331U,	// MEMh_ADDr_indexed_MEM_V4
    1463947U,	// MEMh_ANDr_MEM_V4
    2312520331U,	// MEMh_ANDr_indexed_MEM_V4
    1468043U,	// MEMh_ORr_MEM_V4
    167133835U,	// MEMh_ORr_indexed_MEM_V4
    162952843U,	// MEMh_SUBi_MEM_V4
    2585150091U,	// MEMh_SUBi_indexed_MEM_V4
    2186704523U,	// MEMh_SUBr_MEM_V4
    2316714635U,	// MEMh_SUBr_indexed_MEM_V4
    400U,	// MEMw_ADDSUBi_MEM_V4
    400U,	// MEMw_ADDSUBi_indexed_MEM_V4
    162936567U,	// MEMw_ADDi_MEM_V4
    171328247U,	// MEMw_ADDi_indexed_MEM_V4
    2186688247U,	// MEMw_ADDr_MEM_V4
    2312520439U,	// MEMw_ADDr_indexed_MEM_V4
    1464055U,	// MEMw_ANDr_MEM_V4
    173425399U,	// MEMw_ANDr_indexed_MEM_V4
    1468151U,	// MEMw_ORr_MEM_V4
    167133943U,	// MEMw_ORr_indexed_MEM_V4
    162952951U,	// MEMw_SUBi_MEM_V4
    175522551U,	// MEMw_SUBi_indexed_MEM_V4
    2186704631U,	// MEMw_SUBr_MEM_V4
    2316714743U,	// MEMw_SUBr_indexed_MEM_V4
    38105606U,	// MINUd_rr
    38105606U,	// MINUw_rr
    38101510U,	// MINd_rr
    38101510U,	// MINw_dd
    38101510U,	// MINw_rr
    2160833030U,	// MPY
    2160833030U,	// MPY64
    1892389382U,	// MPY64_acc
    1892393478U,	// MPY64_sub
    2160890374U,	// MPYI
    1621881350U,	// MPYI_acc_ri
    1892413958U,	// MPYI_acc_rr
    2427228678U,	// MPYI_ri
    1475078U,	// MPYI_rin
    1479174U,	// MPYI_riu
    786950U,	// MPYI_sub_ri
    2160845318U,	// MPYU
    2160845318U,	// MPYU64
    1892401670U,	// MPYU64_acc
    1892401670U,	// MPYU64_sub
    2160833030U,	// MPY_trsext
    2427032070U,	// MUX_ii
    2427032070U,	// MUX_ir
    2160693766U,	// MUX_ri
    2160693766U,	// MUX_rr
    36012550U,	// NEG
    388U,	// NOP
    365062U,	// NOT_p
    365062U,	// NOT_rr
    365062U,	// NOT_rr64
    2160435718U,	// OR_pp
    2426774022U,	// OR_ri
    2160435718U,	// OR_rr
    2160435718U,	// OR_rr64
    176170011U,	// OR_rr_cNotPt
    176170095U,	// OR_rr_cPt
    176174107U,	// OR_rr_cdnNotPt
    176174191U,	// OR_rr_cdnPt
    2166727174U,	// ORd_NOTd_V4
    5677574U,	// ORi_ASLri_V4
    7774726U,	// ORi_LSRri_V4
    1898840582U,	// ORr_ANDr_NOTr_V4
    1622016518U,	// ORr_ANDri2_V4
    344302086U,	// ORr_ANDri_V4
    1892549126U,	// ORr_ANDrr_V4
    1622020614U,	// ORr_ORri_V4
    1892553222U,	// ORr_ORrr_V4
    926214U,	// ORr_XORrr_V4
    3528753670U,	// POST_LDrib
    1983916059U,	// POST_LDrib_cNotPt
    1983916143U,	// POST_LDrib_cPt
    1983920155U,	// POST_LDrib_cdnNotPt_V4
    1983920239U,	// POST_LDrib_cdnPt_V4
    3528614406U,	// POST_LDrid
    1996498971U,	// POST_LDrid_cNotPt
    1996499055U,	// POST_LDrid_cPt
    1996503067U,	// POST_LDrid_cdnNotPt_V4
    1996503151U,	// POST_LDrid_cdnPt_V4
    3528774150U,	// POST_LDrih
    2002790427U,	// POST_LDrih_cNotPt
    2002790511U,	// POST_LDrih_cPt
    2002794523U,	// POST_LDrih_cdnNotPt_V4
    2002794607U,	// POST_LDrih_cdnPt_V4
    3528786438U,	// POST_LDriub
    2013276187U,	// POST_LDriub_cNotPt
    2013276271U,	// POST_LDriub_cPt
    2013280283U,	// POST_LDriub_cdnNotPt_V4
    2013280367U,	// POST_LDriub_cdnPt_V4
    3528806918U,	// POST_LDriuh
    2023761947U,	// POST_LDriuh_cNotPt
    2023762031U,	// POST_LDriuh_cPt
    2023766043U,	// POST_LDriuh_cdnNotPt_V4
    2023766127U,	// POST_LDriuh_cdnPt_V4
    3528827398U,	// POST_LDriw
    2034247707U,	// POST_LDriw_cNotPt
    2034247791U,	// POST_LDriw_cPt
    2034251803U,	// POST_LDriw_cdnNotPt_V4
    2034251887U,	// POST_LDriw_cdnPt_V4
    22460539U,	// POST_STbri
    2327233563U,	// POST_STbri_cNotPt
    2595669019U,	// POST_STbri_cNotPt_nv_V4
    2327233647U,	// POST_STbri_cPt
    2595669103U,	// POST_STbri_cPt_nv_V4
    2327237659U,	// POST_STbri_cdnNotPt_V4
    2595673115U,	// POST_STbri_cdnNotPt_nv_V4
    2327237743U,	// POST_STbri_cdnPt_V4
    2595673199U,	// POST_STbri_cdnPt_nv_V4
    181844091U,	// POST_STbri_nv_V4
    22460545U,	// POST_STdri
    2327241755U,	// POST_STdri_cNotPt
    2327241839U,	// POST_STdri_cPt
    2327245851U,	// POST_STdri_cdnNotPt_V4
    2327245935U,	// POST_STdri_cdnPt_V4
    22460555U,	// POST_SThri
    2327249947U,	// POST_SThri_cNotPt
    2595685403U,	// POST_SThri_cNotPt_nv_V4
    2327250031U,	// POST_SThri_cPt
    2595685487U,	// POST_SThri_cPt_nv_V4
    2327254043U,	// POST_SThri_cdnNotPt_V4
    2595689499U,	// POST_SThri_cdnNotPt_nv_V4
    2327254127U,	// POST_SThri_cdnPt_V4
    2595689583U,	// POST_SThri_cdnPt_nv_V4
    181844107U,	// POST_SThri_nv_V4
    22460663U,	// POST_STwri
    2327258139U,	// POST_STwri_cNotPt
    2595693595U,	// POST_STwri_cNotPt_nv_V4
    2327258223U,	// POST_STwri_cPt
    2595693679U,	// POST_STwri_cPt_nv_V4
    2327262235U,	// POST_STwri_cdnNotPt_V4
    2595697691U,	// POST_STwri_cdnNotPt_nv_V4
    2327262319U,	// POST_STwri_cdnPt_V4
    2595697775U,	// POST_STwri_cdnPt_nv_V4
    181844215U,	// POST_STwri_nv_V4
    1524225U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4
    1528327U,	// RESTORE_DEALLOC_RET_JMP_V4
    1532417U,	// SAVE_REGISTERS_CALL_V4
    2427503110U,	// SETBIT
    2427503110U,	// SETBIT_31
    90630U,	// SI_to_SXTHI_asrh
    2149022278U,	// STb_GP
    2149022278U,	// STb_GP_V4
    2331476507U,	// STb_GP_cNotPt_V4
    2599911963U,	// STb_GP_cNotPt_nv_V4
    2331476591U,	// STb_GP_cPt_V4
    2599912047U,	// STb_GP_cPt_nv_V4
    2331480603U,	// STb_GP_cdnNotPt_V4
    2599916059U,	// STb_GP_cdnNotPt_nv_V4
    2331480687U,	// STb_GP_cdnPt_V4
    2599916143U,	// STb_GP_cdnPt_nv_V4
    2417457734U,	// STb_GP_nv_V4
    2149022285U,	// STd_GP
    2149022285U,	// STd_GP_V4
    2331484699U,	// STd_GP_cNotPt_V4
    2331484783U,	// STd_GP_cPt_V4
    2331488795U,	// STd_GP_cdnNotPt_V4
    2331488879U,	// STd_GP_cdnPt_V4
    2149022305U,	// STh_GP
    2149022305U,	// STh_GP_V4
    2331492891U,	// STh_GP_cNotPt_V4
    2599928347U,	// STh_GP_cNotPt_nv_V4
    2331492975U,	// STh_GP_cPt_V4
    2599928431U,	// STh_GP_cPt_nv_V4
    2331496987U,	// STh_GP_cdnNotPt_V4
    2599932443U,	// STh_GP_cdnNotPt_nv_V4
    2331497071U,	// STh_GP_cdnPt_V4
    2599932527U,	// STh_GP_cdnPt_nv_V4
    2417457761U,	// STh_GP_nv_V4
    2186770043U,	// STrib
    2765613638U,	// STrib_GP
    2765613638U,	// STrib_GP_V4
    2518123035U,	// STrib_GP_cNotPt_V4
    2518123035U,	// STrib_GP_cNotPt_nv_V4
    2518123119U,	// STrib_GP_cPt_V4
    2518123119U,	// STrib_GP_cPt_nv_V4
    2518127131U,	// STrib_GP_cdnNotPt_V4
    2518127131U,	// STrib_GP_cdnNotPt_nv_V4
    2518127215U,	// STrib_GP_cdnPt_V4
    2518127215U,	// STrib_GP_cdnPt_nv_V4
    2765613638U,	// STrib_GP_nv_V4
    2149022246U,	// STrib_abs_V4
    22540827U,	// STrib_abs_cNotPt_V4
    181924379U,	// STrib_abs_cNotPt_nv_V4
    22540911U,	// STrib_abs_cPt_V4
    181924463U,	// STrib_abs_cPt_nv_V4
    22544923U,	// STrib_abs_cdnNotPt_V4
    181928475U,	// STrib_abs_cdnNotPt_nv_V4
    22545007U,	// STrib_abs_cdnPt_V4
    181928559U,	// STrib_abs_cdnPt_nv_V4
    2417457702U,	// STrib_abs_nv_V4
    1577595U,	// STrib_abs_set_V4
    1581691U,	// STrib_abs_setimm_V4
    2784412187U,	// STrib_cNotPt
    2784412187U,	// STrib_cNotPt_nv_V4
    2784412271U,	// STrib_cPt
    2784412271U,	// STrib_cPt_nv_V4
    2784416283U,	// STrib_cdnNotPt_V4
    2784416283U,	// STrib_cdnNotPt_nv_V4
    2784416367U,	// STrib_cdnPt_V4
    2784416367U,	// STrib_cdnPt_nv_V4
    186008187U,	// STrib_imm_V4
    126022U,	// STrib_imm_abs_V4
    22557211U,	// STrib_imm_abs_cNotPt_V4
    181940763U,	// STrib_imm_abs_cNotPt_nv_V4
    22557295U,	// STrib_imm_abs_cPt_V4
    181940847U,	// STrib_imm_abs_cPt_nv_V4
    22561307U,	// STrib_imm_abs_cdnNotPt_V4
    181944859U,	// STrib_imm_abs_cdnNotPt_nv_V4
    22561391U,	// STrib_imm_abs_cdnPt_V4
    181944943U,	// STrib_imm_abs_cdnPt_nv_V4
    1596486U,	// STrib_imm_abs_nv_V4
    1612104219U,	// STrib_imm_cNotPt_V4
    1612104303U,	// STrib_imm_cPt_V4
    1612108315U,	// STrib_imm_cdnNotPt_V4
    1612108399U,	// STrib_imm_cdnPt_V4
    188244603U,	// STrib_ind_lo_V4
    2331394683U,	// STrib_indexed
    1612104219U,	// STrib_indexed_cNotPt
    1612104219U,	// STrib_indexed_cNotPt_nv_V4
    1612104303U,	// STrib_indexed_cPt
    1612104303U,	// STrib_indexed_cPt_nv_V4
    1612108315U,	// STrib_indexed_cdnNotPt_V4
    1612108315U,	// STrib_indexed_cdnNotPt_nv_V4
    1612108399U,	// STrib_indexed_cdnPt_V4
    1612108399U,	// STrib_indexed_cdnPt_nv_V4
    2599830139U,	// STrib_indexed_nv_V4
    1343742587U,	// STrib_indexed_shl_V4
    269926939U,	// STrib_indexed_shl_cNotPt_V4
    269926939U,	// STrib_indexed_shl_cNotPt_nv_V4
    269927023U,	// STrib_indexed_shl_cPt_V4
    269927023U,	// STrib_indexed_shl_cPt_nv_V4
    269931035U,	// STrib_indexed_shl_cdnNotPt_V4
    269931035U,	// STrib_indexed_shl_cdnNotPt_nv_V4
    269931119U,	// STrib_indexed_shl_cdnPt_V4
    269931119U,	// STrib_indexed_shl_cdnPt_nv_V4
    1343742587U,	// STrib_indexed_shl_nv_V4
    2455205499U,	// STrib_nv_V4
    2606260859U,	// STrib_shl_V4
    2606260859U,	// STrib_shl_nv_V4
    2186770049U,	// STrid
    2765613645U,	// STrid_GP
    2765613645U,	// STrid_GP_V4
    2518131227U,	// STrid_GP_cNotPt_V4
    2518131311U,	// STrid_GP_cPt_V4
    2518135323U,	// STrid_GP_cdnNotPt_V4
    2518135407U,	// STrid_GP_cdnPt_V4
    2149022254U,	// STrid_abs_V4
    2331484699U,	// STrid_abs_cNotPt_V4
    2331484783U,	// STrid_abs_cPt_V4
    2331488795U,	// STrid_abs_cdnNotPt_V4
    2331488879U,	// STrid_abs_cdnPt_V4
    1577601U,	// STrid_abs_set_V4
    1581697U,	// STrid_abs_setimm_V4
    2784420379U,	// STrid_cNotPt
    2784420463U,	// STrid_cPt
    2784424475U,	// STrid_cdnNotPt_V4
    2784424559U,	// STrid_cdnPt_V4
    2186770049U,	// STrid_f
    3143131777U,	// STrid_ind_lo_V4
    2331394689U,	// STrid_indexed
    1612112411U,	// STrid_indexed_cNotPt
    1612112495U,	// STrid_indexed_cPt
    1612116507U,	// STrid_indexed_cdnNotPt_V4
    1612116591U,	// STrid_indexed_cdnPt_V4
    2331394689U,	// STrid_indexed_f
    1343742593U,	// STrid_indexed_shl_V4
    269935131U,	// STrid_indexed_shl_cNotPt_V4
    269935215U,	// STrid_indexed_shl_cPt_V4
    269939227U,	// STrid_indexed_shl_cdnNotPt_V4
    269939311U,	// STrid_indexed_shl_cdnPt_V4
    2606260865U,	// STrid_shl_V4
    2186770059U,	// STrih
    2765613665U,	// STrih_GP
    2765613665U,	// STrih_GP_V4
    2518139419U,	// STrih_GP_cNotPt_V4
    2518139419U,	// STrih_GP_cNotPt_nv_V4
    2518139503U,	// STrih_GP_cPt_V4
    2518139503U,	// STrih_GP_cPt_nv_V4
    2518143515U,	// STrih_GP_cdnNotPt_V4
    2518143515U,	// STrih_GP_cdnNotPt_nv_V4
    2518143599U,	// STrih_GP_cdnPt_V4
    2518143599U,	// STrih_GP_cdnPt_nv_V4
    2765613665U,	// STrih_GP_nv_V4
    2149022262U,	// STrih_abs_V4
    22573595U,	// STrih_abs_cNotPt_V4
    181957147U,	// STrih_abs_cNotPt_nv_V4
    22573679U,	// STrih_abs_cPt_V4
    181957231U,	// STrih_abs_cPt_nv_V4
    22577691U,	// STrih_abs_cdnNotPt_V4
    181961243U,	// STrih_abs_cdnNotPt_nv_V4
    22577775U,	// STrih_abs_cdnPt_V4
    181961327U,	// STrih_abs_cdnPt_nv_V4
    2417457718U,	// STrih_abs_nv_V4
    1577611U,	// STrih_abs_set_V4
    1581707U,	// STrih_abs_setimm_V4
    2784428571U,	// STrih_cNotPt
    2784428571U,	// STrih_cNotPt_nv_V4
    2784428655U,	// STrih_cPt
    2784428655U,	// STrih_cPt_nv_V4
    2784432667U,	// STrih_cdnNotPt_V4
    2784432667U,	// STrih_cdnNotPt_nv_V4
    2784432751U,	// STrih_cdnPt_V4
    2784432751U,	// STrih_cdnPt_nv_V4
    186008203U,	// STrih_imm_V4
    126049U,	// STrih_imm_abs_V4
    22581787U,	// STrih_imm_abs_cNotPt_V4
    181965339U,	// STrih_imm_abs_cNotPt_nv_V4
    22581871U,	// STrih_imm_abs_cPt_V4
    181965423U,	// STrih_imm_abs_cPt_nv_V4
    22585883U,	// STrih_imm_abs_cdnNotPt_V4
    181969435U,	// STrih_imm_abs_cdnNotPt_nv_V4
    22585967U,	// STrih_imm_abs_cdnPt_V4
    181969519U,	// STrih_imm_abs_cdnPt_nv_V4
    1596513U,	// STrih_imm_abs_nv_V4
    1612120603U,	// STrih_imm_cNotPt_V4
    1612120687U,	// STrih_imm_cPt_V4
    1612124699U,	// STrih_imm_cdnNotPt_V4
    1612124783U,	// STrih_imm_cdnPt_V4
    188244619U,	// STrih_ind_lo_V4
    2331394699U,	// STrih_indexed
    1612120603U,	// STrih_indexed_cNotPt
    1612120603U,	// STrih_indexed_cNotPt_nv_V4
    1612120687U,	// STrih_indexed_cPt
    1612120687U,	// STrih_indexed_cPt_nv_V4
    1612124699U,	// STrih_indexed_cdnNotPt_V4
    1612124699U,	// STrih_indexed_cdnNotPt_nv_V4
    1612124783U,	// STrih_indexed_cdnPt_V4
    1612124783U,	// STrih_indexed_cdnPt_nv_V4
    2599830155U,	// STrih_indexed_nv_V4
    1343742603U,	// STrih_indexed_shl_V4
    269943323U,	// STrih_indexed_shl_cNotPt_V4
    269943323U,	// STrih_indexed_shl_cNotPt_nv_V4
    269943407U,	// STrih_indexed_shl_cPt_V4
    269943407U,	// STrih_indexed_shl_cPt_nv_V4
    269947419U,	// STrih_indexed_shl_cdnNotPt_V4
    269947419U,	// STrih_indexed_shl_cdnNotPt_nv_V4
    269947503U,	// STrih_indexed_shl_cdnPt_V4
    269947503U,	// STrih_indexed_shl_cdnPt_nv_V4
    1343742603U,	// STrih_indexed_shl_nv_V4
    2455205515U,	// STrih_nv_V4
    192299659U,	// STrih_offset_ext_V4
    2606260875U,	// STrih_shl_V4
    2606260875U,	// STrih_shl_nv_V4
    2186770167U,	// STriw
    2765613672U,	// STriw_GP
    2765613672U,	// STriw_GP_V4
    2518200859U,	// STriw_GP_cNotPt_V4
    2518200859U,	// STriw_GP_cNotPt_nv_V4
    2518200943U,	// STriw_GP_cPt_V4
    2518200943U,	// STriw_GP_cPt_nv_V4
    2518204955U,	// STriw_GP_cdnNotPt_V4
    2518204955U,	// STriw_GP_cdnNotPt_nv_V4
    2518205039U,	// STriw_GP_cdnPt_V4
    2518205039U,	// STriw_GP_cdnPt_nv_V4
    2765613672U,	// STriw_GP_nv_V4
    2149022270U,	// STriw_abs_V4
    22598171U,	// STriw_abs_cNotPt_V4
    181981723U,	// STriw_abs_cNotPt_nv_V4
    22598255U,	// STriw_abs_cPt_V4
    181981807U,	// STriw_abs_cPt_nv_V4
    22602267U,	// STriw_abs_cdnNotPt_V4
    181985819U,	// STriw_abs_cdnNotPt_nv_V4
    22602351U,	// STriw_abs_cdnPt_V4
    181985903U,	// STriw_abs_cdnPt_nv_V4
    2417457726U,	// STriw_abs_nv_V4
    1577719U,	// STriw_abs_set_V4
    1581815U,	// STriw_abs_setimm_V4
    2784436763U,	// STriw_cNotPt
    2784436763U,	// STriw_cNotPt_nv_V4
    2784436847U,	// STriw_cPt
    2784436847U,	// STriw_cPt_nv_V4
    2784440859U,	// STriw_cdnNotPt_V4
    2784440859U,	// STriw_cdnNotPt_nv_V4
    2784440943U,	// STriw_cdnPt_V4
    2784440943U,	// STriw_cdnPt_nv_V4
    2186770167U,	// STriw_f
    186008311U,	// STriw_imm_V4
    126056U,	// STriw_imm_abs_V4
    22606363U,	// STriw_imm_abs_cNotPt_V4
    181989915U,	// STriw_imm_abs_cNotPt_nv_V4
    22606447U,	// STriw_imm_abs_cPt_V4
    181989999U,	// STriw_imm_abs_cPt_nv_V4
    22610459U,	// STriw_imm_abs_cdnNotPt_V4
    181994011U,	// STriw_imm_abs_cdnNotPt_nv_V4
    22610543U,	// STriw_imm_abs_cdnPt_V4
    181994095U,	// STriw_imm_abs_cdnPt_nv_V4
    1596520U,	// STriw_imm_abs_nv_V4
    1612128795U,	// STriw_imm_cNotPt_V4
    1612128879U,	// STriw_imm_cPt_V4
    1612132891U,	// STriw_imm_cdnNotPt_V4
    1612132975U,	// STriw_imm_cdnPt_V4
    188244727U,	// STriw_ind_lo_V4
    2331394807U,	// STriw_indexed
    1612128795U,	// STriw_indexed_cNotPt
    1612128795U,	// STriw_indexed_cNotPt_nv_V4
    1612128879U,	// STriw_indexed_cPt
    1612128879U,	// STriw_indexed_cPt_nv_V4
    1612132891U,	// STriw_indexed_cdnNotPt_V4
    1612132891U,	// STriw_indexed_cdnNotPt_nv_V4
    1612132975U,	// STriw_indexed_cdnPt_V4
    1612132975U,	// STriw_indexed_cdnPt_nv_V4
    2331394807U,	// STriw_indexed_f
    2599830263U,	// STriw_indexed_nv_V4
    1343742711U,	// STriw_indexed_shl_V4
    269951515U,	// STriw_indexed_shl_cNotPt_V4
    269951515U,	// STriw_indexed_shl_cNotPt_nv_V4
    269951599U,	// STriw_indexed_shl_cPt_V4
    269951599U,	// STriw_indexed_shl_cPt_nv_V4
    269955611U,	// STriw_indexed_shl_cdnNotPt_V4
    269955611U,	// STriw_indexed_shl_cdnNotPt_nv_V4
    269955695U,	// STriw_indexed_shl_cdnPt_V4
    269955695U,	// STriw_indexed_shl_cdnPt_nv_V4
    1343742711U,	// STriw_indexed_shl_nv_V4
    2455205623U,	// STriw_nv_V4
    192299767U,	// STriw_offset_ext_V4
    400U,	// STriw_pred
    400U,	// STriw_pred_V4
    2606260983U,	// STriw_shl_V4
    2606260983U,	// STriw_shl_nv_V4
    2149022312U,	// STw_GP
    2149022312U,	// STw_GP_V4
    2331554331U,	// STw_GP_cNotPt_V4
    2599989787U,	// STw_GP_cNotPt_nv_V4
    2331554415U,	// STw_GP_cPt_V4
    2599989871U,	// STw_GP_cPt_nv_V4
    2331558427U,	// STw_GP_cdnNotPt_V4
    2599993883U,	// STw_GP_cdnNotPt_nv_V4
    2331558511U,	// STw_GP_cdnPt_V4
    2599993967U,	// STw_GP_cdnPt_nv_V4
    2417457768U,	// STw_GP_nv_V4
    2160460294U,	// SUB64_rr
    2160464390U,	// SUB_ri
    2160460294U,	// SUB_rr
    192947227U,	// SUB_rr_cNotPt
    192947311U,	// SUB_rr_cPt
    192951323U,	// SUB_rr_cdnNotPt
    192951407U,	// SUB_rr_cdnPt
    4592134U,	// SUBi_ASLri_V4
    6689286U,	// SUBi_LSRri_V4
    1621930502U,	// SUBri_acc
    1892463110U,	// SUBrr_acc
    430598U,	// SXTB
    195044379U,	// SXTB_cNotPt_V4
    195044463U,	// SXTB_cPt_V4
    195048475U,	// SXTB_cdnNotPt_V4
    195048559U,	// SXTB_cdnPt_V4
    434694U,	// SXTH
    197141531U,	// SXTH_cNotPt_V4
    197141615U,	// SXTH_cPt_V4
    197145627U,	// SXTH_cdnNotPt_V4
    197145711U,	// SXTH_cdnPt_V4
    438790U,	// SXTW
    1643028U,	// TCRETURNR
    1643015U,	// TCRETURNtext
    1643015U,	// TCRETURNtg
    21029382U,	// TFCR
    21029382U,	// TFR
    21029382U,	// TFR64
    199238683U,	// TFR64_cNotPt
    199238767U,	// TFR64_cPt
    451078U,	// TFRI
    451078U,	// TFRI64
    2178490886U,	// TFRI_V4
    201335835U,	// TFRI_cNotPt
    3156223009U,	// TFRI_cNotPt_V4
    2350916635U,	// TFRI_cNotPt_f
    201335919U,	// TFRI_cPt
    3156223111U,	// TFRI_cPt_V4
    2350916719U,	// TFRI_cPt_f
    201339931U,	// TFRI_cdnNotPt
    3156227105U,	// TFRI_cdnNotPt_V4
    201340015U,	// TFRI_cdnPt
    3156227207U,	// TFRI_cdnPt_V4
    2149130758U,	// TFRI_f
    21029382U,	// TFR_64
    205521414U,	// TFR_FI
    3221225990U,	// TFR_FI_immext_V4
    208212486U,	// TFR_PdFalse
    209773062U,	// TFR_PdRs
    209773062U,	// TFR_RsPd
    199238683U,	// TFR_cNotPt
    199238767U,	// TFR_cPt
    199242779U,	// TFR_cdnNotPt
    199242863U,	// TFR_cdnPt
    400U,	// TFR_condset_ii
    400U,	// TFR_condset_ii_f
    400U,	// TFR_condset_ir
    400U,	// TFR_condset_ir_f
    400U,	// TFR_condset_ri
    400U,	// TFR_condset_ri_f
    400U,	// TFR_condset_rr
    400U,	// TFR_condset_rr64_f
    400U,	// TFR_condset_rr_f
    2427503110U,	// TOGBIT
    2427531782U,	// TOGBIT_31
    1892766214U,	// VALIGN_rrp
    631302U,	// VITPACK_pp
    635398U,	// VMUX_prr64
    1892913670U,	// VSPLICE_rrp
    594438U,	// XOR_pp
    594438U,	// XOR_rr
    594438U,	// XOR_rr64
    211821595U,	// XOR_rr_cNotPt
    211821679U,	// XOR_rr_cPt
    211825691U,	// XOR_rr_cdnNotPt
    211825775U,	// XOR_rr_cdnPt
    913926U,	// XORd_XORdd
    1898852870U,	// XORr_ANDr_NOTr_V4
    1892561414U,	// XORr_ANDrr_V4
    934406U,	// XORr_ORrr_V4
    913926U,	// XORr_XORrr_V4
    598534U,	// ZXTB
    213918747U,	// ZXTB_cNotPt_V4
    213918831U,	// ZXTB_cPt_V4
    213922843U,	// ZXTB_cdnNotPt_V4
    213922927U,	// ZXTB_cdnPt_V4
    602630U,	// ZXTH
    216015899U,	// ZXTH_cNotPt_V4
    216015983U,	// ZXTH_cPt_V4
    216019995U,	// ZXTH_cdnNotPt_V4
    216020079U,	// ZXTH_cdnPt_V4
    647686U,	// fADD64_rr
    688646U,	// fADD_rr
    680454U,	// fMUL64_rr
    721414U,	// fMUL_rr
    684550U,	// fSUB64_rr
    725510U,	// fSUB_rr
    0U
  };

  static const uint16_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// ADD64_rr
    0U,	// ADDASL
    2U,	// ADD_ri
    4U,	// ADD_ri_cNotPt
    4U,	// ADD_ri_cPt
    4U,	// ADD_ri_cdnNotPt
    4U,	// ADD_ri_cdnPt
    0U,	// ADD_rr
    6U,	// ADD_rr_cNotPt
    6U,	// ADD_rr_cPt
    6U,	// ADD_rr_cdnNotPt
    6U,	// ADD_rr_cdnPt
    0U,	// ADDi_ASLri_V4
    0U,	// ADDi_LSRri_V4
    132U,	// ADDi_MPYri_V4
    134U,	// ADDi_MPYrr_V4
    8U,	// ADDr_ADDri_V4
    0U,	// ADDr_MPYir_V4
    266U,	// ADDr_MPYri_V4
    140U,	// ADDr_MPYrr_V4
    8U,	// ADDr_SUBri_V4
    8U,	// ADDri_SUBr_V4
    14U,	// ADDri_acc
    14U,	// ADDrr_acc
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    2U,	// ADJDYNALLOC
    0U,	// ALLOCFRAME
    0U,	// ALL_pp
    0U,	// AND_pnotp
    14U,	// AND_pp
    14U,	// AND_ri
    14U,	// AND_rr
    14U,	// AND_rr64
    0U,	// AND_rr_cNotPt
    0U,	// AND_rr_cPt
    0U,	// AND_rr_cdnNotPt
    0U,	// AND_rr_cdnPt
    14U,	// ANDd_NOTd_V4
    0U,	// ANDi_ASLri_V4
    0U,	// ANDi_LSRri_V4
    14U,	// ANDr_ANDr_NOTr_V4
    14U,	// ANDr_ANDrr_V4
    0U,	// ANDr_ORrr_V4
    0U,	// ANDr_XORrr_V4
    0U,	// ANY_pp
    0U,	// ARGEXTEND
    14U,	// ASL
    0U,	// ASLH
    0U,	// ASLH_cNotPt_V4
    0U,	// ASLH_cPt_V4
    0U,	// ASLH_cdnNotPt_V4
    0U,	// ASLH_cdnPt_V4
    14U,	// ASL_ADD_ri
    14U,	// ASL_ADD_rr
    14U,	// ASL_ADDd_ri
    14U,	// ASL_ADDd_rr
    14U,	// ASL_AND_ri
    14U,	// ASL_AND_rr
    14U,	// ASL_ANDd_ri
    14U,	// ASL_ANDd_rr
    14U,	// ASL_OR_ri
    14U,	// ASL_OR_rr
    14U,	// ASL_ORd_ri
    14U,	// ASL_ORd_rr
    14U,	// ASL_SUB_ri
    14U,	// ASL_SUB_rr
    14U,	// ASL_SUBd_ri
    14U,	// ASL_SUBd_rr
    14U,	// ASL_XOR_ri
    14U,	// ASL_XORd_ri
    14U,	// ASL_rr
    14U,	// ASLd
    14U,	// ASLd_ri
    14U,	// ASLd_rr_xor_V4
    0U,	// ASRH
    0U,	// ASRH_cNotPt_V4
    0U,	// ASRH_cPt_V4
    0U,	// ASRH_cdnNotPt_V4
    0U,	// ASRH_cdnPt_V4
    14U,	// ASR_ADD_ri
    14U,	// ASR_ADD_rr
    14U,	// ASR_ADDd_ri
    14U,	// ASR_ADDd_rr
    14U,	// ASR_AND_ri
    14U,	// ASR_AND_rr
    14U,	// ASR_ANDd_ri
    14U,	// ASR_ANDd_rr
    14U,	// ASR_OR_ri
    14U,	// ASR_OR_rr
    14U,	// ASR_ORd_ri
    14U,	// ASR_ORd_rr
    14U,	// ASR_SUB_ri
    14U,	// ASR_SUB_rr
    14U,	// ASR_SUBd_ri
    14U,	// ASR_SUBd_rr
    14U,	// ASR_ri
    14U,	// ASR_rr
    14U,	// ASRd_ri
    14U,	// ASRd_rr
    0U,	// ASRd_rr_xor_V4
    0U,	// BARRIER
    0U,	// BRCOND
    0U,	// BR_JT
    0U,	// CALL
    0U,	// CALLR
    0U,	// CALLRv3
    0U,	// CALLv3
    14U,	// CLRBIT
    14U,	// CLRBIT_31
    14U,	// CMPEHexagon4rr
    14U,	// CMPEQri
    14U,	// CMPEQrr
    0U,	// CMPGEUri
    0U,	// CMPGEri
    14U,	// CMPGT64rr
    14U,	// CMPGTU64rr
    14U,	// CMPGTUri
    14U,	// CMPGTUrr
    14U,	// CMPGTri
    14U,	// CMPGTrr
    0U,	// CMPLTUrr
    0U,	// CMPLTrr
    14U,	// CMPbEQri_V4
    14U,	// CMPbEQrr_sbsb_V4
    14U,	// CMPbEQrr_ubub_V4
    14U,	// CMPbGTUri_V4
    14U,	// CMPbGTUrr_V4
    0U,	// CMPbGTrr_V4
    14U,	// CMPhEQri_V4
    14U,	// CMPhEQrr_shl_V4
    14U,	// CMPhEQrr_xor_V4
    14U,	// CMPhGTUri_V4
    14U,	// CMPhGTUrr_V4
    0U,	// CMPhGTrr_shl_V4
    14U,	// COMBINE_ii
    14U,	// COMBINE_ir_V4
    14U,	// COMBINE_ri_V4
    14U,	// COMBINE_rr
    0U,	// COMBINE_rr_cNotPt
    0U,	// COMBINE_rr_cPt
    0U,	// COMBINE_rr_cdnNotPt
    0U,	// COMBINE_rr_cdnPt
    0U,	// CONST32
    0U,	// CONST32GP_set
    0U,	// CONST32_Float_Real
    0U,	// CONST32_Int_Real
    0U,	// CONST32_Label
    0U,	// CONST32_set
    0U,	// CONST32_set_jt
    0U,	// CONST64_Float_Real
    0U,	// CONST64_Int_Real
    0U,	// CONVERT_d2df
    0U,	// CONVERT_d2sf
    0U,	// CONVERT_df2d
    0U,	// CONVERT_df2d_nchop
    0U,	// CONVERT_df2sf
    0U,	// CONVERT_df2ud
    0U,	// CONVERT_df2ud_nchop
    0U,	// CONVERT_df2uw
    0U,	// CONVERT_df2uw_nchop
    0U,	// CONVERT_df2w
    0U,	// CONVERT_df2w_nchop
    0U,	// CONVERT_sf2d
    0U,	// CONVERT_sf2d_nchop
    0U,	// CONVERT_sf2df
    0U,	// CONVERT_sf2ud
    0U,	// CONVERT_sf2ud_nchop
    0U,	// CONVERT_sf2uw
    0U,	// CONVERT_sf2uw_nchop
    0U,	// CONVERT_sf2w
    0U,	// CONVERT_sf2w_nchop
    0U,	// CONVERT_ud2df
    0U,	// CONVERT_ud2sf
    0U,	// CONVERT_uw2df
    0U,	// CONVERT_uw2sf
    0U,	// CONVERT_w2df
    0U,	// CONVERT_w2sf
    0U,	// DEALLOCFRAME
    0U,	// DEALLOC_RET_V4
    0U,	// DEALLOC_RET_cNotPt_V4
    0U,	// DEALLOC_RET_cNotdnPnt_V4
    0U,	// DEALLOC_RET_cNotdnPt_V4
    0U,	// DEALLOC_RET_cPt_V4
    0U,	// DEALLOC_RET_cdnPnt_V4
    0U,	// DEALLOC_RET_cdnPt_V4
    0U,	// ENDLOOP0
    0U,	// FCMPOEQ32_rr
    0U,	// FCMPOEQ64_rr
    0U,	// FCMPOGE32_rr
    0U,	// FCMPOGE64_rr
    0U,	// FCMPOGT32_rr
    0U,	// FCMPOGT64_rr
    0U,	// FCMPUEQ32_rr
    0U,	// FCMPUEQ64_rr
    0U,	// FCMPUGE32_rr
    0U,	// FCMPUGE64_rr
    0U,	// FCMPUGT32_rr
    0U,	// FCMPUGT64_rr
    0U,	// FCONST32_nsdata
    6U,	// FMADD_dp
    6U,	// FMADD_sp
    0U,	// FMAX_dp
    0U,	// FMAX_sp
    0U,	// FMIN_dp
    0U,	// FMIN_sp
    0U,	// HEXAGON_A2_abs
    0U,	// HEXAGON_A2_absp
    0U,	// HEXAGON_A2_abssat
    0U,	// HEXAGON_A2_add
    16U,	// HEXAGON_A2_addh_h16_hh
    18U,	// HEXAGON_A2_addh_h16_hl
    16U,	// HEXAGON_A2_addh_h16_lh
    18U,	// HEXAGON_A2_addh_h16_ll
    20U,	// HEXAGON_A2_addh_h16_sat_hh
    22U,	// HEXAGON_A2_addh_h16_sat_hl
    20U,	// HEXAGON_A2_addh_h16_sat_lh
    22U,	// HEXAGON_A2_addh_h16_sat_ll
    24U,	// HEXAGON_A2_addh_l16_hl
    26U,	// HEXAGON_A2_addh_l16_ll
    28U,	// HEXAGON_A2_addh_l16_sat_hl
    30U,	// HEXAGON_A2_addh_l16_sat_ll
    2U,	// HEXAGON_A2_addi
    0U,	// HEXAGON_A2_addp
    384U,	// HEXAGON_A2_addsat
    14U,	// HEXAGON_A2_and
    14U,	// HEXAGON_A2_andir
    14U,	// HEXAGON_A2_andp
    0U,	// HEXAGON_A2_aslh
    0U,	// HEXAGON_A2_asrh
    24U,	// HEXAGON_A2_combine_hh
    26U,	// HEXAGON_A2_combine_hl
    24U,	// HEXAGON_A2_combine_lh
    26U,	// HEXAGON_A2_combine_ll
    14U,	// HEXAGON_A2_combineii
    14U,	// HEXAGON_A2_combinew
    0U,	// HEXAGON_A2_max
    0U,	// HEXAGON_A2_maxu
    0U,	// HEXAGON_A2_min
    0U,	// HEXAGON_A2_minu
    0U,	// HEXAGON_A2_neg
    0U,	// HEXAGON_A2_negp
    0U,	// HEXAGON_A2_negsat
    0U,	// HEXAGON_A2_not
    0U,	// HEXAGON_A2_notp
    14U,	// HEXAGON_A2_or
    14U,	// HEXAGON_A2_orir
    14U,	// HEXAGON_A2_orp
    0U,	// HEXAGON_A2_sat
    0U,	// HEXAGON_A2_satb
    0U,	// HEXAGON_A2_sath
    0U,	// HEXAGON_A2_satub
    0U,	// HEXAGON_A2_satuh
    14U,	// HEXAGON_A2_sub
    16U,	// HEXAGON_A2_subh_h16_hh
    18U,	// HEXAGON_A2_subh_h16_hl
    16U,	// HEXAGON_A2_subh_h16_lh
    18U,	// HEXAGON_A2_subh_h16_ll
    20U,	// HEXAGON_A2_subh_h16_sat_hh
    22U,	// HEXAGON_A2_subh_h16_sat_hl
    20U,	// HEXAGON_A2_subh_h16_sat_lh
    22U,	// HEXAGON_A2_subh_h16_sat_ll
    24U,	// HEXAGON_A2_subh_l16_hl
    26U,	// HEXAGON_A2_subh_l16_ll
    28U,	// HEXAGON_A2_subh_l16_sat_hl
    30U,	// HEXAGON_A2_subh_l16_sat_ll
    14U,	// HEXAGON_A2_subp
    14U,	// HEXAGON_A2_subri
    32U,	// HEXAGON_A2_subsat
    0U,	// HEXAGON_A2_svaddh
    0U,	// HEXAGON_A2_svaddhs
    0U,	// HEXAGON_A2_svadduhs
    0U,	// HEXAGON_A2_svavgh
    0U,	// HEXAGON_A2_svavghs
    0U,	// HEXAGON_A2_svnavgh
    0U,	// HEXAGON_A2_svsubh
    0U,	// HEXAGON_A2_svsubhs
    0U,	// HEXAGON_A2_svsubuhs
    0U,	// HEXAGON_A2_swiz
    0U,	// HEXAGON_A2_sxtb
    0U,	// HEXAGON_A2_sxth
    0U,	// HEXAGON_A2_sxtw
    0U,	// HEXAGON_A2_tfr
    0U,	// HEXAGON_A2_tfrih
    0U,	// HEXAGON_A2_tfril
    0U,	// HEXAGON_A2_tfrp
    0U,	// HEXAGON_A2_tfrpi
    0U,	// HEXAGON_A2_tfrsi
    0U,	// HEXAGON_A2_vabsh
    0U,	// HEXAGON_A2_vabshsat
    0U,	// HEXAGON_A2_vabsw
    0U,	// HEXAGON_A2_vabswsat
    0U,	// HEXAGON_A2_vaddh
    0U,	// HEXAGON_A2_vaddhs
    0U,	// HEXAGON_A2_vaddub
    0U,	// HEXAGON_A2_vaddubs
    0U,	// HEXAGON_A2_vadduhs
    0U,	// HEXAGON_A2_vaddw
    0U,	// HEXAGON_A2_vaddws
    0U,	// HEXAGON_A2_vavgh
    0U,	// HEXAGON_A2_vavghcr
    0U,	// HEXAGON_A2_vavghr
    0U,	// HEXAGON_A2_vavgub
    0U,	// HEXAGON_A2_vavgubr
    0U,	// HEXAGON_A2_vavguh
    0U,	// HEXAGON_A2_vavguhr
    0U,	// HEXAGON_A2_vavguw
    0U,	// HEXAGON_A2_vavguwr
    0U,	// HEXAGON_A2_vavgw
    0U,	// HEXAGON_A2_vavgwcr
    0U,	// HEXAGON_A2_vavgwr
    0U,	// HEXAGON_A2_vcmpbeq
    0U,	// HEXAGON_A2_vcmpbgtu
    0U,	// HEXAGON_A2_vcmpheq
    0U,	// HEXAGON_A2_vcmphgt
    0U,	// HEXAGON_A2_vcmphgtu
    0U,	// HEXAGON_A2_vcmpweq
    0U,	// HEXAGON_A2_vcmpwgt
    0U,	// HEXAGON_A2_vcmpwgtu
    0U,	// HEXAGON_A2_vconj
    0U,	// HEXAGON_A2_vmaxh
    0U,	// HEXAGON_A2_vmaxub
    0U,	// HEXAGON_A2_vmaxuh
    0U,	// HEXAGON_A2_vmaxuw
    0U,	// HEXAGON_A2_vmaxw
    0U,	// HEXAGON_A2_vminh
    0U,	// HEXAGON_A2_vminub
    0U,	// HEXAGON_A2_vminuh
    0U,	// HEXAGON_A2_vminuw
    0U,	// HEXAGON_A2_vminw
    0U,	// HEXAGON_A2_vnavgh
    0U,	// HEXAGON_A2_vnavghcr
    0U,	// HEXAGON_A2_vnavghr
    0U,	// HEXAGON_A2_vnavgw
    0U,	// HEXAGON_A2_vnavgwcr
    0U,	// HEXAGON_A2_vnavgwr
    0U,	// HEXAGON_A2_vraddub
    0U,	// HEXAGON_A2_vraddub_acc
    0U,	// HEXAGON_A2_vrsadub
    0U,	// HEXAGON_A2_vrsadub_acc
    0U,	// HEXAGON_A2_vsubh
    0U,	// HEXAGON_A2_vsubhs
    0U,	// HEXAGON_A2_vsubub
    0U,	// HEXAGON_A2_vsububs
    0U,	// HEXAGON_A2_vsubuhs
    0U,	// HEXAGON_A2_vsubw
    0U,	// HEXAGON_A2_vsubws
    0U,	// HEXAGON_A2_xor
    0U,	// HEXAGON_A2_xorp
    0U,	// HEXAGON_A2_zxtb
    0U,	// HEXAGON_A2_zxth
    14U,	// HEXAGON_A4_cround_ri
    14U,	// HEXAGON_A4_cround_rr
    0U,	// HEXAGON_A4_modwrapu
    14U,	// HEXAGON_A4_round_ri
    32U,	// HEXAGON_A4_round_ri_sat
    14U,	// HEXAGON_A4_round_rr
    32U,	// HEXAGON_A4_round_rr_sat
    0U,	// HEXAGON_A5_vaddhubs
    0U,	// HEXAGON_C2_all8
    14U,	// HEXAGON_C2_and
    0U,	// HEXAGON_C2_andn
    0U,	// HEXAGON_C2_any8
    14U,	// HEXAGON_C2_cmpeq
    14U,	// HEXAGON_C2_cmpeqi
    14U,	// HEXAGON_C2_cmpeqp
    0U,	// HEXAGON_C2_cmpgei
    0U,	// HEXAGON_C2_cmpgeui
    14U,	// HEXAGON_C2_cmpgt
    14U,	// HEXAGON_C2_cmpgti
    14U,	// HEXAGON_C2_cmpgtp
    14U,	// HEXAGON_C2_cmpgtu
    14U,	// HEXAGON_C2_cmpgtui
    14U,	// HEXAGON_C2_cmpgtup
    0U,	// HEXAGON_C2_cmplt
    0U,	// HEXAGON_C2_cmpltu
    0U,	// HEXAGON_C2_mask
    12U,	// HEXAGON_C2_mux
    2314U,	// HEXAGON_C2_muxii
    2314U,	// HEXAGON_C2_muxir
    12U,	// HEXAGON_C2_muxri
    0U,	// HEXAGON_C2_not
    14U,	// HEXAGON_C2_or
    0U,	// HEXAGON_C2_orn
    0U,	// HEXAGON_C2_pxfer_map
    0U,	// HEXAGON_C2_tfrpr
    0U,	// HEXAGON_C2_tfrrp
    0U,	// HEXAGON_C2_vitpack
    0U,	// HEXAGON_C2_vmux
    0U,	// HEXAGON_C2_xor
    0U,	// HEXAGON_C4_fastcorner9
    0U,	// HEXAGON_C4_fastcorner9_not
    0U,	// HEXAGON_F2_conv_d2df
    0U,	// HEXAGON_F2_conv_d2sf
    0U,	// HEXAGON_F2_conv_df2d
    0U,	// HEXAGON_F2_conv_df2d_chop
    0U,	// HEXAGON_F2_conv_df2sf
    0U,	// HEXAGON_F2_conv_df2ud
    0U,	// HEXAGON_F2_conv_df2ud_chop
    0U,	// HEXAGON_F2_conv_df2uw
    0U,	// HEXAGON_F2_conv_df2uw_chop
    0U,	// HEXAGON_F2_conv_df2w
    0U,	// HEXAGON_F2_conv_df2w_chop
    0U,	// HEXAGON_F2_conv_sf2d
    0U,	// HEXAGON_F2_conv_sf2d_chop
    0U,	// HEXAGON_F2_conv_sf2df
    0U,	// HEXAGON_F2_conv_sf2ud
    0U,	// HEXAGON_F2_conv_sf2ud_chop
    0U,	// HEXAGON_F2_conv_sf2uw
    0U,	// HEXAGON_F2_conv_sf2uw_chop
    0U,	// HEXAGON_F2_conv_sf2w
    0U,	// HEXAGON_F2_conv_sf2w_chop
    0U,	// HEXAGON_F2_conv_ud2df
    0U,	// HEXAGON_F2_conv_ud2sf
    0U,	// HEXAGON_F2_conv_uw2df
    0U,	// HEXAGON_F2_conv_uw2sf
    0U,	// HEXAGON_F2_conv_w2df
    0U,	// HEXAGON_F2_conv_w2sf
    0U,	// HEXAGON_F2_dfadd
    0U,	// HEXAGON_F2_dfclass
    0U,	// HEXAGON_F2_dfcmpeq
    0U,	// HEXAGON_F2_dfcmpge
    0U,	// HEXAGON_F2_dfcmpgt
    0U,	// HEXAGON_F2_dfcmpuo
    0U,	// HEXAGON_F2_dffixupd
    0U,	// HEXAGON_F2_dffixupn
    0U,	// HEXAGON_F2_dffixupr
    0U,	// HEXAGON_F2_dffma
    512U,	// HEXAGON_F2_dffma_lib
    646U,	// HEXAGON_F2_dffma_sc
    0U,	// HEXAGON_F2_dffms
    0U,	// HEXAGON_F2_dffms_lib
    0U,	// HEXAGON_F2_dfimm_n
    0U,	// HEXAGON_F2_dfimm_p
    0U,	// HEXAGON_F2_dfmax
    0U,	// HEXAGON_F2_dfmin
    0U,	// HEXAGON_F2_dfmpy
    0U,	// HEXAGON_F2_dfsub
    0U,	// HEXAGON_F2_sfadd
    0U,	// HEXAGON_F2_sfclass
    0U,	// HEXAGON_F2_sfcmpeq
    0U,	// HEXAGON_F2_sfcmpge
    0U,	// HEXAGON_F2_sfcmpgt
    0U,	// HEXAGON_F2_sfcmpuo
    0U,	// HEXAGON_F2_sffixupd
    0U,	// HEXAGON_F2_sffixupn
    0U,	// HEXAGON_F2_sffixupr
    0U,	// HEXAGON_F2_sffma
    512U,	// HEXAGON_F2_sffma_lib
    646U,	// HEXAGON_F2_sffma_sc
    0U,	// HEXAGON_F2_sffms
    0U,	// HEXAGON_F2_sffms_lib
    0U,	// HEXAGON_F2_sfimm_n
    0U,	// HEXAGON_F2_sfimm_p
    0U,	// HEXAGON_F2_sfmax
    0U,	// HEXAGON_F2_sfmin
    0U,	// HEXAGON_F2_sfmpy
    0U,	// HEXAGON_F2_sfsub
    14U,	// HEXAGON_M2_acci
    14U,	// HEXAGON_M2_accii
    0U,	// HEXAGON_M2_cmaci_s0
    0U,	// HEXAGON_M2_cmacr_s0
    0U,	// HEXAGON_M2_cmacs_s0
    0U,	// HEXAGON_M2_cmacs_s1
    0U,	// HEXAGON_M2_cmacsc_s0
    0U,	// HEXAGON_M2_cmacsc_s1
    0U,	// HEXAGON_M2_cmpyi_s0
    0U,	// HEXAGON_M2_cmpyr_s0
    0U,	// HEXAGON_M2_cmpyrs_s0
    0U,	// HEXAGON_M2_cmpyrs_s1
    0U,	// HEXAGON_M2_cmpyrsc_s0
    0U,	// HEXAGON_M2_cmpyrsc_s1
    0U,	// HEXAGON_M2_cmpys_s0
    0U,	// HEXAGON_M2_cmpys_s1
    0U,	// HEXAGON_M2_cmpysc_s0
    0U,	// HEXAGON_M2_cmpysc_s1
    0U,	// HEXAGON_M2_cnacs_s0
    0U,	// HEXAGON_M2_cnacs_s1
    0U,	// HEXAGON_M2_cnacsc_s0
    0U,	// HEXAGON_M2_cnacsc_s1
    14U,	// HEXAGON_M2_dpmpyss_acc_s0
    14U,	// HEXAGON_M2_dpmpyss_nac_s0
    34U,	// HEXAGON_M2_dpmpyss_rnd_s0
    14U,	// HEXAGON_M2_dpmpyss_s0
    14U,	// HEXAGON_M2_dpmpyuu_acc_s0
    14U,	// HEXAGON_M2_dpmpyuu_nac_s0
    14U,	// HEXAGON_M2_dpmpyuu_s0
    36U,	// HEXAGON_M2_hmmpyh_rs1
    38U,	// HEXAGON_M2_hmmpyl_rs1
    14U,	// HEXAGON_M2_maci
    0U,	// HEXAGON_M2_macsin
    14U,	// HEXAGON_M2_macsip
    0U,	// HEXAGON_M2_mmachs_rs0
    0U,	// HEXAGON_M2_mmachs_rs1
    0U,	// HEXAGON_M2_mmachs_s0
    0U,	// HEXAGON_M2_mmachs_s1
    0U,	// HEXAGON_M2_mmacls_rs0
    0U,	// HEXAGON_M2_mmacls_rs1
    0U,	// HEXAGON_M2_mmacls_s0
    0U,	// HEXAGON_M2_mmacls_s1
    0U,	// HEXAGON_M2_mmacuhs_rs0
    0U,	// HEXAGON_M2_mmacuhs_rs1
    0U,	// HEXAGON_M2_mmacuhs_s0
    0U,	// HEXAGON_M2_mmacuhs_s1
    0U,	// HEXAGON_M2_mmaculs_rs0
    0U,	// HEXAGON_M2_mmaculs_rs1
    0U,	// HEXAGON_M2_mmaculs_s0
    0U,	// HEXAGON_M2_mmaculs_s1
    0U,	// HEXAGON_M2_mmpyh_rs0
    0U,	// HEXAGON_M2_mmpyh_rs1
    0U,	// HEXAGON_M2_mmpyh_s0
    0U,	// HEXAGON_M2_mmpyh_s1
    0U,	// HEXAGON_M2_mmpyl_rs0
    0U,	// HEXAGON_M2_mmpyl_rs1
    0U,	// HEXAGON_M2_mmpyl_s0
    0U,	// HEXAGON_M2_mmpyl_s1
    0U,	// HEXAGON_M2_mmpyuh_rs0
    0U,	// HEXAGON_M2_mmpyuh_rs1
    0U,	// HEXAGON_M2_mmpyuh_s0
    0U,	// HEXAGON_M2_mmpyuh_s1
    0U,	// HEXAGON_M2_mmpyul_rs0
    0U,	// HEXAGON_M2_mmpyul_rs1
    0U,	// HEXAGON_M2_mmpyul_s0
    0U,	// HEXAGON_M2_mmpyul_s1
    24U,	// HEXAGON_M2_mpy_acc_hh_s0
    40U,	// HEXAGON_M2_mpy_acc_hh_s1
    26U,	// HEXAGON_M2_mpy_acc_hl_s0
    42U,	// HEXAGON_M2_mpy_acc_hl_s1
    24U,	// HEXAGON_M2_mpy_acc_lh_s0
    40U,	// HEXAGON_M2_mpy_acc_lh_s1
    26U,	// HEXAGON_M2_mpy_acc_ll_s0
    42U,	// HEXAGON_M2_mpy_acc_ll_s1
    28U,	// HEXAGON_M2_mpy_acc_sat_hh_s0
    44U,	// HEXAGON_M2_mpy_acc_sat_hh_s1
    30U,	// HEXAGON_M2_mpy_acc_sat_hl_s0
    46U,	// HEXAGON_M2_mpy_acc_sat_hl_s1
    28U,	// HEXAGON_M2_mpy_acc_sat_lh_s0
    44U,	// HEXAGON_M2_mpy_acc_sat_lh_s1
    30U,	// HEXAGON_M2_mpy_acc_sat_ll_s0
    46U,	// HEXAGON_M2_mpy_acc_sat_ll_s1
    24U,	// HEXAGON_M2_mpy_hh_s0
    40U,	// HEXAGON_M2_mpy_hh_s1
    26U,	// HEXAGON_M2_mpy_hl_s0
    42U,	// HEXAGON_M2_mpy_hl_s1
    24U,	// HEXAGON_M2_mpy_lh_s0
    40U,	// HEXAGON_M2_mpy_lh_s1
    26U,	// HEXAGON_M2_mpy_ll_s0
    42U,	// HEXAGON_M2_mpy_ll_s1
    24U,	// HEXAGON_M2_mpy_nac_hh_s0
    40U,	// HEXAGON_M2_mpy_nac_hh_s1
    26U,	// HEXAGON_M2_mpy_nac_hl_s0
    42U,	// HEXAGON_M2_mpy_nac_hl_s1
    24U,	// HEXAGON_M2_mpy_nac_lh_s0
    40U,	// HEXAGON_M2_mpy_nac_lh_s1
    26U,	// HEXAGON_M2_mpy_nac_ll_s0
    42U,	// HEXAGON_M2_mpy_nac_ll_s1
    28U,	// HEXAGON_M2_mpy_nac_sat_hh_s0
    44U,	// HEXAGON_M2_mpy_nac_sat_hh_s1
    30U,	// HEXAGON_M2_mpy_nac_sat_hl_s0
    46U,	// HEXAGON_M2_mpy_nac_sat_hl_s1
    28U,	// HEXAGON_M2_mpy_nac_sat_lh_s0
    44U,	// HEXAGON_M2_mpy_nac_sat_lh_s1
    30U,	// HEXAGON_M2_mpy_nac_sat_ll_s0
    46U,	// HEXAGON_M2_mpy_nac_sat_ll_s1
    48U,	// HEXAGON_M2_mpy_rnd_hh_s0
    50U,	// HEXAGON_M2_mpy_rnd_hh_s1
    52U,	// HEXAGON_M2_mpy_rnd_hl_s0
    54U,	// HEXAGON_M2_mpy_rnd_hl_s1
    48U,	// HEXAGON_M2_mpy_rnd_lh_s0
    50U,	// HEXAGON_M2_mpy_rnd_lh_s1
    52U,	// HEXAGON_M2_mpy_rnd_ll_s0
    54U,	// HEXAGON_M2_mpy_rnd_ll_s1
    28U,	// HEXAGON_M2_mpy_sat_hh_s0
    44U,	// HEXAGON_M2_mpy_sat_hh_s1
    30U,	// HEXAGON_M2_mpy_sat_hl_s0
    46U,	// HEXAGON_M2_mpy_sat_hl_s1
    28U,	// HEXAGON_M2_mpy_sat_lh_s0
    44U,	// HEXAGON_M2_mpy_sat_lh_s1
    30U,	// HEXAGON_M2_mpy_sat_ll_s0
    46U,	// HEXAGON_M2_mpy_sat_ll_s1
    56U,	// HEXAGON_M2_mpy_sat_rnd_hh_s0
    36U,	// HEXAGON_M2_mpy_sat_rnd_hh_s1
    58U,	// HEXAGON_M2_mpy_sat_rnd_hl_s0
    38U,	// HEXAGON_M2_mpy_sat_rnd_hl_s1
    56U,	// HEXAGON_M2_mpy_sat_rnd_lh_s0
    36U,	// HEXAGON_M2_mpy_sat_rnd_lh_s1
    58U,	// HEXAGON_M2_mpy_sat_rnd_ll_s0
    38U,	// HEXAGON_M2_mpy_sat_rnd_ll_s1
    14U,	// HEXAGON_M2_mpy_up
    24U,	// HEXAGON_M2_mpyd_acc_hh_s0
    40U,	// HEXAGON_M2_mpyd_acc_hh_s1
    26U,	// HEXAGON_M2_mpyd_acc_hl_s0
    42U,	// HEXAGON_M2_mpyd_acc_hl_s1
    24U,	// HEXAGON_M2_mpyd_acc_lh_s0
    40U,	// HEXAGON_M2_mpyd_acc_lh_s1
    26U,	// HEXAGON_M2_mpyd_acc_ll_s0
    42U,	// HEXAGON_M2_mpyd_acc_ll_s1
    24U,	// HEXAGON_M2_mpyd_hh_s0
    40U,	// HEXAGON_M2_mpyd_hh_s1
    26U,	// HEXAGON_M2_mpyd_hl_s0
    42U,	// HEXAGON_M2_mpyd_hl_s1
    24U,	// HEXAGON_M2_mpyd_lh_s0
    40U,	// HEXAGON_M2_mpyd_lh_s1
    26U,	// HEXAGON_M2_mpyd_ll_s0
    42U,	// HEXAGON_M2_mpyd_ll_s1
    24U,	// HEXAGON_M2_mpyd_nac_hh_s0
    40U,	// HEXAGON_M2_mpyd_nac_hh_s1
    26U,	// HEXAGON_M2_mpyd_nac_hl_s0
    42U,	// HEXAGON_M2_mpyd_nac_hl_s1
    24U,	// HEXAGON_M2_mpyd_nac_lh_s0
    40U,	// HEXAGON_M2_mpyd_nac_lh_s1
    26U,	// HEXAGON_M2_mpyd_nac_ll_s0
    42U,	// HEXAGON_M2_mpyd_nac_ll_s1
    48U,	// HEXAGON_M2_mpyd_rnd_hh_s0
    50U,	// HEXAGON_M2_mpyd_rnd_hh_s1
    52U,	// HEXAGON_M2_mpyd_rnd_hl_s0
    54U,	// HEXAGON_M2_mpyd_rnd_hl_s1
    48U,	// HEXAGON_M2_mpyd_rnd_lh_s0
    50U,	// HEXAGON_M2_mpyd_rnd_lh_s1
    52U,	// HEXAGON_M2_mpyd_rnd_ll_s0
    54U,	// HEXAGON_M2_mpyd_rnd_ll_s1
    14U,	// HEXAGON_M2_mpyi
    24U,	// HEXAGON_M2_mpyu_acc_hh_s0
    40U,	// HEXAGON_M2_mpyu_acc_hh_s1
    26U,	// HEXAGON_M2_mpyu_acc_hl_s0
    42U,	// HEXAGON_M2_mpyu_acc_hl_s1
    24U,	// HEXAGON_M2_mpyu_acc_lh_s0
    40U,	// HEXAGON_M2_mpyu_acc_lh_s1
    26U,	// HEXAGON_M2_mpyu_acc_ll_s0
    42U,	// HEXAGON_M2_mpyu_acc_ll_s1
    24U,	// HEXAGON_M2_mpyu_hh_s0
    40U,	// HEXAGON_M2_mpyu_hh_s1
    26U,	// HEXAGON_M2_mpyu_hl_s0
    42U,	// HEXAGON_M2_mpyu_hl_s1
    24U,	// HEXAGON_M2_mpyu_lh_s0
    40U,	// HEXAGON_M2_mpyu_lh_s1
    26U,	// HEXAGON_M2_mpyu_ll_s0
    42U,	// HEXAGON_M2_mpyu_ll_s1
    24U,	// HEXAGON_M2_mpyu_nac_hh_s0
    40U,	// HEXAGON_M2_mpyu_nac_hh_s1
    26U,	// HEXAGON_M2_mpyu_nac_hl_s0
    42U,	// HEXAGON_M2_mpyu_nac_hl_s1
    24U,	// HEXAGON_M2_mpyu_nac_lh_s0
    40U,	// HEXAGON_M2_mpyu_nac_lh_s1
    26U,	// HEXAGON_M2_mpyu_nac_ll_s0
    42U,	// HEXAGON_M2_mpyu_nac_ll_s1
    14U,	// HEXAGON_M2_mpyu_up
    24U,	// HEXAGON_M2_mpyud_acc_hh_s0
    40U,	// HEXAGON_M2_mpyud_acc_hh_s1
    26U,	// HEXAGON_M2_mpyud_acc_hl_s0
    42U,	// HEXAGON_M2_mpyud_acc_hl_s1
    24U,	// HEXAGON_M2_mpyud_acc_lh_s0
    40U,	// HEXAGON_M2_mpyud_acc_lh_s1
    26U,	// HEXAGON_M2_mpyud_acc_ll_s0
    42U,	// HEXAGON_M2_mpyud_acc_ll_s1
    24U,	// HEXAGON_M2_mpyud_hh_s0
    40U,	// HEXAGON_M2_mpyud_hh_s1
    26U,	// HEXAGON_M2_mpyud_hl_s0
    42U,	// HEXAGON_M2_mpyud_hl_s1
    24U,	// HEXAGON_M2_mpyud_lh_s0
    40U,	// HEXAGON_M2_mpyud_lh_s1
    26U,	// HEXAGON_M2_mpyud_ll_s0
    42U,	// HEXAGON_M2_mpyud_ll_s1
    24U,	// HEXAGON_M2_mpyud_nac_hh_s0
    40U,	// HEXAGON_M2_mpyud_nac_hh_s1
    26U,	// HEXAGON_M2_mpyud_nac_hl_s0
    42U,	// HEXAGON_M2_mpyud_nac_hl_s1
    24U,	// HEXAGON_M2_mpyud_nac_lh_s0
    40U,	// HEXAGON_M2_mpyud_nac_lh_s1
    26U,	// HEXAGON_M2_mpyud_nac_ll_s0
    42U,	// HEXAGON_M2_mpyud_nac_ll_s1
    0U,	// HEXAGON_M2_mpyui
    14U,	// HEXAGON_M2_nacci
    14U,	// HEXAGON_M2_naccii
    0U,	// HEXAGON_M2_subacc
    0U,	// HEXAGON_M2_vabsdiffh
    0U,	// HEXAGON_M2_vabsdiffw
    0U,	// HEXAGON_M2_vcmac_s0_sat_i
    0U,	// HEXAGON_M2_vcmac_s0_sat_r
    0U,	// HEXAGON_M2_vcmpy_s0_sat_i
    0U,	// HEXAGON_M2_vcmpy_s0_sat_r
    0U,	// HEXAGON_M2_vcmpy_s1_sat_i
    0U,	// HEXAGON_M2_vcmpy_s1_sat_r
    0U,	// HEXAGON_M2_vdmacs_s0
    0U,	// HEXAGON_M2_vdmacs_s1
    0U,	// HEXAGON_M2_vdmpyrs_s0
    0U,	// HEXAGON_M2_vdmpyrs_s1
    0U,	// HEXAGON_M2_vdmpys_s0
    0U,	// HEXAGON_M2_vdmpys_s1
    0U,	// HEXAGON_M2_vmac2
    0U,	// HEXAGON_M2_vmac2es
    0U,	// HEXAGON_M2_vmac2es_s0
    0U,	// HEXAGON_M2_vmac2es_s1
    0U,	// HEXAGON_M2_vmac2s_s0
    0U,	// HEXAGON_M2_vmac2s_s1
    0U,	// HEXAGON_M2_vmpy2es_s0
    0U,	// HEXAGON_M2_vmpy2es_s1
    0U,	// HEXAGON_M2_vmpy2s_s0
    0U,	// HEXAGON_M2_vmpy2s_s0pack
    0U,	// HEXAGON_M2_vmpy2s_s1
    0U,	// HEXAGON_M2_vmpy2s_s1pack
    0U,	// HEXAGON_M2_vrcmaci_s0
    0U,	// HEXAGON_M2_vrcmaci_s0c
    0U,	// HEXAGON_M2_vrcmacr_s0
    0U,	// HEXAGON_M2_vrcmacr_s0c
    0U,	// HEXAGON_M2_vrcmpyi_s0
    0U,	// HEXAGON_M2_vrcmpyi_s0c
    0U,	// HEXAGON_M2_vrcmpyr_s0
    0U,	// HEXAGON_M2_vrcmpyr_s0c
    0U,	// HEXAGON_M2_vrmac_s0
    0U,	// HEXAGON_M2_vrmpy_s0
    0U,	// HEXAGON_M2_xor_xacc
    14U,	// HEXAGON_M4_and_and
    14U,	// HEXAGON_M4_and_andn
    0U,	// HEXAGON_M4_and_or
    0U,	// HEXAGON_M4_and_xor
    14U,	// HEXAGON_M4_or_and
    14U,	// HEXAGON_M4_or_andn
    14U,	// HEXAGON_M4_or_or
    0U,	// HEXAGON_M4_or_xor
    14U,	// HEXAGON_M4_xor_and
    14U,	// HEXAGON_M4_xor_andn
    0U,	// HEXAGON_M4_xor_or
    0U,	// HEXAGON_M5_vdmacbsu
    0U,	// HEXAGON_M5_vdmpybsu
    0U,	// HEXAGON_M5_vmacbsu
    0U,	// HEXAGON_M5_vmacbuu
    0U,	// HEXAGON_M5_vmpybsu
    0U,	// HEXAGON_M5_vmpybuu
    0U,	// HEXAGON_M5_vrmacbsu
    0U,	// HEXAGON_M5_vrmacbuu
    0U,	// HEXAGON_M5_vrmpybsu
    0U,	// HEXAGON_M5_vrmpybuu
    0U,	// HEXAGON_S2_addasl_rrri
    14U,	// HEXAGON_S2_asl_i_p
    14U,	// HEXAGON_S2_asl_i_p_acc
    14U,	// HEXAGON_S2_asl_i_p_and
    14U,	// HEXAGON_S2_asl_i_p_nac
    14U,	// HEXAGON_S2_asl_i_p_or
    14U,	// HEXAGON_S2_asl_i_p_xacc
    14U,	// HEXAGON_S2_asl_i_r
    14U,	// HEXAGON_S2_asl_i_r_acc
    14U,	// HEXAGON_S2_asl_i_r_and
    14U,	// HEXAGON_S2_asl_i_r_nac
    14U,	// HEXAGON_S2_asl_i_r_or
    32U,	// HEXAGON_S2_asl_i_r_sat
    14U,	// HEXAGON_S2_asl_i_r_xacc
    0U,	// HEXAGON_S2_asl_i_vh
    0U,	// HEXAGON_S2_asl_i_vw
    14U,	// HEXAGON_S2_asl_r_p
    14U,	// HEXAGON_S2_asl_r_p_acc
    14U,	// HEXAGON_S2_asl_r_p_and
    14U,	// HEXAGON_S2_asl_r_p_nac
    14U,	// HEXAGON_S2_asl_r_p_or
    14U,	// HEXAGON_S2_asl_r_r
    14U,	// HEXAGON_S2_asl_r_r_acc
    14U,	// HEXAGON_S2_asl_r_r_and
    14U,	// HEXAGON_S2_asl_r_r_nac
    14U,	// HEXAGON_S2_asl_r_r_or
    32U,	// HEXAGON_S2_asl_r_r_sat
    0U,	// HEXAGON_S2_asl_r_vh
    0U,	// HEXAGON_S2_asl_r_vw
    14U,	// HEXAGON_S2_asr_i_p
    14U,	// HEXAGON_S2_asr_i_p_acc
    14U,	// HEXAGON_S2_asr_i_p_and
    14U,	// HEXAGON_S2_asr_i_p_nac
    14U,	// HEXAGON_S2_asr_i_p_or
    14U,	// HEXAGON_S2_asr_i_p_rnd
    0U,	// HEXAGON_S2_asr_i_p_rnd_goodsyntax
    14U,	// HEXAGON_S2_asr_i_r
    14U,	// HEXAGON_S2_asr_i_r_acc
    14U,	// HEXAGON_S2_asr_i_r_and
    14U,	// HEXAGON_S2_asr_i_r_nac
    14U,	// HEXAGON_S2_asr_i_r_or
    34U,	// HEXAGON_S2_asr_i_r_rnd
    0U,	// HEXAGON_S2_asr_i_r_rnd_goodsyntax
    14U,	// HEXAGON_S2_asr_i_svw_trun
    14U,	// HEXAGON_S2_asr_i_vh
    14U,	// HEXAGON_S2_asr_i_vw
    14U,	// HEXAGON_S2_asr_r_p
    14U,	// HEXAGON_S2_asr_r_p_acc
    14U,	// HEXAGON_S2_asr_r_p_and
    14U,	// HEXAGON_S2_asr_r_p_nac
    14U,	// HEXAGON_S2_asr_r_p_or
    14U,	// HEXAGON_S2_asr_r_r
    14U,	// HEXAGON_S2_asr_r_r_acc
    14U,	// HEXAGON_S2_asr_r_r_and
    14U,	// HEXAGON_S2_asr_r_r_nac
    14U,	// HEXAGON_S2_asr_r_r_or
    32U,	// HEXAGON_S2_asr_r_r_sat
    14U,	// HEXAGON_S2_asr_r_svw_trun
    14U,	// HEXAGON_S2_asr_r_vh
    14U,	// HEXAGON_S2_asr_r_vw
    0U,	// HEXAGON_S2_cl0
    0U,	// HEXAGON_S2_cl0p
    0U,	// HEXAGON_S2_cl1
    0U,	// HEXAGON_S2_cl1p
    0U,	// HEXAGON_S2_clb
    0U,	// HEXAGON_S2_clbnorm
    0U,	// HEXAGON_S2_clbp
    14U,	// HEXAGON_S2_clrbit_i
    14U,	// HEXAGON_S2_clrbit_r
    0U,	// HEXAGON_S2_ct0
    0U,	// HEXAGON_S2_ct1
    2314U,	// HEXAGON_S2_extractu
    14U,	// HEXAGON_S2_extractu_rp
    2314U,	// HEXAGON_S2_extractup
    14U,	// HEXAGON_S2_extractup_rp
    0U,	// HEXAGON_S2_lsl_r_p
    0U,	// HEXAGON_S2_lsl_r_p_acc
    0U,	// HEXAGON_S2_lsl_r_p_and
    0U,	// HEXAGON_S2_lsl_r_p_nac
    0U,	// HEXAGON_S2_lsl_r_p_or
    0U,	// HEXAGON_S2_lsl_r_r
    0U,	// HEXAGON_S2_lsl_r_r_acc
    0U,	// HEXAGON_S2_lsl_r_r_and
    0U,	// HEXAGON_S2_lsl_r_r_nac
    0U,	// HEXAGON_S2_lsl_r_r_or
    0U,	// HEXAGON_S2_lsl_r_vh
    0U,	// HEXAGON_S2_lsl_r_vw
    14U,	// HEXAGON_S2_lsr_i_p
    14U,	// HEXAGON_S2_lsr_i_p_acc
    14U,	// HEXAGON_S2_lsr_i_p_and
    14U,	// HEXAGON_S2_lsr_i_p_nac
    14U,	// HEXAGON_S2_lsr_i_p_or
    14U,	// HEXAGON_S2_lsr_i_p_xacc
    14U,	// HEXAGON_S2_lsr_i_r
    14U,	// HEXAGON_S2_lsr_i_r_acc
    14U,	// HEXAGON_S2_lsr_i_r_and
    14U,	// HEXAGON_S2_lsr_i_r_nac
    14U,	// HEXAGON_S2_lsr_i_r_or
    14U,	// HEXAGON_S2_lsr_i_r_xacc
    0U,	// HEXAGON_S2_lsr_i_vh
    0U,	// HEXAGON_S2_lsr_i_vw
    14U,	// HEXAGON_S2_lsr_r_p
    14U,	// HEXAGON_S2_lsr_r_p_acc
    14U,	// HEXAGON_S2_lsr_r_p_and
    14U,	// HEXAGON_S2_lsr_r_p_nac
    14U,	// HEXAGON_S2_lsr_r_p_or
    14U,	// HEXAGON_S2_lsr_r_r
    14U,	// HEXAGON_S2_lsr_r_r_acc
    14U,	// HEXAGON_S2_lsr_r_r_and
    14U,	// HEXAGON_S2_lsr_r_r_nac
    14U,	// HEXAGON_S2_lsr_r_r_or
    0U,	// HEXAGON_S2_lsr_r_vh
    0U,	// HEXAGON_S2_lsr_r_vw
    0U,	// HEXAGON_S2_packhl
    0U,	// HEXAGON_S2_parityp
    14U,	// HEXAGON_S2_setbit_i
    14U,	// HEXAGON_S2_setbit_r
    0U,	// HEXAGON_S2_shuffeb
    0U,	// HEXAGON_S2_shuffeh
    0U,	// HEXAGON_S2_shuffob
    0U,	// HEXAGON_S2_shuffoh
    0U,	// HEXAGON_S2_svsathb
    0U,	// HEXAGON_S2_svsathub
    14U,	// HEXAGON_S2_togglebit_i
    14U,	// HEXAGON_S2_togglebit_r
    14U,	// HEXAGON_S2_tstbit_i
    14U,	// HEXAGON_S2_tstbit_r
    14U,	// HEXAGON_S2_valignib
    14U,	// HEXAGON_S2_valignrb
    0U,	// HEXAGON_S2_vcrotate
    0U,	// HEXAGON_S2_vrndpackwh
    0U,	// HEXAGON_S2_vrndpackwhs
    0U,	// HEXAGON_S2_vsathb
    0U,	// HEXAGON_S2_vsathb_nopack
    0U,	// HEXAGON_S2_vsathub
    0U,	// HEXAGON_S2_vsathub_nopack
    0U,	// HEXAGON_S2_vsatwh
    0U,	// HEXAGON_S2_vsatwh_nopack
    0U,	// HEXAGON_S2_vsatwuh
    0U,	// HEXAGON_S2_vsatwuh_nopack
    0U,	// HEXAGON_S2_vsplatrb
    0U,	// HEXAGON_S2_vsplatrh
    0U,	// HEXAGON_S2_vsxtbh
    0U,	// HEXAGON_S2_vsxthw
    0U,	// HEXAGON_S2_vtrunehb
    0U,	// HEXAGON_S2_vtrunewh
    0U,	// HEXAGON_S2_vtrunohb
    0U,	// HEXAGON_S2_vtrunowh
    0U,	// HEXAGON_S2_vzxtbh
    0U,	// HEXAGON_S2_vzxthw
    14U,	// HEXAGON_S4_or_andi
    132U,	// HEXAGON_S4_or_andix
    14U,	// HEXAGON_S4_or_ori
    0U,	// HEXAGON_S5_asrhub_rnd_sat_goodsyntax
    0U,	// HEXAGON_S5_asrhub_sat
    0U,	// HEXAGON_S5_popcountp
    34U,	// HEXAGON_S5_vasrhrnd_goodsyntax
    60U,	// HEXAGON_circ_ldd
    0U,	// HI
    0U,	// HI_jt
    0U,	// HI_label
    0U,	// HIi
    0U,	// Hexagon_A2_addpsat
    0U,	// Hexagon_A2_addsp
    0U,	// Hexagon_A2_maxp
    0U,	// Hexagon_A2_maxup
    14U,	// Hexagon_A4_andn
    14U,	// Hexagon_A4_combineir
    14U,	// Hexagon_A4_combineri
    14U,	// Hexagon_A4_orn
    14U,	// Hexagon_A4_rcmpeq
    14U,	// Hexagon_A4_rcmpeqi
    14U,	// Hexagon_A4_rcmpneq
    14U,	// Hexagon_A4_rcmpneqi
    14U,	// Hexagon_C2_bitsclr
    14U,	// Hexagon_C2_bitsclri
    0U,	// Hexagon_C2_bitsset
    6U,	// Hexagon_C4_and_and
    0U,	// Hexagon_C4_and_andn
    6U,	// Hexagon_C4_and_or
    0U,	// Hexagon_C4_and_orn
    14U,	// Hexagon_C4_cmplte
    14U,	// Hexagon_C4_cmpltei
    14U,	// Hexagon_C4_cmplteu
    14U,	// Hexagon_C4_cmplteui
    14U,	// Hexagon_C4_cmpneq
    14U,	// Hexagon_C4_cmpneqi
    0U,	// Hexagon_C4_fastcorner9
    0U,	// Hexagon_C4_fastcorner9_not
    6U,	// Hexagon_C4_or_and
    0U,	// Hexagon_C4_or_andn
    6U,	// Hexagon_C4_or_or
    0U,	// Hexagon_C4_or_orn
    14U,	// Hexagon_M2_mpysmi
    0U,	// Hexagon_M2_vradduh
    0U,	// Hexagon_M2_vrcmpys_acc_s1
    0U,	// Hexagon_M2_vrcmpys_s1
    0U,	// Hexagon_M2_vrcmpys_s1rp
    0U,	// Hexagon_M4_xor_xacc
    0U,	// Hexagon_S2_brev
    0U,	// Hexagon_S2_deinterleave
    778U,	// Hexagon_S2_insert
    14U,	// Hexagon_S2_insert_rp
    778U,	// Hexagon_S2_insertp
    14U,	// Hexagon_S2_insertp_rp
    0U,	// Hexagon_S2_interleave
    0U,	// Hexagon_S2_lfsp
    0U,	// Hexagon_S2_tableidxb_goodsyntax
    0U,	// Hexagon_S2_tableidxd_goodsyntax
    0U,	// Hexagon_S2_tableidxh_goodsyntax
    0U,	// Hexagon_S2_tableidxw_goodsyntax
    14U,	// Hexagon_S2_vspliceib
    14U,	// Hexagon_S2_vsplicerb
    14U,	// Hexagon_S4_addaddi
    14U,	// Hexagon_S4_andnp
    14U,	// Hexagon_S4_ornp
    14U,	// Hexagon_S4_subaddi
    0U,	// IMMEXT
    0U,	// JMP
    0U,	// JMPR
    0U,	// JMPR_cNotPt
    0U,	// JMPR_cPt
    0U,	// JMPR_cdnNotPnt
    0U,	// JMPR_cdnNotPt_V3
    0U,	// JMPR_cdnPnt
    0U,	// JMPR_cdnPt_V3
    0U,	// JMP_EQriNotPnt_ie_nv_V4
    0U,	// JMP_EQriNotPnt_nv_V4
    0U,	// JMP_EQriNotPntneg_ie_nv_V4
    0U,	// JMP_EQriNotPntneg_nv_V4
    1U,	// JMP_EQriNotPt_ie_nv_V4
    1U,	// JMP_EQriNotPt_nv_V4
    1U,	// JMP_EQriNotPtneg_ie_nv_V4
    1U,	// JMP_EQriNotPtneg_nv_V4
    0U,	// JMP_EQriPnt_ie_nv_V4
    0U,	// JMP_EQriPnt_nv_V4
    0U,	// JMP_EQriPntneg_ie_nv_V4
    0U,	// JMP_EQriPntneg_nv_V4
    1U,	// JMP_EQriPt_ie_nv_V4
    1U,	// JMP_EQriPt_nv_V4
    1U,	// JMP_EQriPtneg_ie_nv_V4
    1U,	// JMP_EQriPtneg_nv_V4
    0U,	// JMP_EQrrNotPnt_ie_nv_V4
    0U,	// JMP_EQrrNotPnt_nv_V4
    0U,	// JMP_EQrrNotPt_ie_nv_V4
    0U,	// JMP_EQrrNotPt_nv_V4
    0U,	// JMP_EQrrPnt_ie_nv_V4
    0U,	// JMP_EQrrPnt_nv_V4
    0U,	// JMP_EQrrPt_ie_nv_V4
    0U,	// JMP_EQrrPt_nv_V4
    0U,	// JMP_GTUriNotPnt_ie_nv_V4
    0U,	// JMP_GTUriNotPnt_nv_V4
    1U,	// JMP_GTUriNotPt_ie_nv_V4
    1U,	// JMP_GTUriNotPt_nv_V4
    0U,	// JMP_GTUriPnt_ie_nv_V4
    0U,	// JMP_GTUriPnt_nv_V4
    1U,	// JMP_GTUriPt_ie_nv_V4
    1U,	// JMP_GTUriPt_nv_V4
    0U,	// JMP_GTUrrNotPnt_ie_nv_V4
    0U,	// JMP_GTUrrNotPnt_nv_V4
    0U,	// JMP_GTUrrNotPt_ie_nv_V4
    0U,	// JMP_GTUrrNotPt_nv_V4
    0U,	// JMP_GTUrrPnt_ie_nv_V4
    0U,	// JMP_GTUrrPnt_nv_V4
    0U,	// JMP_GTUrrPt_ie_nv_V4
    0U,	// JMP_GTUrrPt_nv_V4
    0U,	// JMP_GTUrrdnNotPnt_ie_nv_V4
    0U,	// JMP_GTUrrdnNotPnt_nv_V4
    0U,	// JMP_GTUrrdnNotPt_ie_nv_V4
    0U,	// JMP_GTUrrdnNotPt_nv_V4
    0U,	// JMP_GTUrrdnPnt_ie_nv_V4
    0U,	// JMP_GTUrrdnPnt_nv_V4
    0U,	// JMP_GTUrrdnPt_ie_nv_V4
    0U,	// JMP_GTUrrdnPt_nv_V4
    0U,	// JMP_GTriNotPnt_ie_nv_V4
    0U,	// JMP_GTriNotPnt_nv_V4
    0U,	// JMP_GTriNotPntneg_ie_nv_V4
    0U,	// JMP_GTriNotPntneg_nv_V4
    1U,	// JMP_GTriNotPt_ie_nv_V4
    1U,	// JMP_GTriNotPt_nv_V4
    1U,	// JMP_GTriNotPtneg_ie_nv_V4
    1U,	// JMP_GTriNotPtneg_nv_V4
    0U,	// JMP_GTriPnt_ie_nv_V4
    0U,	// JMP_GTriPnt_nv_V4
    0U,	// JMP_GTriPntneg_ie_nv_V4
    0U,	// JMP_GTriPntneg_nv_V4
    1U,	// JMP_GTriPt_ie_nv_V4
    1U,	// JMP_GTriPt_nv_V4
    1U,	// JMP_GTriPtneg_ie_nv_V4
    1U,	// JMP_GTriPtneg_nv_V4
    0U,	// JMP_GTrrNotPnt_ie_nv_V4
    0U,	// JMP_GTrrNotPnt_nv_V4
    0U,	// JMP_GTrrNotPt_ie_nv_V4
    0U,	// JMP_GTrrNotPt_nv_V4
    0U,	// JMP_GTrrPnt_ie_nv_V4
    0U,	// JMP_GTrrPnt_nv_V4
    0U,	// JMP_GTrrPt_ie_nv_V4
    0U,	// JMP_GTrrPt_nv_V4
    0U,	// JMP_GTrrdnNotPnt_ie_nv_V4
    0U,	// JMP_GTrrdnNotPnt_nv_V4
    0U,	// JMP_GTrrdnNotPt_ie_nv_V4
    0U,	// JMP_GTrrdnNotPt_nv_V4
    0U,	// JMP_GTrrdnPnt_ie_nv_V4
    0U,	// JMP_GTrrdnPnt_nv_V4
    0U,	// JMP_GTrrdnPt_ie_nv_V4
    0U,	// JMP_GTrrdnPt_nv_V4
    0U,	// JMP_TSTBITr0NotPnt_ie_nv_V4
    0U,	// JMP_TSTBITr0NotPnt_nv_V4
    1U,	// JMP_TSTBITr0NotPt_ie_nv_V4
    1U,	// JMP_TSTBITr0NotPt_nv_V4
    0U,	// JMP_TSTBITr0Pnt_ie_nv_V4
    0U,	// JMP_TSTBITr0Pnt_nv_V4
    1U,	// JMP_TSTBITr0Pt_ie_nv_V4
    1U,	// JMP_TSTBITr0Pt_nv_V4
    0U,	// JMP_c
    0U,	// JMP_cNot
    0U,	// JMP_cdnNotPnt
    0U,	// JMP_cdnNotPt
    0U,	// JMP_cdnPnt
    0U,	// JMP_cdnPt
    0U,	// LDb_GP
    0U,	// LDb_GP_V4
    0U,	// LDb_GP_cNotPt_V4
    0U,	// LDb_GP_cPt_V4
    0U,	// LDb_GP_cdnNotPt_V4
    0U,	// LDb_GP_cdnPt_V4
    0U,	// LDd_GP
    0U,	// LDd_GP_V4
    0U,	// LDd_GP_cNotPt_V4
    0U,	// LDd_GP_cPt_V4
    0U,	// LDd_GP_cdnNotPt_V4
    0U,	// LDd_GP_cdnPt_V4
    0U,	// LDh_GP
    0U,	// LDh_GP_V4
    0U,	// LDh_GP_cNotPt_V4
    0U,	// LDh_GP_cPt_V4
    0U,	// LDh_GP_cdnNotPt_V4
    0U,	// LDh_GP_cdnPt_V4
    0U,	// LDrib
    3U,	// LDrib_GP
    14U,	// LDrib_GP_V4
    5U,	// LDrib_GP_cNotPt_V4
    5U,	// LDrib_GP_cPt_V4
    5U,	// LDrib_GP_cdnNotPt_V4
    5U,	// LDrib_GP_cdnPt_V4
    0U,	// LDrib_abs_V4
    0U,	// LDrib_abs_cNotPt_V4
    0U,	// LDrib_abs_cPt_V4
    0U,	// LDrib_abs_cdnNotPt_V4
    0U,	// LDrib_abs_cdnPt_V4
    1U,	// LDrib_abs_set_V4
    1U,	// LDrib_abs_setimm_V4
    1U,	// LDrib_cNotPt
    1U,	// LDrib_cPt
    1U,	// LDrib_cdnNotPt
    1U,	// LDrib_cdnPt
    0U,	// LDrib_imm_abs_V4
    0U,	// LDrib_imm_abs_cNotPt_V4
    0U,	// LDrib_imm_abs_cPt_V4
    0U,	// LDrib_imm_abs_cdnNotPt_V4
    0U,	// LDrib_imm_abs_cdnPt_V4
    899U,	// LDrib_ind_lo_V4
    15U,	// LDrib_indexed
    0U,	// LDrib_indexed_V4
    62U,	// LDrib_indexed_cNotPt
    1U,	// LDrib_indexed_cNotPt_V4
    62U,	// LDrib_indexed_cPt
    1U,	// LDrib_indexed_cPt_V4
    62U,	// LDrib_indexed_cdnNotPt
    1U,	// LDrib_indexed_cdnNotPt_V4
    62U,	// LDrib_indexed_cdnPt
    1U,	// LDrib_indexed_cdnPt_V4
    14U,	// LDrib_indexed_shl_V4
    65U,	// LDrib_indexed_shl_cNotPt_V4
    65U,	// LDrib_indexed_shl_cPt_V4
    65U,	// LDrib_indexed_shl_cdnNotPt_V4
    65U,	// LDrib_indexed_shl_cdnPt_V4
    0U,	// LDrid
    14U,	// LDrid_GP
    14U,	// LDrid_GP_V4
    5U,	// LDrid_GP_cNotPt_V4
    5U,	// LDrid_GP_cPt_V4
    5U,	// LDrid_GP_cdnNotPt_V4
    5U,	// LDrid_GP_cdnPt_V4
    0U,	// LDrid_abs_V4
    0U,	// LDrid_abs_cNotPt_V4
    0U,	// LDrid_abs_cPt_V4
    0U,	// LDrid_abs_cdnNotPt_V4
    0U,	// LDrid_abs_cdnPt_V4
    1U,	// LDrid_abs_set_V4
    1U,	// LDrid_abs_setimm_V4
    1U,	// LDrid_cNotPt
    1U,	// LDrid_cPt
    1U,	// LDrid_cdnNotPt
    1U,	// LDrid_cdnPt
    0U,	// LDrid_f
    66U,	// LDrid_ind_lo_V4
    15U,	// LDrid_indexed
    68U,	// LDrid_indexed_V4
    62U,	// LDrid_indexed_cNotPt
    1U,	// LDrid_indexed_cNotPt_V4
    62U,	// LDrid_indexed_cPt
    1U,	// LDrid_indexed_cPt_V4
    62U,	// LDrid_indexed_cdnNotPt
    1U,	// LDrid_indexed_cdnNotPt_V4
    62U,	// LDrid_indexed_cdnPt
    1U,	// LDrid_indexed_cdnPt_V4
    15U,	// LDrid_indexed_f
    70U,	// LDrid_indexed_shl_V4
    65U,	// LDrid_indexed_shl_cNotPt_V4
    65U,	// LDrid_indexed_shl_cPt_V4
    65U,	// LDrid_indexed_shl_cdnNotPt_V4
    65U,	// LDrid_indexed_shl_cdnPt_V4
    0U,	// LDrih
    3U,	// LDrih_GP
    14U,	// LDrih_GP_V4
    5U,	// LDrih_GP_cNotPt_V4
    5U,	// LDrih_GP_cPt_V4
    5U,	// LDrih_GP_cdnNotPt_V4
    5U,	// LDrih_GP_cdnPt_V4
    0U,	// LDrih_abs_V4
    0U,	// LDrih_abs_cNotPt_V4
    0U,	// LDrih_abs_cPt_V4
    0U,	// LDrih_abs_cdnNotPt_V4
    0U,	// LDrih_abs_cdnPt_V4
    1U,	// LDrih_abs_set_V4
    1U,	// LDrih_abs_setimm_V4
    1U,	// LDrih_cNotPt
    1U,	// LDrih_cPt
    1U,	// LDrih_cdnNotPt
    1U,	// LDrih_cdnPt
    0U,	// LDrih_imm_abs_V4
    0U,	// LDrih_imm_abs_cNotPt_V4
    0U,	// LDrih_imm_abs_cPt_V4
    0U,	// LDrih_imm_abs_cdnNotPt_V4
    0U,	// LDrih_imm_abs_cdnPt_V4
    899U,	// LDrih_ind_lo_V4
    15U,	// LDrih_indexed
    0U,	// LDrih_indexed_V4
    62U,	// LDrih_indexed_cNotPt
    1U,	// LDrih_indexed_cNotPt_V4
    62U,	// LDrih_indexed_cPt
    1U,	// LDrih_indexed_cPt_V4
    62U,	// LDrih_indexed_cdnNotPt
    1U,	// LDrih_indexed_cdnNotPt_V4
    62U,	// LDrih_indexed_cdnPt
    1U,	// LDrih_indexed_cdnPt_V4
    14U,	// LDrih_indexed_shl_V4
    65U,	// LDrih_indexed_shl_cNotPt_V4
    65U,	// LDrih_indexed_shl_cPt_V4
    65U,	// LDrih_indexed_shl_cdnNotPt_V4
    65U,	// LDrih_indexed_shl_cdnPt_V4
    0U,	// LDriub
    3U,	// LDriub_GP
    14U,	// LDriub_GP_V4
    5U,	// LDriub_GP_cNotPt_V4
    5U,	// LDriub_GP_cPt_V4
    5U,	// LDriub_GP_cdnNotPt_V4
    5U,	// LDriub_GP_cdnPt_V4
    0U,	// LDriub_abs_V4
    0U,	// LDriub_abs_cNotPt_V4
    0U,	// LDriub_abs_cPt_V4
    0U,	// LDriub_abs_cdnNotPt_V4
    0U,	// LDriub_abs_cdnPt_V4
    1U,	// LDriub_abs_set_V4
    1U,	// LDriub_abs_setimm_V4
    0U,	// LDriub_ae_indexed_V4
    14U,	// LDriub_ae_indexed_shl_V4
    1U,	// LDriub_cNotPt
    1U,	// LDriub_cPt
    1U,	// LDriub_cdnNotPt
    1U,	// LDriub_cdnPt
    0U,	// LDriub_imm_abs_V4
    0U,	// LDriub_imm_abs_cNotPt_V4
    0U,	// LDriub_imm_abs_cPt_V4
    0U,	// LDriub_imm_abs_cdnNotPt_V4
    0U,	// LDriub_imm_abs_cdnPt_V4
    899U,	// LDriub_ind_lo_V4
    15U,	// LDriub_indexed
    0U,	// LDriub_indexed_V4
    62U,	// LDriub_indexed_cNotPt
    1U,	// LDriub_indexed_cNotPt_V4
    62U,	// LDriub_indexed_cPt
    1U,	// LDriub_indexed_cPt_V4
    62U,	// LDriub_indexed_cdnNotPt
    1U,	// LDriub_indexed_cdnNotPt_V4
    62U,	// LDriub_indexed_cdnPt
    1U,	// LDriub_indexed_cdnPt_V4
    14U,	// LDriub_indexed_shl_V4
    65U,	// LDriub_indexed_shl_cNotPt_V4
    65U,	// LDriub_indexed_shl_cPt_V4
    65U,	// LDriub_indexed_shl_cdnNotPt_V4
    65U,	// LDriub_indexed_shl_cdnPt_V4
    0U,	// LDriuh
    3U,	// LDriuh_GP
    14U,	// LDriuh_GP_V4
    5U,	// LDriuh_GP_cNotPt_V4
    5U,	// LDriuh_GP_cPt_V4
    5U,	// LDriuh_GP_cdnNotPt_V4
    5U,	// LDriuh_GP_cdnPt_V4
    0U,	// LDriuh_abs_V4
    0U,	// LDriuh_abs_cNotPt_V4
    0U,	// LDriuh_abs_cPt_V4
    0U,	// LDriuh_abs_cdnNotPt_V4
    0U,	// LDriuh_abs_cdnPt_V4
    1U,	// LDriuh_abs_set_V4
    1U,	// LDriuh_abs_setimm_V4
    0U,	// LDriuh_ae_indexed_V4
    14U,	// LDriuh_ae_indexed_shl_V4
    1U,	// LDriuh_cNotPt
    1U,	// LDriuh_cPt
    1U,	// LDriuh_cdnNotPt
    1U,	// LDriuh_cdnPt
    0U,	// LDriuh_imm_abs_V4
    0U,	// LDriuh_imm_abs_cNotPt_V4
    0U,	// LDriuh_imm_abs_cPt_V4
    0U,	// LDriuh_imm_abs_cdnNotPt_V4
    0U,	// LDriuh_imm_abs_cdnPt_V4
    899U,	// LDriuh_ind_lo_V4
    15U,	// LDriuh_indexed
    0U,	// LDriuh_indexed_V4
    62U,	// LDriuh_indexed_cNotPt
    1U,	// LDriuh_indexed_cNotPt_V4
    62U,	// LDriuh_indexed_cPt
    1U,	// LDriuh_indexed_cPt_V4
    62U,	// LDriuh_indexed_cdnNotPt
    1U,	// LDriuh_indexed_cdnNotPt_V4
    62U,	// LDriuh_indexed_cdnPt
    1U,	// LDriuh_indexed_cdnPt_V4
    14U,	// LDriuh_indexed_shl_V4
    65U,	// LDriuh_indexed_shl_cNotPt_V4
    65U,	// LDriuh_indexed_shl_cPt_V4
    65U,	// LDriuh_indexed_shl_cdnNotPt_V4
    65U,	// LDriuh_indexed_shl_cdnPt_V4
    0U,	// LDriw
    3U,	// LDriw_GP
    14U,	// LDriw_GP_V4
    5U,	// LDriw_GP_cNotPt_V4
    5U,	// LDriw_GP_cPt_V4
    5U,	// LDriw_GP_cdnNotPt_V4
    5U,	// LDriw_GP_cdnPt_V4
    0U,	// LDriw_abs_V4
    0U,	// LDriw_abs_cNotPt_V4
    0U,	// LDriw_abs_cPt_V4
    0U,	// LDriw_abs_cdnNotPt_V4
    0U,	// LDriw_abs_cdnPt_V4
    1U,	// LDriw_abs_set_V4
    1U,	// LDriw_abs_setimm_V4
    1U,	// LDriw_cNotPt
    1U,	// LDriw_cPt
    1U,	// LDriw_cdnNotPt
    1U,	// LDriw_cdnPt
    0U,	// LDriw_f
    0U,	// LDriw_imm_abs_V4
    0U,	// LDriw_imm_abs_cNotPt_V4
    0U,	// LDriw_imm_abs_cPt_V4
    0U,	// LDriw_imm_abs_cdnNotPt_V4
    0U,	// LDriw_imm_abs_cdnPt_V4
    899U,	// LDriw_ind_lo_V4
    15U,	// LDriw_indexed
    0U,	// LDriw_indexed_V4
    62U,	// LDriw_indexed_cNotPt
    1U,	// LDriw_indexed_cNotPt_V4
    62U,	// LDriw_indexed_cPt
    1U,	// LDriw_indexed_cPt_V4
    62U,	// LDriw_indexed_cdnNotPt
    1U,	// LDriw_indexed_cdnNotPt_V4
    62U,	// LDriw_indexed_cdnPt
    1U,	// LDriw_indexed_cdnPt_V4
    15U,	// LDriw_indexed_f
    14U,	// LDriw_indexed_shl_V4
    65U,	// LDriw_indexed_shl_cNotPt_V4
    65U,	// LDriw_indexed_shl_cPt_V4
    65U,	// LDriw_indexed_shl_cdnNotPt_V4
    65U,	// LDriw_indexed_shl_cdnPt_V4
    0U,	// LDriw_pred
    0U,	// LDriw_pred_V4
    0U,	// LDub_GP
    0U,	// LDub_GP_V4
    0U,	// LDub_GP_cNotPt_V4
    0U,	// LDub_GP_cPt_V4
    0U,	// LDub_GP_cdnNotPt_V4
    0U,	// LDub_GP_cdnPt_V4
    0U,	// LDuh_GP
    0U,	// LDuh_GP_V4
    0U,	// LDuh_GP_cNotPt_V4
    0U,	// LDuh_GP_cPt_V4
    0U,	// LDuh_GP_cdnNotPt_V4
    0U,	// LDuh_GP_cdnPt_V4
    0U,	// LDw_GP
    0U,	// LDw_GP_V4
    0U,	// LDw_GP_cNotPt_V4
    0U,	// LDw_GP_cPt_V4
    0U,	// LDw_GP_cdnNotPt_V4
    0U,	// LDw_GP_cdnPt_V4
    0U,	// LO
    0U,	// LOOP0_i
    0U,	// LOOP0_r
    0U,	// LO_jt
    0U,	// LO_label
    0U,	// LOi
    0U,	// LSL_ADD_rr
    0U,	// LSL_ADDd_rr
    0U,	// LSL_AND_rr
    0U,	// LSL_ANDd_rr
    0U,	// LSL_OR_rr
    0U,	// LSL_ORd_rr
    0U,	// LSL_SUB_rr
    0U,	// LSL_SUBd_rr
    0U,	// LSL_rr
    0U,	// LSLd
    0U,	// LSLd_rr_xor_V4
    0U,	// LSLi_V4
    14U,	// LSR_ADD_ri
    14U,	// LSR_ADD_rr
    14U,	// LSR_ADDd_ri
    14U,	// LSR_ADDd_rr
    14U,	// LSR_AND_ri
    14U,	// LSR_AND_rr
    14U,	// LSR_ANDd_ri
    14U,	// LSR_ANDd_rr
    14U,	// LSR_OR_ri
    14U,	// LSR_OR_rr
    14U,	// LSR_ORd_ri
    14U,	// LSR_ORd_rr
    14U,	// LSR_SUB_ri
    14U,	// LSR_SUB_rr
    14U,	// LSR_SUBd_ri
    14U,	// LSR_SUBd_rr
    14U,	// LSR_XOR_ri
    14U,	// LSR_XORd_ri
    14U,	// LSR_ri
    14U,	// LSR_rr
    14U,	// LSRd_ri
    14U,	// LSRd_rr
    14U,	// LSRd_rr_xor_V4
    0U,	// MASK_p
    72U,	// MAXUd_rr
    72U,	// MAXUw_rr
    72U,	// MAXd_rr
    72U,	// MAXw_dd
    72U,	// MAXw_rr
    0U,	// MEMb_ADDSUBi_MEM_V4
    0U,	// MEMb_ADDSUBi_indexed_MEM_V4
    0U,	// MEMb_ADDi_MEM_V4
    74U,	// MEMb_ADDi_indexed_MEM_V4
    1U,	// MEMb_ADDr_MEM_V4
    74U,	// MEMb_ADDr_indexed_MEM_V4
    0U,	// MEMb_ANDr_MEM_V4
    74U,	// MEMb_ANDr_indexed_MEM_V4
    0U,	// MEMb_ORr_MEM_V4
    0U,	// MEMb_ORr_indexed_MEM_V4
    0U,	// MEMb_SUBi_MEM_V4
    74U,	// MEMb_SUBi_indexed_MEM_V4
    1U,	// MEMb_SUBr_MEM_V4
    74U,	// MEMb_SUBr_indexed_MEM_V4
    0U,	// MEMh_ADDSUBi_MEM_V4
    0U,	// MEMh_ADDSUBi_indexed_MEM_V4
    0U,	// MEMh_ADDi_MEM_V4
    74U,	// MEMh_ADDi_indexed_MEM_V4
    1U,	// MEMh_ADDr_MEM_V4
    74U,	// MEMh_ADDr_indexed_MEM_V4
    0U,	// MEMh_ANDr_MEM_V4
    74U,	// MEMh_ANDr_indexed_MEM_V4
    0U,	// MEMh_ORr_MEM_V4
    0U,	// MEMh_ORr_indexed_MEM_V4
    0U,	// MEMh_SUBi_MEM_V4
    74U,	// MEMh_SUBi_indexed_MEM_V4
    1U,	// MEMh_SUBr_MEM_V4
    74U,	// MEMh_SUBr_indexed_MEM_V4
    0U,	// MEMw_ADDSUBi_MEM_V4
    0U,	// MEMw_ADDSUBi_indexed_MEM_V4
    0U,	// MEMw_ADDi_MEM_V4
    0U,	// MEMw_ADDi_indexed_MEM_V4
    1U,	// MEMw_ADDr_MEM_V4
    74U,	// MEMw_ADDr_indexed_MEM_V4
    0U,	// MEMw_ANDr_MEM_V4
    0U,	// MEMw_ANDr_indexed_MEM_V4
    0U,	// MEMw_ORr_MEM_V4
    0U,	// MEMw_ORr_indexed_MEM_V4
    0U,	// MEMw_SUBi_MEM_V4
    0U,	// MEMw_SUBi_indexed_MEM_V4
    1U,	// MEMw_SUBr_MEM_V4
    74U,	// MEMw_SUBr_indexed_MEM_V4
    72U,	// MINUd_rr
    72U,	// MINUw_rr
    72U,	// MINd_rr
    72U,	// MINw_dd
    72U,	// MINw_rr
    14U,	// MPY
    14U,	// MPY64
    14U,	// MPY64_acc
    14U,	// MPY64_sub
    14U,	// MPYI
    14U,	// MPYI_acc_ri
    14U,	// MPYI_acc_rr
    14U,	// MPYI_ri
    0U,	// MPYI_rin
    0U,	// MPYI_riu
    0U,	// MPYI_sub_ri
    14U,	// MPYU
    14U,	// MPYU64
    14U,	// MPYU64_acc
    14U,	// MPYU64_sub
    14U,	// MPY_trsext
    2314U,	// MUX_ii
    12U,	// MUX_ir
    2314U,	// MUX_ri
    12U,	// MUX_rr
    0U,	// NEG
    0U,	// NOP
    0U,	// NOT_p
    0U,	// NOT_rr
    0U,	// NOT_rr64
    14U,	// OR_pp
    14U,	// OR_ri
    14U,	// OR_rr
    14U,	// OR_rr64
    0U,	// OR_rr_cNotPt
    0U,	// OR_rr_cPt
    0U,	// OR_rr_cdnNotPt
    0U,	// OR_rr_cdnPt
    14U,	// ORd_NOTd_V4
    0U,	// ORi_ASLri_V4
    0U,	// ORi_LSRri_V4
    14U,	// ORr_ANDr_NOTr_V4
    14U,	// ORr_ANDri2_V4
    132U,	// ORr_ANDri_V4
    14U,	// ORr_ANDrr_V4
    14U,	// ORr_ORri_V4
    14U,	// ORr_ORrr_V4
    0U,	// ORr_XORrr_V4
    4U,	// POST_LDrib
    76U,	// POST_LDrib_cNotPt
    76U,	// POST_LDrib_cPt
    76U,	// POST_LDrib_cdnNotPt_V4
    76U,	// POST_LDrib_cdnPt_V4
    4U,	// POST_LDrid
    76U,	// POST_LDrid_cNotPt
    76U,	// POST_LDrid_cPt
    76U,	// POST_LDrid_cdnNotPt_V4
    76U,	// POST_LDrid_cdnPt_V4
    4U,	// POST_LDrih
    76U,	// POST_LDrih_cNotPt
    76U,	// POST_LDrih_cPt
    76U,	// POST_LDrih_cdnNotPt_V4
    76U,	// POST_LDrih_cdnPt_V4
    4U,	// POST_LDriub
    76U,	// POST_LDriub_cNotPt
    76U,	// POST_LDriub_cPt
    76U,	// POST_LDriub_cdnNotPt_V4
    76U,	// POST_LDriub_cdnPt_V4
    4U,	// POST_LDriuh
    76U,	// POST_LDriuh_cNotPt
    76U,	// POST_LDriuh_cPt
    76U,	// POST_LDriuh_cdnNotPt_V4
    76U,	// POST_LDriuh_cdnPt_V4
    4U,	// POST_LDriw
    76U,	// POST_LDriw_cNotPt
    76U,	// POST_LDriw_cPt
    76U,	// POST_LDriw_cdnNotPt_V4
    76U,	// POST_LDriw_cdnPt_V4
    0U,	// POST_STbri
    1U,	// POST_STbri_cNotPt
    1U,	// POST_STbri_cNotPt_nv_V4
    1U,	// POST_STbri_cPt
    1U,	// POST_STbri_cPt_nv_V4
    1U,	// POST_STbri_cdnNotPt_V4
    1U,	// POST_STbri_cdnNotPt_nv_V4
    1U,	// POST_STbri_cdnPt_V4
    1U,	// POST_STbri_cdnPt_nv_V4
    0U,	// POST_STbri_nv_V4
    0U,	// POST_STdri
    1U,	// POST_STdri_cNotPt
    1U,	// POST_STdri_cPt
    1U,	// POST_STdri_cdnNotPt_V4
    1U,	// POST_STdri_cdnPt_V4
    0U,	// POST_SThri
    1U,	// POST_SThri_cNotPt
    1U,	// POST_SThri_cNotPt_nv_V4
    1U,	// POST_SThri_cPt
    1U,	// POST_SThri_cPt_nv_V4
    1U,	// POST_SThri_cdnNotPt_V4
    1U,	// POST_SThri_cdnNotPt_nv_V4
    1U,	// POST_SThri_cdnPt_V4
    1U,	// POST_SThri_cdnPt_nv_V4
    0U,	// POST_SThri_nv_V4
    0U,	// POST_STwri
    1U,	// POST_STwri_cNotPt
    1U,	// POST_STwri_cNotPt_nv_V4
    1U,	// POST_STwri_cPt
    1U,	// POST_STwri_cPt_nv_V4
    1U,	// POST_STwri_cdnNotPt_V4
    1U,	// POST_STwri_cdnNotPt_nv_V4
    1U,	// POST_STwri_cdnPt_V4
    1U,	// POST_STwri_cdnPt_nv_V4
    0U,	// POST_STwri_nv_V4
    0U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4
    0U,	// RESTORE_DEALLOC_RET_JMP_V4
    0U,	// SAVE_REGISTERS_CALL_V4
    14U,	// SETBIT
    14U,	// SETBIT_31
    0U,	// SI_to_SXTHI_asrh
    1U,	// STb_GP
    1U,	// STb_GP_V4
    1U,	// STb_GP_cNotPt_V4
    1U,	// STb_GP_cNotPt_nv_V4
    1U,	// STb_GP_cPt_V4
    1U,	// STb_GP_cPt_nv_V4
    1U,	// STb_GP_cdnNotPt_V4
    1U,	// STb_GP_cdnNotPt_nv_V4
    1U,	// STb_GP_cdnPt_V4
    1U,	// STb_GP_cdnPt_nv_V4
    1U,	// STb_GP_nv_V4
    1U,	// STd_GP
    1U,	// STd_GP_V4
    1U,	// STd_GP_cNotPt_V4
    1U,	// STd_GP_cPt_V4
    1U,	// STd_GP_cdnNotPt_V4
    1U,	// STd_GP_cdnPt_V4
    1U,	// STh_GP
    1U,	// STh_GP_V4
    1U,	// STh_GP_cNotPt_V4
    1U,	// STh_GP_cNotPt_nv_V4
    1U,	// STh_GP_cPt_V4
    1U,	// STh_GP_cPt_nv_V4
    1U,	// STh_GP_cdnNotPt_V4
    1U,	// STh_GP_cdnNotPt_nv_V4
    1U,	// STh_GP_cdnPt_V4
    1U,	// STh_GP_cdnPt_nv_V4
    1U,	// STh_GP_nv_V4
    1U,	// STrib
    1025U,	// STrib_GP
    1025U,	// STrib_GP_V4
    1102U,	// STrib_GP_cNotPt_V4
    1230U,	// STrib_GP_cNotPt_nv_V4
    1102U,	// STrib_GP_cPt_V4
    1230U,	// STrib_GP_cPt_nv_V4
    1102U,	// STrib_GP_cdnNotPt_V4
    1230U,	// STrib_GP_cdnNotPt_nv_V4
    1102U,	// STrib_GP_cdnPt_V4
    1230U,	// STrib_GP_cdnPt_nv_V4
    1153U,	// STrib_GP_nv_V4
    1U,	// STrib_abs_V4
    0U,	// STrib_abs_cNotPt_V4
    0U,	// STrib_abs_cNotPt_nv_V4
    0U,	// STrib_abs_cPt_V4
    0U,	// STrib_abs_cPt_nv_V4
    0U,	// STrib_abs_cdnNotPt_V4
    0U,	// STrib_abs_cdnNotPt_nv_V4
    0U,	// STrib_abs_cdnPt_V4
    0U,	// STrib_abs_cdnPt_nv_V4
    1U,	// STrib_abs_nv_V4
    0U,	// STrib_abs_set_V4
    0U,	// STrib_abs_setimm_V4
    1031U,	// STrib_cNotPt
    1159U,	// STrib_cNotPt_nv_V4
    1031U,	// STrib_cPt
    1159U,	// STrib_cPt_nv_V4
    1031U,	// STrib_cdnNotPt_V4
    1159U,	// STrib_cdnNotPt_nv_V4
    1031U,	// STrib_cdnPt_V4
    1159U,	// STrib_cdnPt_nv_V4
    0U,	// STrib_imm_V4
    0U,	// STrib_imm_abs_V4
    0U,	// STrib_imm_abs_cNotPt_V4
    0U,	// STrib_imm_abs_cNotPt_nv_V4
    0U,	// STrib_imm_abs_cPt_V4
    0U,	// STrib_imm_abs_cPt_nv_V4
    0U,	// STrib_imm_abs_cdnNotPt_V4
    0U,	// STrib_imm_abs_cdnNotPt_nv_V4
    0U,	// STrib_imm_abs_cdnPt_V4
    0U,	// STrib_imm_abs_cdnPt_nv_V4
    0U,	// STrib_imm_abs_nv_V4
    81U,	// STrib_imm_cNotPt_V4
    81U,	// STrib_imm_cPt_V4
    81U,	// STrib_imm_cdnNotPt_V4
    81U,	// STrib_imm_cdnPt_V4
    0U,	// STrib_ind_lo_V4
    1U,	// STrib_indexed
    1103U,	// STrib_indexed_cNotPt
    1231U,	// STrib_indexed_cNotPt_nv_V4
    1103U,	// STrib_indexed_cPt
    1231U,	// STrib_indexed_cPt_nv_V4
    1103U,	// STrib_indexed_cdnNotPt_V4
    1231U,	// STrib_indexed_cdnNotPt_nv_V4
    1103U,	// STrib_indexed_cdnPt_V4
    1231U,	// STrib_indexed_cdnPt_nv_V4
    1U,	// STrib_indexed_nv_V4
    5379U,	// STrib_indexed_shl_V4
    5505U,	// STrib_indexed_shl_cNotPt_V4
    7553U,	// STrib_indexed_shl_cNotPt_nv_V4
    5505U,	// STrib_indexed_shl_cPt_V4
    7553U,	// STrib_indexed_shl_cPt_nv_V4
    5505U,	// STrib_indexed_shl_cdnNotPt_V4
    7553U,	// STrib_indexed_shl_cdnNotPt_nv_V4
    5505U,	// STrib_indexed_shl_cdnPt_V4
    7553U,	// STrib_indexed_shl_cdnPt_nv_V4
    7427U,	// STrib_indexed_shl_nv_V4
    1U,	// STrib_nv_V4
    1102U,	// STrib_shl_V4
    1230U,	// STrib_shl_nv_V4
    1U,	// STrid
    1025U,	// STrid_GP
    1025U,	// STrid_GP_V4
    1102U,	// STrid_GP_cNotPt_V4
    1102U,	// STrid_GP_cPt_V4
    1102U,	// STrid_GP_cdnNotPt_V4
    1102U,	// STrid_GP_cdnPt_V4
    1U,	// STrid_abs_V4
    1U,	// STrid_abs_cNotPt_V4
    1U,	// STrid_abs_cPt_V4
    1U,	// STrid_abs_cdnNotPt_V4
    1U,	// STrid_abs_cdnPt_V4
    0U,	// STrid_abs_set_V4
    0U,	// STrid_abs_setimm_V4
    1031U,	// STrid_cNotPt
    1031U,	// STrid_cPt
    1031U,	// STrid_cdnNotPt_V4
    1031U,	// STrid_cdnPt_V4
    1U,	// STrid_f
    1103U,	// STrid_ind_lo_V4
    1U,	// STrid_indexed
    1103U,	// STrid_indexed_cNotPt
    1103U,	// STrid_indexed_cPt
    1103U,	// STrid_indexed_cdnNotPt_V4
    1103U,	// STrid_indexed_cdnPt_V4
    1U,	// STrid_indexed_f
    5379U,	// STrid_indexed_shl_V4
    5505U,	// STrid_indexed_shl_cNotPt_V4
    5505U,	// STrid_indexed_shl_cPt_V4
    5505U,	// STrid_indexed_shl_cdnNotPt_V4
    5505U,	// STrid_indexed_shl_cdnPt_V4
    1102U,	// STrid_shl_V4
    1U,	// STrih
    1025U,	// STrih_GP
    1025U,	// STrih_GP_V4
    1102U,	// STrih_GP_cNotPt_V4
    1230U,	// STrih_GP_cNotPt_nv_V4
    1102U,	// STrih_GP_cPt_V4
    1230U,	// STrih_GP_cPt_nv_V4
    1102U,	// STrih_GP_cdnNotPt_V4
    1230U,	// STrih_GP_cdnNotPt_nv_V4
    1102U,	// STrih_GP_cdnPt_V4
    1230U,	// STrih_GP_cdnPt_nv_V4
    1153U,	// STrih_GP_nv_V4
    1U,	// STrih_abs_V4
    0U,	// STrih_abs_cNotPt_V4
    0U,	// STrih_abs_cNotPt_nv_V4
    0U,	// STrih_abs_cPt_V4
    0U,	// STrih_abs_cPt_nv_V4
    0U,	// STrih_abs_cdnNotPt_V4
    0U,	// STrih_abs_cdnNotPt_nv_V4
    0U,	// STrih_abs_cdnPt_V4
    0U,	// STrih_abs_cdnPt_nv_V4
    1U,	// STrih_abs_nv_V4
    0U,	// STrih_abs_set_V4
    0U,	// STrih_abs_setimm_V4
    1031U,	// STrih_cNotPt
    1159U,	// STrih_cNotPt_nv_V4
    1031U,	// STrih_cPt
    1159U,	// STrih_cPt_nv_V4
    1031U,	// STrih_cdnNotPt_V4
    1159U,	// STrih_cdnNotPt_nv_V4
    1031U,	// STrih_cdnPt_V4
    1159U,	// STrih_cdnPt_nv_V4
    0U,	// STrih_imm_V4
    0U,	// STrih_imm_abs_V4
    0U,	// STrih_imm_abs_cNotPt_V4
    0U,	// STrih_imm_abs_cNotPt_nv_V4
    0U,	// STrih_imm_abs_cPt_V4
    0U,	// STrih_imm_abs_cPt_nv_V4
    0U,	// STrih_imm_abs_cdnNotPt_V4
    0U,	// STrih_imm_abs_cdnNotPt_nv_V4
    0U,	// STrih_imm_abs_cdnPt_V4
    0U,	// STrih_imm_abs_cdnPt_nv_V4
    0U,	// STrih_imm_abs_nv_V4
    81U,	// STrih_imm_cNotPt_V4
    81U,	// STrih_imm_cPt_V4
    81U,	// STrih_imm_cdnNotPt_V4
    81U,	// STrih_imm_cdnPt_V4
    0U,	// STrih_ind_lo_V4
    1U,	// STrih_indexed
    1103U,	// STrih_indexed_cNotPt
    1231U,	// STrih_indexed_cNotPt_nv_V4
    1103U,	// STrih_indexed_cPt
    1231U,	// STrih_indexed_cPt_nv_V4
    1103U,	// STrih_indexed_cdnNotPt_V4
    1231U,	// STrih_indexed_cdnNotPt_nv_V4
    1103U,	// STrih_indexed_cdnPt_V4
    1231U,	// STrih_indexed_cdnPt_nv_V4
    1U,	// STrih_indexed_nv_V4
    5379U,	// STrih_indexed_shl_V4
    5505U,	// STrih_indexed_shl_cNotPt_V4
    7553U,	// STrih_indexed_shl_cNotPt_nv_V4
    5505U,	// STrih_indexed_shl_cPt_V4
    7553U,	// STrih_indexed_shl_cPt_nv_V4
    5505U,	// STrih_indexed_shl_cdnNotPt_V4
    7553U,	// STrih_indexed_shl_cdnNotPt_nv_V4
    5505U,	// STrih_indexed_shl_cdnPt_V4
    7553U,	// STrih_indexed_shl_cdnPt_nv_V4
    7427U,	// STrih_indexed_shl_nv_V4
    1U,	// STrih_nv_V4
    0U,	// STrih_offset_ext_V4
    1102U,	// STrih_shl_V4
    1230U,	// STrih_shl_nv_V4
    1U,	// STriw
    1025U,	// STriw_GP
    1025U,	// STriw_GP_V4
    1102U,	// STriw_GP_cNotPt_V4
    1230U,	// STriw_GP_cNotPt_nv_V4
    1102U,	// STriw_GP_cPt_V4
    1230U,	// STriw_GP_cPt_nv_V4
    1102U,	// STriw_GP_cdnNotPt_V4
    1230U,	// STriw_GP_cdnNotPt_nv_V4
    1102U,	// STriw_GP_cdnPt_V4
    1230U,	// STriw_GP_cdnPt_nv_V4
    1153U,	// STriw_GP_nv_V4
    1U,	// STriw_abs_V4
    0U,	// STriw_abs_cNotPt_V4
    0U,	// STriw_abs_cNotPt_nv_V4
    0U,	// STriw_abs_cPt_V4
    0U,	// STriw_abs_cPt_nv_V4
    0U,	// STriw_abs_cdnNotPt_V4
    0U,	// STriw_abs_cdnNotPt_nv_V4
    0U,	// STriw_abs_cdnPt_V4
    0U,	// STriw_abs_cdnPt_nv_V4
    1U,	// STriw_abs_nv_V4
    0U,	// STriw_abs_set_V4
    0U,	// STriw_abs_setimm_V4
    1031U,	// STriw_cNotPt
    1159U,	// STriw_cNotPt_nv_V4
    1031U,	// STriw_cPt
    1159U,	// STriw_cPt_nv_V4
    1031U,	// STriw_cdnNotPt_V4
    1159U,	// STriw_cdnNotPt_nv_V4
    1031U,	// STriw_cdnPt_V4
    1159U,	// STriw_cdnPt_nv_V4
    1U,	// STriw_f
    0U,	// STriw_imm_V4
    0U,	// STriw_imm_abs_V4
    0U,	// STriw_imm_abs_cNotPt_V4
    0U,	// STriw_imm_abs_cNotPt_nv_V4
    0U,	// STriw_imm_abs_cPt_V4
    0U,	// STriw_imm_abs_cPt_nv_V4
    0U,	// STriw_imm_abs_cdnNotPt_V4
    0U,	// STriw_imm_abs_cdnNotPt_nv_V4
    0U,	// STriw_imm_abs_cdnPt_V4
    0U,	// STriw_imm_abs_cdnPt_nv_V4
    0U,	// STriw_imm_abs_nv_V4
    81U,	// STriw_imm_cNotPt_V4
    81U,	// STriw_imm_cPt_V4
    81U,	// STriw_imm_cdnNotPt_V4
    81U,	// STriw_imm_cdnPt_V4
    0U,	// STriw_ind_lo_V4
    1U,	// STriw_indexed
    1103U,	// STriw_indexed_cNotPt
    1231U,	// STriw_indexed_cNotPt_nv_V4
    1103U,	// STriw_indexed_cPt
    1231U,	// STriw_indexed_cPt_nv_V4
    1103U,	// STriw_indexed_cdnNotPt_V4
    1231U,	// STriw_indexed_cdnNotPt_nv_V4
    1103U,	// STriw_indexed_cdnPt_V4
    1231U,	// STriw_indexed_cdnPt_nv_V4
    1U,	// STriw_indexed_f
    1U,	// STriw_indexed_nv_V4
    5379U,	// STriw_indexed_shl_V4
    5505U,	// STriw_indexed_shl_cNotPt_V4
    7553U,	// STriw_indexed_shl_cNotPt_nv_V4
    5505U,	// STriw_indexed_shl_cPt_V4
    7553U,	// STriw_indexed_shl_cPt_nv_V4
    5505U,	// STriw_indexed_shl_cdnNotPt_V4
    7553U,	// STriw_indexed_shl_cdnNotPt_nv_V4
    5505U,	// STriw_indexed_shl_cdnPt_V4
    7553U,	// STriw_indexed_shl_cdnPt_nv_V4
    7427U,	// STriw_indexed_shl_nv_V4
    1U,	// STriw_nv_V4
    0U,	// STriw_offset_ext_V4
    0U,	// STriw_pred
    0U,	// STriw_pred_V4
    1102U,	// STriw_shl_V4
    1230U,	// STriw_shl_nv_V4
    1U,	// STw_GP
    1U,	// STw_GP_V4
    1U,	// STw_GP_cNotPt_V4
    1U,	// STw_GP_cNotPt_nv_V4
    1U,	// STw_GP_cPt_V4
    1U,	// STw_GP_cPt_nv_V4
    1U,	// STw_GP_cdnNotPt_V4
    1U,	// STw_GP_cdnNotPt_nv_V4
    1U,	// STw_GP_cdnPt_V4
    1U,	// STw_GP_cdnPt_nv_V4
    1U,	// STw_GP_nv_V4
    14U,	// SUB64_rr
    14U,	// SUB_ri
    14U,	// SUB_rr
    0U,	// SUB_rr_cNotPt
    0U,	// SUB_rr_cPt
    0U,	// SUB_rr_cdnNotPt
    0U,	// SUB_rr_cdnPt
    0U,	// SUBi_ASLri_V4
    0U,	// SUBi_LSRri_V4
    14U,	// SUBri_acc
    14U,	// SUBrr_acc
    0U,	// SXTB
    0U,	// SXTB_cNotPt_V4
    0U,	// SXTB_cPt_V4
    0U,	// SXTB_cdnNotPt_V4
    0U,	// SXTB_cdnPt_V4
    0U,	// SXTH
    0U,	// SXTH_cNotPt_V4
    0U,	// SXTH_cPt_V4
    0U,	// SXTH_cdnNotPt_V4
    0U,	// SXTH_cdnPt_V4
    0U,	// SXTW
    0U,	// TCRETURNR
    0U,	// TCRETURNtext
    0U,	// TCRETURNtg
    0U,	// TFCR
    0U,	// TFR
    0U,	// TFR64
    0U,	// TFR64_cNotPt
    0U,	// TFR64_cPt
    0U,	// TFRI
    0U,	// TFRI64
    1U,	// TFRI_V4
    0U,	// TFRI_cNotPt
    75U,	// TFRI_cNotPt_V4
    74U,	// TFRI_cNotPt_f
    0U,	// TFRI_cPt
    75U,	// TFRI_cPt_V4
    74U,	// TFRI_cPt_f
    0U,	// TFRI_cdnNotPt
    75U,	// TFRI_cdnNotPt_V4
    0U,	// TFRI_cdnPt
    75U,	// TFRI_cdnPt_V4
    1U,	// TFRI_f
    0U,	// TFR_64
    0U,	// TFR_FI
    1U,	// TFR_FI_immext_V4
    0U,	// TFR_PdFalse
    0U,	// TFR_PdRs
    0U,	// TFR_RsPd
    0U,	// TFR_cNotPt
    0U,	// TFR_cPt
    0U,	// TFR_cdnNotPt
    0U,	// TFR_cdnPt
    0U,	// TFR_condset_ii
    0U,	// TFR_condset_ii_f
    0U,	// TFR_condset_ir
    0U,	// TFR_condset_ir_f
    0U,	// TFR_condset_ri
    0U,	// TFR_condset_ri_f
    0U,	// TFR_condset_rr
    0U,	// TFR_condset_rr64_f
    0U,	// TFR_condset_rr_f
    14U,	// TOGBIT
    14U,	// TOGBIT_31
    14U,	// VALIGN_rrp
    0U,	// VITPACK_pp
    0U,	// VMUX_prr64
    14U,	// VSPLICE_rrp
    0U,	// XOR_pp
    0U,	// XOR_rr
    0U,	// XOR_rr64
    0U,	// XOR_rr_cNotPt
    0U,	// XOR_rr_cPt
    0U,	// XOR_rr_cdnNotPt
    0U,	// XOR_rr_cdnPt
    0U,	// XORd_XORdd
    14U,	// XORr_ANDr_NOTr_V4
    14U,	// XORr_ANDrr_V4
    0U,	// XORr_ORrr_V4
    0U,	// XORr_XORrr_V4
    0U,	// ZXTB
    0U,	// ZXTB_cNotPt_V4
    0U,	// ZXTB_cPt_V4
    0U,	// ZXTB_cdnNotPt_V4
    0U,	// ZXTB_cdnPt_V4
    0U,	// ZXTH
    0U,	// ZXTH_cNotPt_V4
    0U,	// ZXTH_cPt_V4
    0U,	// ZXTH_cdnNotPt_V4
    0U,	// ZXTH_cdnPt_V4
    0U,	// fADD64_rr
    0U,	// fADD_rr
    0U,	// fMUL64_rr
    0U,	// fMUL_rr
    0U,	// fSUB64_rr
    0U,	// fSUB_rr
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 'c', 'a', 'l', 'l', 32, 0,
  /* 6 */ 'j', 'u', 'm', 'p', 32, 0,
  /* 12 */ 'c', 'a', 'l', 'l', 'r', 32, 0,
  /* 19 */ 'j', 'u', 'm', 'p', 'r', 32, 0,
  /* 26 */ 'i', 'f', 32, '(', '!', 0,
  /* 32 */ 'i', 'f', '(', '!', 0,
  /* 37 */ 'm', 'e', 'm', 'b', '(', '#', '#', 0,
  /* 45 */ 'm', 'e', 'm', 'd', '(', '#', '#', 0,
  /* 53 */ 'm', 'e', 'm', 'h', '(', '#', '#', 0,
  /* 61 */ 'm', 'e', 'm', 'w', '(', '#', '#', 0,
  /* 69 */ 'm', 'e', 'm', 'b', '(', '#', 0,
  /* 76 */ 'm', 'e', 'm', 'd', '(', '#', 0,
  /* 83 */ 'a', 'l', 'l', 'o', 'c', 'f', 'r', 'a', 'm', 'e', '(', '#', 0,
  /* 96 */ 'm', 'e', 'm', 'h', '(', '#', 0,
  /* 103 */ 'm', 'e', 'm', 'w', '(', '#', 0,
  /* 110 */ 'i', 'f', 32, '(', 0,
  /* 115 */ 'l', 'o', 'o', 'p', '0', '(', 0,
  /* 122 */ 'm', 'e', 'm', 'b', '(', 0,
  /* 128 */ 'm', 'e', 'm', 'd', '(', 0,
  /* 134 */ 'i', 'f', '(', 0,
  /* 138 */ 'm', 'e', 'm', 'h', '(', 0,
  /* 144 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 157 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 169 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 182 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 194 */ 'i', 'f', 32, '(', '!', 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 207 */ 'i', 'f', 32, '(', 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 219 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 233 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 246 */ 'm', 'e', 'm', 'w', '(', 0,
  /* 252 */ '/', '*', 32, 'i', 'm', 'm', 'e', 'x', 't', 32, '#', '.', '.', '.', 32, '*', '/', 0,
  /* 270 */ ':', 'e', 'n', 'd', 'l', 'o', 'o', 'p', '0', 0,
  /* 280 */ 'j', 'u', 'm', 'p', 'r', 32, 'r', '3', '1', 0,
  /* 290 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 303 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 310 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 320 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 335 */ 'S', 'h', 'o', 'u', 'l', 'd', 32, 'n', 'e', 'v', 'e', 'r', 32, 'b', 'e', 32, 'e', 'm', 'i', 't', 't', 'e', 'd', 0,
  /* 359 */ 'd', 'e', 'a', 'l', 'l', 'o', 'c', 'f', 'r', 'a', 'm', 'e', 0,
  /* 372 */ 'd', 'e', 'a', 'l', 'l', 'o', 'c', '_', 'r', 'e', 't', 'u', 'r', 'n', 0,
  /* 387 */ 'n', 'o', 'p', 0,
  /* 391 */ 'b', 'a', 'r', 'r', 'i', 'e', 'r', 0,
  /* 399 */ 'E', 'r', 'r', 'o', 'r', ';', 32, 's', 'h', 'o', 'u', 'l', 'd', 32, 'n', 'o', 't', 32, 'e', 'm', 'i', 't', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits1 = OpInfo[MI->getOpcode()];
  uint64_t Bits2 = OpInfo2[MI->getOpcode()];
  uint64_t Bits = (Bits2 << 32) | Bits1;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 511)-1;


  // Fragment 0 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 9) & 7) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, ADJCALLSTACKDOWN, ADJ...
    return;
    break;
  case 1:
    // ADD64_rr, ADDASL, ADD_ri, ADD_rr, ADDi_ASLri_V4, ADDi_LSRri_V4, ADDi_M...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADD_ri_cNotPt, ADD_ri_cPt, ADD_ri_cdnNotPt, ADD_ri_cdnPt, ADD_rr_cNotP...
    printOperand(MI, 1, O); 
    break;
  case 3:
    // MEMb_ADDi_MEM_V4, MEMb_ADDr_MEM_V4, MEMb_ANDr_MEM_V4, MEMb_ORr_MEM_V4,...
    printMEMriOperand(MI, 0, O); 
    break;
  case 4:
    // POST_LDrib_cNotPt, POST_LDrib_cPt, POST_LDrib_cdnNotPt_V4, POST_LDrib_...
    printOperand(MI, 2, O); 
    break;
  case 5:
    // STb_GP, STb_GP_V4, STb_GP_nv_V4, STd_GP, STd_GP_V4, STh_GP, STh_GP_V4,...
    printGlobalOperand(MI, 0, O); 
    break;
  case 6:
    // STrib_imm_abs_V4, STrib_imm_abs_nv_V4, STrih_imm_abs_V4, STrih_imm_abs...
    printImmOperand(MI, 0, O); 
    O << ") = "; 
    printOperand(MI, 1, O); 
    break;
  }


  // Fragment 1 encoded into 9 bits for 403 unique commands.
  switch ((Bits >> 12) & 511) {
  default:   // unreachable.
  case 0:
    // ADD64_rr, ADD_ri, ADD_rr, ADDr_ADDri_V4, ADDr_MPYir_V4, ADDr_MPYri_V4,...
    O << " = add("; 
    break;
  case 1:
    // ADDASL, HEXAGON_S2_addasl_rrri
    O << " = addasl("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 2:
    // ADD_ri_cNotPt, ADD_ri_cPt, ADD_rr_cNotPt, ADD_rr_cPt, AND_rr_cNotPt, A...
    O << ") "; 
    printOperand(MI, 0, O); 
    break;
  case 3:
    // ADD_ri_cdnNotPt, ADD_ri_cdnPt, ADD_rr_cdnNotPt, ADD_rr_cdnPt, AND_rr_c...
    O << ".new) "; 
    printOperand(MI, 0, O); 
    break;
  case 4:
    // ADDi_ASLri_V4, ADDi_LSRri_V4, ADDi_MPYri_V4, ADDi_MPYrr_V4
    O << " = add(#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 5:
    // ADDri_acc, ADDrr_acc, HEXAGON_M2_acci, HEXAGON_M2_accii
    O << " += add("; 
    printOperand(MI, 2, O); 
    break;
  case 6:
    // ALLOCFRAME
    O << ')'; 
    return;
    break;
  case 7:
    // ALL_pp, HEXAGON_C2_all8
    O << " = all8("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 8:
    // AND_pnotp, AND_pp, AND_ri, AND_rr, AND_rr64, ANDd_NOTd_V4, HEXAGON_A2_...
    O << " = and("; 
    printOperand(MI, 1, O); 
    break;
  case 9:
    // ANDi_ASLri_V4, ANDi_LSRri_V4
    O << " = and(#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 10:
    // ANDr_ANDr_NOTr_V4, ANDr_ANDrr_V4, HEXAGON_M4_and_and, HEXAGON_M4_and_a...
    O << " &= and("; 
    printOperand(MI, 2, O); 
    break;
  case 11:
    // ANDr_ORrr_V4, HEXAGON_M4_and_or
    O << " &= or("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 12:
    // ANDr_XORrr_V4, HEXAGON_M4_and_xor
    O << " &= xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 13:
    // ANY_pp, HEXAGON_C2_any8
    O << " = any8("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 14:
    // ARGEXTEND, HEXAGON_A2_tfr, HEXAGON_A2_tfrp, HEXAGON_C2_pxfer_map, HEXA...
    O << " = "; 
    printOperand(MI, 1, O); 
    break;
  case 15:
    // ASL, ASL_rr, ASLd, ASLd_ri, HEXAGON_S2_asl_i_p, HEXAGON_S2_asl_i_r, HE...
    O << " = asl("; 
    printOperand(MI, 1, O); 
    break;
  case 16:
    // ASLH, HEXAGON_A2_aslh
    O << " = aslh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 17:
    // ASL_ADD_ri, ASL_ADD_rr, ASL_ADDd_ri, ASL_ADDd_rr, HEXAGON_S2_asl_i_p_a...
    O << " += asl("; 
    printOperand(MI, 2, O); 
    break;
  case 18:
    // ASL_AND_ri, ASL_AND_rr, ASL_ANDd_ri, ASL_ANDd_rr, HEXAGON_S2_asl_i_p_a...
    O << " &= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 19:
    // ASL_OR_ri, ASL_OR_rr, ASL_ORd_ri, ASL_ORd_rr, HEXAGON_S2_asl_i_p_or, H...
    O << " |= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 20:
    // ASL_SUB_ri, ASL_SUB_rr, ASL_SUBd_ri, ASL_SUBd_rr, HEXAGON_S2_asl_i_p_n...
    O << " -= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 21:
    // ASL_XOR_ri, ASL_XORd_ri, ASLd_rr_xor_V4, HEXAGON_S2_asl_i_p_xacc, HEXA...
    O << " ^= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 22:
    // ASRH, HEXAGON_A2_asrh, SI_to_SXTHI_asrh
    O << " = asrh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 23:
    // ASR_ADD_ri, ASR_ADD_rr, ASR_ADDd_ri, ASR_ADDd_rr, HEXAGON_S2_asr_i_p_a...
    O << " += asr("; 
    printOperand(MI, 2, O); 
    break;
  case 24:
    // ASR_AND_ri, ASR_AND_rr, ASR_ANDd_ri, ASR_ANDd_rr, HEXAGON_S2_asr_i_p_a...
    O << " &= asr("; 
    printOperand(MI, 2, O); 
    break;
  case 25:
    // ASR_OR_ri, ASR_OR_rr, ASR_ORd_ri, ASR_ORd_rr, HEXAGON_S2_asr_i_p_or, H...
    O << " |= asr("; 
    printOperand(MI, 2, O); 
    break;
  case 26:
    // ASR_SUB_ri, ASR_SUB_rr, ASR_SUBd_ri, ASR_SUBd_rr, HEXAGON_S2_asr_i_p_n...
    O << " -= asr("; 
    printOperand(MI, 2, O); 
    break;
  case 27:
    // ASR_ri, ASR_rr, ASRd_ri, ASRd_rr, HEXAGON_S2_asr_i_p, HEXAGON_S2_asr_i...
    O << " = asr("; 
    printOperand(MI, 1, O); 
    break;
  case 28:
    // ASRd_rr_xor_V4
    O << " ^= asr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 29:
    // BRCOND, JMP_c, JMP_cNot
    O << ") jump "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 30:
    // BR_JT, CALL, CALLR, CALLRv3, CALLv3, JMP, STrib_imm_abs_V4, STrih_imm_...
    return;
    break;
  case 31:
    // CLRBIT, CLRBIT_31, HEXAGON_S2_clrbit_i, HEXAGON_S2_clrbit_r
    O << " = clrbit("; 
    printOperand(MI, 1, O); 
    break;
  case 32:
    // CMPEHexagon4rr, CMPEQri, CMPEQrr, HEXAGON_C2_cmpeq, HEXAGON_C2_cmpeqi,...
    O << " = cmp.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 33:
    // CMPGEUri, HEXAGON_C2_cmpgeui
    O << " = cmp.geu("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 34:
    // CMPGEri, HEXAGON_C2_cmpgei
    O << " = cmp.ge("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 35:
    // CMPGT64rr, CMPGTri, CMPGTrr, HEXAGON_C2_cmpgt, HEXAGON_C2_cmpgti, HEXA...
    O << " = cmp.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 36:
    // CMPGTU64rr, CMPGTUri, CMPGTUrr, HEXAGON_C2_cmpgtu, HEXAGON_C2_cmpgtui,...
    O << " = cmp.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 37:
    // CMPLTUrr, HEXAGON_C2_cmpltu
    O << " = cmp.ltu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 38:
    // CMPLTrr, HEXAGON_C2_cmplt
    O << " = cmp.lt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 39:
    // CMPbEQri_V4, CMPbEQrr_sbsb_V4, CMPbEQrr_ubub_V4
    O << " = cmpb.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 40:
    // CMPbGTUri_V4, CMPbGTUrr_V4
    O << " = cmpb.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 41:
    // CMPbGTrr_V4
    O << " = cmpb.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 42:
    // CMPhEQri_V4, CMPhEQrr_shl_V4, CMPhEQrr_xor_V4
    O << " = cmph.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 43:
    // CMPhGTUri_V4, CMPhGTUrr_V4
    O << " = cmph.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 44:
    // CMPhGTrr_shl_V4
    O << " = cmph.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 45:
    // COMBINE_ii, COMBINE_ir_V4, HEXAGON_A2_combineii, Hexagon_A4_combineir
    O << " = combine(#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 46:
    // COMBINE_ri_V4, COMBINE_rr, HEXAGON_A2_combine_hh, HEXAGON_A2_combine_h...
    O << " = combine("; 
    printOperand(MI, 1, O); 
    break;
  case 47:
    // CONST32, CONST32GP_set, CONST32_Float_Real, CONST32_Int_Real, CONST32_...
    O << " = CONST32(#"; 
    break;
  case 48:
    // CONST32_Label
    O << " = CONST32("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 49:
    // CONST64_Float_Real, CONST64_Int_Real
    O << " = CONST64(#"; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 50:
    // CONVERT_d2df, HEXAGON_F2_conv_d2df
    O << " = convert_d2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 51:
    // CONVERT_d2sf, HEXAGON_F2_conv_d2sf
    O << " = convert_d2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 52:
    // CONVERT_df2d, CONVERT_df2d_nchop, HEXAGON_F2_conv_df2d, HEXAGON_F2_con...
    O << " = convert_df2d("; 
    printOperand(MI, 1, O); 
    break;
  case 53:
    // CONVERT_df2sf, HEXAGON_F2_conv_df2sf
    O << " = convert_df2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 54:
    // CONVERT_df2ud, CONVERT_df2ud_nchop, HEXAGON_F2_conv_df2ud, HEXAGON_F2_...
    O << " = convert_df2ud("; 
    printOperand(MI, 1, O); 
    break;
  case 55:
    // CONVERT_df2uw, CONVERT_df2uw_nchop, HEXAGON_F2_conv_df2uw, HEXAGON_F2_...
    O << " = convert_df2uw("; 
    printOperand(MI, 1, O); 
    break;
  case 56:
    // CONVERT_df2w, CONVERT_df2w_nchop, HEXAGON_F2_conv_df2w, HEXAGON_F2_con...
    O << " = convert_df2w("; 
    printOperand(MI, 1, O); 
    break;
  case 57:
    // CONVERT_sf2d, CONVERT_sf2d_nchop, HEXAGON_F2_conv_sf2d, HEXAGON_F2_con...
    O << " = convert_sf2d("; 
    printOperand(MI, 1, O); 
    break;
  case 58:
    // CONVERT_sf2df, HEXAGON_F2_conv_sf2df
    O << " = convert_sf2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 59:
    // CONVERT_sf2ud, CONVERT_sf2ud_nchop, HEXAGON_F2_conv_sf2ud, HEXAGON_F2_...
    O << " = convert_sf2ud("; 
    printOperand(MI, 1, O); 
    break;
  case 60:
    // CONVERT_sf2uw, CONVERT_sf2uw_nchop, HEXAGON_F2_conv_sf2uw, HEXAGON_F2_...
    O << " = convert_sf2uw("; 
    printOperand(MI, 1, O); 
    break;
  case 61:
    // CONVERT_sf2w, CONVERT_sf2w_nchop, HEXAGON_F2_conv_sf2w, HEXAGON_F2_con...
    O << " = convert_sf2w("; 
    printOperand(MI, 1, O); 
    break;
  case 62:
    // CONVERT_ud2df, HEXAGON_F2_conv_ud2df
    O << " = convert_ud2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 63:
    // CONVERT_ud2sf, HEXAGON_F2_conv_ud2sf
    O << " = convert_ud2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 64:
    // CONVERT_uw2df, HEXAGON_F2_conv_uw2df
    O << " = convert_uw2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 65:
    // CONVERT_uw2sf, HEXAGON_F2_conv_uw2sf
    O << " = convert_uw2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 66:
    // CONVERT_w2df, HEXAGON_F2_conv_w2df
    O << " = convert_w2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 67:
    // CONVERT_w2sf, HEXAGON_F2_conv_w2sf
    O << " = convert_w2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 68:
    // DEALLOC_RET_cNotPt_V4, DEALLOC_RET_cPt_V4
    O << ") dealloc_return"; 
    return;
    break;
  case 69:
    // DEALLOC_RET_cNotdnPnt_V4, DEALLOC_RET_cdnPnt_V4
    O << ".new) dealloc_return:nt"; 
    return;
    break;
  case 70:
    // DEALLOC_RET_cNotdnPt_V4, DEALLOC_RET_cdnPt_V4
    O << ".new) dealloc_return:t"; 
    return;
    break;
  case 71:
    // FCMPOEQ32_rr, FCMPUEQ32_rr, HEXAGON_F2_sfcmpeq
    O << " = sfcmp.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 72:
    // FCMPOEQ64_rr, FCMPUEQ64_rr, HEXAGON_F2_dfcmpeq
    O << " = dfcmp.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 73:
    // FCMPOGE32_rr, FCMPUGE32_rr, HEXAGON_F2_sfcmpge
    O << " = sfcmp.ge("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 74:
    // FCMPOGE64_rr, FCMPUGE64_rr, HEXAGON_F2_dfcmpge
    O << " = dfcmp.ge("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 75:
    // FCMPOGT32_rr, FCMPUGT32_rr, HEXAGON_F2_sfcmpgt
    O << " = sfcmp.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 76:
    // FCMPOGT64_rr, FCMPUGT64_rr, HEXAGON_F2_dfcmpgt
    O << " = dfcmp.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 77:
    // FMADD_dp, HEXAGON_F2_dffma, HEXAGON_F2_dffma_lib, HEXAGON_F2_dffma_sc
    O << " += dfmpy("; 
    break;
  case 78:
    // FMADD_sp, HEXAGON_F2_sffma, HEXAGON_F2_sffma_lib, HEXAGON_F2_sffma_sc
    O << " += sfmpy("; 
    break;
  case 79:
    // FMAX_dp, HEXAGON_F2_dfmax
    O << " = dfmax("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 80:
    // FMAX_sp, HEXAGON_F2_sfmax
    O << " = sfmax("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 81:
    // FMIN_dp, HEXAGON_F2_dfmin
    O << " = dfmin("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 82:
    // FMIN_sp, HEXAGON_F2_sfmin
    O << " = sfmin("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 83:
    // HEXAGON_A2_abs, HEXAGON_A2_absp, HEXAGON_A2_abssat
    O << " = abs("; 
    printOperand(MI, 1, O); 
    break;
  case 84:
    // HEXAGON_A2_max, Hexagon_A2_maxp, MAXd_rr, MAXw_dd, MAXw_rr
    O << " = max("; 
    break;
  case 85:
    // HEXAGON_A2_maxu, Hexagon_A2_maxup, MAXUd_rr, MAXUw_rr
    O << " = maxu("; 
    break;
  case 86:
    // HEXAGON_A2_min, MINd_rr, MINw_dd, MINw_rr
    O << " = min("; 
    break;
  case 87:
    // HEXAGON_A2_minu, MINUd_rr, MINUw_rr
    O << " = minu("; 
    break;
  case 88:
    // HEXAGON_A2_neg, HEXAGON_A2_negp, HEXAGON_A2_negsat, NEG
    O << " = neg("; 
    printOperand(MI, 1, O); 
    break;
  case 89:
    // HEXAGON_A2_not, HEXAGON_A2_notp, HEXAGON_C2_not, NOT_p, NOT_rr, NOT_rr...
    O << " = not("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 90:
    // HEXAGON_A2_or, HEXAGON_A2_orir, HEXAGON_A2_orp, HEXAGON_C2_or, HEXAGON...
    O << " = or("; 
    printOperand(MI, 1, O); 
    break;
  case 91:
    // HEXAGON_A2_sat
    O << " = sat("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 92:
    // HEXAGON_A2_satb
    O << " = satb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 93:
    // HEXAGON_A2_sath
    O << " = sath("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 94:
    // HEXAGON_A2_satub
    O << " = satub("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 95:
    // HEXAGON_A2_satuh
    O << " = satuh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 96:
    // HEXAGON_A2_sub, HEXAGON_A2_subh_h16_hh, HEXAGON_A2_subh_h16_hl, HEXAGO...
    O << " = sub("; 
    printOperand(MI, 1, O); 
    break;
  case 97:
    // HEXAGON_A2_subri, SUB_ri, SUBi_ASLri_V4, SUBi_LSRri_V4
    O << " = sub(#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 98:
    // HEXAGON_A2_svaddh, HEXAGON_A2_svaddhs, HEXAGON_A2_vaddh, HEXAGON_A2_va...
    O << " = vaddh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 99:
    // HEXAGON_A2_svadduhs, HEXAGON_A2_vadduhs
    O << " = vadduh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 100:
    // HEXAGON_A2_svavgh, HEXAGON_A2_svavghs, HEXAGON_A2_vavgh, HEXAGON_A2_va...
    O << " = vavgh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 101:
    // HEXAGON_A2_svnavgh, HEXAGON_A2_vnavgh, HEXAGON_A2_vnavghcr, HEXAGON_A2...
    O << " = vnavgh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 102:
    // HEXAGON_A2_svsubh, HEXAGON_A2_svsubhs, HEXAGON_A2_vsubh, HEXAGON_A2_vs...
    O << " = vsubh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 103:
    // HEXAGON_A2_svsubuhs, HEXAGON_A2_vsubuhs
    O << " = vsubuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 104:
    // HEXAGON_A2_swiz
    O << " = swiz("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 105:
    // HEXAGON_A2_sxtb, SXTB
    O << " = sxtb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 106:
    // HEXAGON_A2_sxth, SXTH
    O << " = sxth("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 107:
    // HEXAGON_A2_sxtw, SXTW
    O << " = sxtw("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 108:
    // HEXAGON_A2_tfrih
    O << ".h = #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 109:
    // HEXAGON_A2_tfril
    O << ".l = #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 110:
    // HEXAGON_A2_tfrpi, HEXAGON_A2_tfrsi, TFRI, TFRI64
    O << " = #"; 
    printImmOperand(MI, 1, O); 
    return;
    break;
  case 111:
    // HEXAGON_A2_vabsh, HEXAGON_A2_vabshsat
    O << " = vabsh("; 
    printOperand(MI, 1, O); 
    break;
  case 112:
    // HEXAGON_A2_vabsw, HEXAGON_A2_vabswsat
    O << " = vabsw("; 
    printOperand(MI, 1, O); 
    break;
  case 113:
    // HEXAGON_A2_vaddub, HEXAGON_A2_vaddubs
    O << " = vaddub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 114:
    // HEXAGON_A2_vaddw, HEXAGON_A2_vaddws
    O << " = vaddw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 115:
    // HEXAGON_A2_vavgub, HEXAGON_A2_vavgubr
    O << " = vavgub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 116:
    // HEXAGON_A2_vavguh, HEXAGON_A2_vavguhr
    O << " = vavguh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 117:
    // HEXAGON_A2_vavguw, HEXAGON_A2_vavguwr
    O << " = vavguw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 118:
    // HEXAGON_A2_vavgw, HEXAGON_A2_vavgwcr, HEXAGON_A2_vavgwr
    O << " = vavgw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 119:
    // HEXAGON_A2_vcmpbeq
    O << " = vcmpb.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 120:
    // HEXAGON_A2_vcmpbgtu
    O << " = vcmpb.gtu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 121:
    // HEXAGON_A2_vcmpheq
    O << " = vcmph.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 122:
    // HEXAGON_A2_vcmphgt
    O << " = vcmph.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 123:
    // HEXAGON_A2_vcmphgtu
    O << " = vcmph.gtu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 124:
    // HEXAGON_A2_vcmpweq
    O << " = vcmpw.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 125:
    // HEXAGON_A2_vcmpwgt
    O << " = vcmpw.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 126:
    // HEXAGON_A2_vcmpwgtu
    O << " = vcmpw.gtu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 127:
    // HEXAGON_A2_vconj
    O << " = vconj("; 
    printOperand(MI, 1, O); 
    O << "):sat"; 
    return;
    break;
  case 128:
    // HEXAGON_A2_vmaxh
    O << " = vmaxh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 129:
    // HEXAGON_A2_vmaxub
    O << " = vmaxub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 130:
    // HEXAGON_A2_vmaxuh
    O << " = vmaxuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 131:
    // HEXAGON_A2_vmaxuw
    O << " = vmaxuw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 132:
    // HEXAGON_A2_vmaxw
    O << " = vmaxw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 133:
    // HEXAGON_A2_vminh
    O << " = vminh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 134:
    // HEXAGON_A2_vminub
    O << " = vminub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 135:
    // HEXAGON_A2_vminuh
    O << " = vminuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 136:
    // HEXAGON_A2_vminuw
    O << " = vminuw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 137:
    // HEXAGON_A2_vminw
    O << " = vminw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 138:
    // HEXAGON_A2_vnavgw, HEXAGON_A2_vnavgwcr, HEXAGON_A2_vnavgwr
    O << " = vnavgw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 139:
    // HEXAGON_A2_vraddub
    O << " = vraddub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 140:
    // HEXAGON_A2_vraddub_acc
    O << " += vraddub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 141:
    // HEXAGON_A2_vrsadub
    O << " = vrsadub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 142:
    // HEXAGON_A2_vrsadub_acc
    O << " += vrsadub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 143:
    // HEXAGON_A2_vsubub, HEXAGON_A2_vsububs
    O << " = vsubub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 144:
    // HEXAGON_A2_vsubw, HEXAGON_A2_vsubws
    O << " = vsubw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 145:
    // HEXAGON_A2_xor, HEXAGON_A2_xorp, HEXAGON_C2_xor, TFR_PdFalse, XOR_pp, ...
    O << " = xor("; 
    break;
  case 146:
    // HEXAGON_A2_zxtb, ZXTB
    O << " = zxtb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 147:
    // HEXAGON_A2_zxth, ZXTH
    O << " = zxth("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 148:
    // HEXAGON_A4_cround_ri, HEXAGON_A4_cround_rr
    O << " = cround("; 
    printOperand(MI, 1, O); 
    break;
  case 149:
    // HEXAGON_A4_modwrapu
    O << " = modwrap("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 150:
    // HEXAGON_A4_round_ri, HEXAGON_A4_round_ri_sat, HEXAGON_A4_round_rr, HEX...
    O << " = round("; 
    printOperand(MI, 1, O); 
    break;
  case 151:
    // HEXAGON_A5_vaddhubs
    O << " = vaddhub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 152:
    // HEXAGON_C2_mask, MASK_p
    O << " = mask("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 153:
    // HEXAGON_C2_mux, HEXAGON_C2_muxii, HEXAGON_C2_muxir, HEXAGON_C2_muxri, ...
    O << " = mux("; 
    printOperand(MI, 1, O); 
    break;
  case 154:
    // HEXAGON_C2_vitpack, VITPACK_pp
    O << " = vitpack("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 155:
    // HEXAGON_C2_vmux, VMUX_prr64
    O << " = vmux("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 156:
    // HEXAGON_C4_fastcorner9, Hexagon_C4_fastcorner9
    O << " = fastcorner9("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 157:
    // HEXAGON_C4_fastcorner9_not, Hexagon_C4_fastcorner9_not
    O << " = !fastcorner9("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 158:
    // HEXAGON_F2_dfadd, fADD64_rr
    O << " = dfadd("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 159:
    // HEXAGON_F2_dfclass
    O << " = dfclass("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 160:
    // HEXAGON_F2_dfcmpuo
    O << " = dfcmp.uo("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 161:
    // HEXAGON_F2_dffixupd
    O << " = dffixupd("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 162:
    // HEXAGON_F2_dffixupn
    O << " = dffixupn("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 163:
    // HEXAGON_F2_dffixupr
    O << " = dffixupr("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 164:
    // HEXAGON_F2_dffms, HEXAGON_F2_dffms_lib
    O << " -= dfmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 165:
    // HEXAGON_F2_dfimm_n, HEXAGON_F2_dfimm_p
    O << " = dfmake#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 166:
    // HEXAGON_F2_dfmpy, fMUL64_rr
    O << " = dfmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 167:
    // HEXAGON_F2_dfsub, fSUB64_rr
    O << " = dfsub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 168:
    // HEXAGON_F2_sfadd, fADD_rr
    O << " = sfadd("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 169:
    // HEXAGON_F2_sfclass
    O << " = sfclass("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 170:
    // HEXAGON_F2_sfcmpuo
    O << " = sfcmp.uo("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 171:
    // HEXAGON_F2_sffixupd
    O << " = sffixupd("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 172:
    // HEXAGON_F2_sffixupn
    O << " = sffixupn("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 173:
    // HEXAGON_F2_sffixupr
    O << " = sffixupr("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 174:
    // HEXAGON_F2_sffms, HEXAGON_F2_sffms_lib
    O << " -= sfmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 175:
    // HEXAGON_F2_sfimm_n, HEXAGON_F2_sfimm_p
    O << " = sfmake#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 176:
    // HEXAGON_F2_sfmpy, fMUL_rr
    O << " = sfmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 177:
    // HEXAGON_F2_sfsub, fSUB_rr
    O << " = sfsub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 178:
    // HEXAGON_M2_cmaci_s0
    O << " += cmpyi("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 179:
    // HEXAGON_M2_cmacr_s0
    O << " += cmpyr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 180:
    // HEXAGON_M2_cmacs_s0, HEXAGON_M2_cmacs_s1, HEXAGON_M2_cmacsc_s0, HEXAGO...
    O << " += cmpy("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 181:
    // HEXAGON_M2_cmpyi_s0
    O << " = cmpyi("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 182:
    // HEXAGON_M2_cmpyr_s0
    O << " = cmpyr("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 183:
    // HEXAGON_M2_cmpyrs_s0, HEXAGON_M2_cmpyrs_s1, HEXAGON_M2_cmpyrsc_s0, HEX...
    O << " = cmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 184:
    // HEXAGON_M2_cnacs_s0, HEXAGON_M2_cnacs_s1, HEXAGON_M2_cnacsc_s0, HEXAGO...
    O << " -= cmpy("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 185:
    // HEXAGON_M2_dpmpyss_acc_s0, HEXAGON_M2_mpy_acc_hh_s0, HEXAGON_M2_mpy_ac...
    O << " += mpy("; 
    printOperand(MI, 2, O); 
    break;
  case 186:
    // HEXAGON_M2_dpmpyss_nac_s0, HEXAGON_M2_mpy_nac_hh_s0, HEXAGON_M2_mpy_na...
    O << " -= mpy("; 
    printOperand(MI, 2, O); 
    break;
  case 187:
    // HEXAGON_M2_dpmpyss_rnd_s0, HEXAGON_M2_dpmpyss_s0, HEXAGON_M2_hmmpyh_rs...
    O << " = mpy("; 
    printOperand(MI, 1, O); 
    break;
  case 188:
    // HEXAGON_M2_dpmpyuu_acc_s0, HEXAGON_M2_mpyu_acc_hh_s0, HEXAGON_M2_mpyu_...
    O << " += mpyu("; 
    printOperand(MI, 2, O); 
    break;
  case 189:
    // HEXAGON_M2_dpmpyuu_nac_s0, HEXAGON_M2_mpyu_nac_hh_s0, HEXAGON_M2_mpyu_...
    O << " -= mpyu("; 
    printOperand(MI, 2, O); 
    break;
  case 190:
    // HEXAGON_M2_dpmpyuu_s0, HEXAGON_M2_mpyu_hh_s0, HEXAGON_M2_mpyu_hh_s1, H...
    O << " = mpyu("; 
    printOperand(MI, 1, O); 
    break;
  case 191:
    // HEXAGON_M2_maci, HEXAGON_M2_macsip, MPYI_acc_ri, MPYI_acc_rr
    O << " += mpyi("; 
    printOperand(MI, 2, O); 
    break;
  case 192:
    // HEXAGON_M2_macsin, MPYI_sub_ri
    O << " -= mpyi("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 193:
    // HEXAGON_M2_mmachs_rs0, HEXAGON_M2_mmachs_rs1, HEXAGON_M2_mmachs_s0, HE...
    O << " += vmpywoh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 194:
    // HEXAGON_M2_mmacls_rs0, HEXAGON_M2_mmacls_rs1, HEXAGON_M2_mmacls_s0, HE...
    O << " += vmpyweh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 195:
    // HEXAGON_M2_mmacuhs_rs0, HEXAGON_M2_mmacuhs_rs1, HEXAGON_M2_mmacuhs_s0,...
    O << " += vmpywouh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 196:
    // HEXAGON_M2_mmaculs_rs0, HEXAGON_M2_mmaculs_rs1, HEXAGON_M2_mmaculs_s0,...
    O << " += vmpyweuh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 197:
    // HEXAGON_M2_mmpyh_rs0, HEXAGON_M2_mmpyh_rs1, HEXAGON_M2_mmpyh_s0, HEXAG...
    O << " = vmpywoh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 198:
    // HEXAGON_M2_mmpyl_rs0, HEXAGON_M2_mmpyl_rs1, HEXAGON_M2_mmpyl_s0, HEXAG...
    O << " = vmpyweh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 199:
    // HEXAGON_M2_mmpyuh_rs0, HEXAGON_M2_mmpyuh_rs1, HEXAGON_M2_mmpyuh_s0, HE...
    O << " = vmpywouh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 200:
    // HEXAGON_M2_mmpyul_rs0, HEXAGON_M2_mmpyul_rs1, HEXAGON_M2_mmpyul_s0, HE...
    O << " = vmpyweuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 201:
    // HEXAGON_M2_mpyi, Hexagon_M2_mpysmi, MPYI, MPYI_ri
    O << " = mpyi("; 
    printOperand(MI, 1, O); 
    break;
  case 202:
    // HEXAGON_M2_mpyui
    O << " = mpyui("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 203:
    // HEXAGON_M2_nacci, HEXAGON_M2_naccii, SUBri_acc, SUBrr_acc
    O << " -= add("; 
    printOperand(MI, 2, O); 
    break;
  case 204:
    // HEXAGON_M2_subacc
    O << " += sub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 205:
    // HEXAGON_M2_vabsdiffh
    O << " = vabsdiffh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 206:
    // HEXAGON_M2_vabsdiffw
    O << " = vabsdiffw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 207:
    // HEXAGON_M2_vcmac_s0_sat_i
    O << " += vcmpyi("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):sat"; 
    return;
    break;
  case 208:
    // HEXAGON_M2_vcmac_s0_sat_r
    O << " += vcmpyr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):sat"; 
    return;
    break;
  case 209:
    // HEXAGON_M2_vcmpy_s0_sat_i, HEXAGON_M2_vcmpy_s1_sat_i
    O << " = vcmpyi("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 210:
    // HEXAGON_M2_vcmpy_s0_sat_r, HEXAGON_M2_vcmpy_s1_sat_r
    O << " = vcmpyr("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 211:
    // HEXAGON_M2_vdmacs_s0, HEXAGON_M2_vdmacs_s1
    O << " += vdmpy("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 212:
    // HEXAGON_M2_vdmpyrs_s0, HEXAGON_M2_vdmpyrs_s1, HEXAGON_M2_vdmpys_s0, HE...
    O << " = vdmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 213:
    // HEXAGON_M2_vmac2, HEXAGON_M2_vmac2s_s0, HEXAGON_M2_vmac2s_s1
    O << " += vmpyh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 214:
    // HEXAGON_M2_vmac2es, HEXAGON_M2_vmac2es_s0, HEXAGON_M2_vmac2es_s1
    O << " += vmpyeh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 215:
    // HEXAGON_M2_vmpy2es_s0, HEXAGON_M2_vmpy2es_s1
    O << " = vmpyeh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 216:
    // HEXAGON_M2_vmpy2s_s0, HEXAGON_M2_vmpy2s_s0pack, HEXAGON_M2_vmpy2s_s1, ...
    O << " = vmpyh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 217:
    // HEXAGON_M2_vrcmaci_s0, HEXAGON_M2_vrcmaci_s0c
    O << " += vrcmpyi("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 218:
    // HEXAGON_M2_vrcmacr_s0, HEXAGON_M2_vrcmacr_s0c
    O << " += vrcmpyr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 219:
    // HEXAGON_M2_vrcmpyi_s0, HEXAGON_M2_vrcmpyi_s0c
    O << " = vrcmpyi("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 220:
    // HEXAGON_M2_vrcmpyr_s0, HEXAGON_M2_vrcmpyr_s0c
    O << " = vrcmpyr("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 221:
    // HEXAGON_M2_vrmac_s0
    O << " += vrmpyh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 222:
    // HEXAGON_M2_vrmpy_s0
    O << " = vrmpyh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 223:
    // HEXAGON_M2_xor_xacc, Hexagon_M4_xor_xacc, XORd_XORdd, XORr_XORrr_V4
    O << " ^= xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 224:
    // HEXAGON_M4_or_and, HEXAGON_M4_or_andn, HEXAGON_S4_or_andi, ORr_ANDr_NO...
    O << " |= and("; 
    printOperand(MI, 2, O); 
    break;
  case 225:
    // HEXAGON_M4_or_or, HEXAGON_S4_or_ori, ORr_ORri_V4, ORr_ORrr_V4
    O << " |= or("; 
    printOperand(MI, 2, O); 
    break;
  case 226:
    // HEXAGON_M4_or_xor, ORr_XORrr_V4
    O << " |= xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 227:
    // HEXAGON_M4_xor_and, HEXAGON_M4_xor_andn, XORr_ANDr_NOTr_V4, XORr_ANDrr...
    O << " ^= and("; 
    printOperand(MI, 2, O); 
    break;
  case 228:
    // HEXAGON_M4_xor_or, XORr_ORrr_V4
    O << " ^= or("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 229:
    // HEXAGON_M5_vdmacbsu
    O << " += vdmpybsu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):sat"; 
    return;
    break;
  case 230:
    // HEXAGON_M5_vdmpybsu
    O << " = vdmpybsu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 231:
    // HEXAGON_M5_vmacbsu
    O << " += vmpybsu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 232:
    // HEXAGON_M5_vmacbuu
    O << " += vmpybu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 233:
    // HEXAGON_M5_vmpybsu
    O << " = vmpybsu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 234:
    // HEXAGON_M5_vmpybuu
    O << " = vmpybu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 235:
    // HEXAGON_M5_vrmacbsu
    O << " += vrmpybsu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 236:
    // HEXAGON_M5_vrmacbuu
    O << " += vrmpybu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 237:
    // HEXAGON_M5_vrmpybsu
    O << " = vrmpybsu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 238:
    // HEXAGON_M5_vrmpybuu
    O << " = vrmpybu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 239:
    // HEXAGON_S2_asl_i_vh, HEXAGON_S2_asl_r_vh
    O << " = vaslh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 240:
    // HEXAGON_S2_asl_i_vw, HEXAGON_S2_asl_r_vw
    O << " = vaslw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 241:
    // HEXAGON_S2_asr_i_p_rnd_goodsyntax, HEXAGON_S2_asr_i_r_rnd_goodsyntax
    O << " = asrrnd("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 242:
    // HEXAGON_S2_asr_i_svw_trun, HEXAGON_S2_asr_i_vw, HEXAGON_S2_asr_r_svw_t...
    O << " = vasrw("; 
    printOperand(MI, 1, O); 
    break;
  case 243:
    // HEXAGON_S2_asr_i_vh, HEXAGON_S2_asr_r_vh, HEXAGON_S5_vasrhrnd_goodsynt...
    O << " = vasrh("; 
    printOperand(MI, 1, O); 
    break;
  case 244:
    // HEXAGON_S2_cl0, HEXAGON_S2_cl0p
    O << " = cl0("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 245:
    // HEXAGON_S2_cl1, HEXAGON_S2_cl1p
    O << " = cl1("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 246:
    // HEXAGON_S2_clb, HEXAGON_S2_clbp
    O << " = clb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 247:
    // HEXAGON_S2_clbnorm
    O << " = normamt("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 248:
    // HEXAGON_S2_ct0
    O << " = ct0("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 249:
    // HEXAGON_S2_ct1
    O << " = ct1("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 250:
    // HEXAGON_S2_extractu, HEXAGON_S2_extractu_rp, HEXAGON_S2_extractup, HEX...
    O << " = extractu("; 
    printOperand(MI, 1, O); 
    break;
  case 251:
    // HEXAGON_S2_lsl_r_p, HEXAGON_S2_lsl_r_r, LSL_rr, LSLd
    O << " = lsl("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 252:
    // HEXAGON_S2_lsl_r_p_acc, HEXAGON_S2_lsl_r_r_acc, LSL_ADD_rr, LSL_ADDd_r...
    O << " += lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 253:
    // HEXAGON_S2_lsl_r_p_and, HEXAGON_S2_lsl_r_r_and, LSL_AND_rr, LSL_ANDd_r...
    O << " &= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 254:
    // HEXAGON_S2_lsl_r_p_nac, HEXAGON_S2_lsl_r_r_nac, LSL_SUB_rr, LSL_SUBd_r...
    O << " -= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 255:
    // HEXAGON_S2_lsl_r_p_or, HEXAGON_S2_lsl_r_r_or, LSL_OR_rr, LSL_ORd_rr
    O << " |= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 256:
    // HEXAGON_S2_lsl_r_vh
    O << " = vlslh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 257:
    // HEXAGON_S2_lsl_r_vw
    O << " = vlslw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 258:
    // HEXAGON_S2_lsr_i_p, HEXAGON_S2_lsr_i_r, HEXAGON_S2_lsr_r_p, HEXAGON_S2...
    O << " = lsr("; 
    printOperand(MI, 1, O); 
    break;
  case 259:
    // HEXAGON_S2_lsr_i_p_acc, HEXAGON_S2_lsr_i_r_acc, HEXAGON_S2_lsr_r_p_acc...
    O << " += lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 260:
    // HEXAGON_S2_lsr_i_p_and, HEXAGON_S2_lsr_i_r_and, HEXAGON_S2_lsr_r_p_and...
    O << " &= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 261:
    // HEXAGON_S2_lsr_i_p_nac, HEXAGON_S2_lsr_i_r_nac, HEXAGON_S2_lsr_r_p_nac...
    O << " -= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 262:
    // HEXAGON_S2_lsr_i_p_or, HEXAGON_S2_lsr_i_r_or, HEXAGON_S2_lsr_r_p_or, H...
    O << " |= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 263:
    // HEXAGON_S2_lsr_i_p_xacc, HEXAGON_S2_lsr_i_r_xacc, LSR_XOR_ri, LSR_XORd...
    O << " ^= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 264:
    // HEXAGON_S2_lsr_i_vh, HEXAGON_S2_lsr_r_vh
    O << " = vlsrh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 265:
    // HEXAGON_S2_lsr_i_vw, HEXAGON_S2_lsr_r_vw
    O << " = vlsrw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 266:
    // HEXAGON_S2_packhl
    O << " = packhl("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 267:
    // HEXAGON_S2_parityp
    O << " = parity("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 268:
    // HEXAGON_S2_setbit_i, HEXAGON_S2_setbit_r, SETBIT, SETBIT_31, TOGBIT
    O << " = setbit("; 
    printOperand(MI, 1, O); 
    break;
  case 269:
    // HEXAGON_S2_shuffeb
    O << " = shuffeb("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 270:
    // HEXAGON_S2_shuffeh
    O << " = shuffeh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 271:
    // HEXAGON_S2_shuffob
    O << " = shuffob("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 272:
    // HEXAGON_S2_shuffoh
    O << " = shuffoh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 273:
    // HEXAGON_S2_svsathb, HEXAGON_S2_vsathb, HEXAGON_S2_vsathb_nopack
    O << " = vsathb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 274:
    // HEXAGON_S2_svsathub, HEXAGON_S2_vsathub, HEXAGON_S2_vsathub_nopack
    O << " = vsathub("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 275:
    // HEXAGON_S2_togglebit_i, HEXAGON_S2_togglebit_r, TOGBIT_31
    O << " = togglebit("; 
    printOperand(MI, 1, O); 
    break;
  case 276:
    // HEXAGON_S2_tstbit_i, HEXAGON_S2_tstbit_r
    O << " = tstbit("; 
    printOperand(MI, 1, O); 
    break;
  case 277:
    // HEXAGON_S2_valignib, HEXAGON_S2_valignrb, VALIGN_rrp
    O << " = valignb("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 278:
    // HEXAGON_S2_vcrotate
    O << " = vcrotate("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 279:
    // HEXAGON_S2_vrndpackwh, HEXAGON_S2_vrndpackwhs
    O << " = vrndwh("; 
    printOperand(MI, 1, O); 
    break;
  case 280:
    // HEXAGON_S2_vsatwh, HEXAGON_S2_vsatwh_nopack
    O << " = vsatwh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 281:
    // HEXAGON_S2_vsatwuh, HEXAGON_S2_vsatwuh_nopack
    O << " = vsatwuh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 282:
    // HEXAGON_S2_vsplatrb
    O << " = vsplatb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 283:
    // HEXAGON_S2_vsplatrh
    O << " = vsplath("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 284:
    // HEXAGON_S2_vsxtbh
    O << " = vsxtbh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 285:
    // HEXAGON_S2_vsxthw
    O << " = vsxthw("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 286:
    // HEXAGON_S2_vtrunehb
    O << " = vtrunehb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 287:
    // HEXAGON_S2_vtrunewh
    O << " = vtrunewh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 288:
    // HEXAGON_S2_vtrunohb
    O << " = vtrunohb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 289:
    // HEXAGON_S2_vtrunowh
    O << " = vtrunowh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 290:
    // HEXAGON_S2_vzxtbh
    O << " = vzxtbh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 291:
    // HEXAGON_S2_vzxthw
    O << " = vzxthw("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 292:
    // HEXAGON_S5_asrhub_rnd_sat_goodsyntax, HEXAGON_S5_asrhub_sat
    O << " = vasrhub("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    break;
  case 293:
    // HEXAGON_S5_popcountp
    O << " = popcount("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 294:
    // HEXAGON_circ_ldd, LDrid, LDrid_abs_set_V4, LDrid_abs_setimm_V4, LDrid_...
    O << " = memd("; 
    break;
  case 295:
    // HI, HI_jt, HI_label, HIi
    O << ".h = #HI("; 
    break;
  case 296:
    // Hexagon_A4_rcmpneq, Hexagon_A4_rcmpneqi, Hexagon_C4_cmpneq, Hexagon_C4...
    O << " = !cmp.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 297:
    // Hexagon_C2_bitsclr, Hexagon_C2_bitsclri
    O << " = bitsclr("; 
    printOperand(MI, 1, O); 
    break;
  case 298:
    // Hexagon_C2_bitsset
    O << " = bitsset("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 299:
    // Hexagon_C4_cmplte, Hexagon_C4_cmpltei
    O << " = !cmp.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 300:
    // Hexagon_C4_cmplteu, Hexagon_C4_cmplteui
    O << " = !cmp.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 301:
    // Hexagon_M2_vradduh
    O << " = vradduh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 302:
    // Hexagon_M2_vrcmpys_acc_s1
    O << " += vrcmpys("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):<<1:sat"; 
    return;
    break;
  case 303:
    // Hexagon_M2_vrcmpys_s1, Hexagon_M2_vrcmpys_s1rp
    O << " = vrcmpys("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 304:
    // Hexagon_S2_brev
    O << " = brev("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 305:
    // Hexagon_S2_deinterleave
    O << " = deinterleave("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 306:
    // Hexagon_S2_insert, Hexagon_S2_insert_rp, Hexagon_S2_insertp, Hexagon_S...
    O << " = insert("; 
    printOperand(MI, 2, O); 
    break;
  case 307:
    // Hexagon_S2_interleave
    O << " = interleave("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 308:
    // Hexagon_S2_lfsp
    O << " = lfs("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 309:
    // Hexagon_S2_tableidxb_goodsyntax
    O << " = tableidxb("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 310:
    // Hexagon_S2_tableidxd_goodsyntax
    O << " = tableidxd("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 311:
    // Hexagon_S2_tableidxh_goodsyntax
    O << " = tableidxh("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 312:
    // Hexagon_S2_tableidxw_goodsyntax
    O << " = tableidxw("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 313:
    // Hexagon_S2_vspliceib, Hexagon_S2_vsplicerb, VSPLICE_rrp
    O << " = vspliceb("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 314:
    // JMPR_cNotPt, JMPR_cPt
    O << ") jumpr r31"; 
    return;
    break;
  case 315:
    // JMPR_cdnNotPnt, JMPR_cdnPnt
    O << ".new) jumpr:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 316:
    // JMPR_cdnNotPt_V3, JMPR_cdnPt_V3
    O << ".new) jumpr:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 317:
    // JMP_EQriNotPnt_ie_nv_V4, JMP_EQriNotPnt_nv_V4, JMP_EQriNotPntneg_ie_nv...
    O << ".new, #"; 
    break;
  case 318:
    // JMP_EQrrNotPnt_ie_nv_V4, JMP_EQrrNotPnt_nv_V4, JMP_EQrrNotPt_ie_nv_V4,...
    O << ".new, "; 
    printOperand(MI, 1, O); 
    break;
  case 319:
    // JMP_GTUrrdnNotPnt_ie_nv_V4, JMP_GTUrrdnNotPnt_nv_V4, JMP_GTUrrdnNotPt_...
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 320:
    // JMP_cdnNotPnt, JMP_cdnPnt
    O << ".new) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 321:
    // JMP_cdnNotPt, JMP_cdnPt
    O << ".new) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 322:
    // LDb_GP, LDrib_GP, LDrib_imm_abs_V4
    O << " = memb(#"; 
    break;
  case 323:
    // LDb_GP_V4, LDrib_GP_V4
    O << "=memb(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 324:
    // LDd_GP, LDrid_GP
    O << " = memd(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 325:
    // LDd_GP_V4, LDrid_GP_V4
    O << "=memd(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 326:
    // LDh_GP, LDrih_GP, LDrih_imm_abs_V4
    O << " = memh(#"; 
    break;
  case 327:
    // LDh_GP_V4, LDrih_GP_V4
    O << "=memh(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 328:
    // LDrib, LDrib_abs_set_V4, LDrib_abs_setimm_V4, LDrib_ind_lo_V4, LDrib_i...
    O << " = memb("; 
    break;
  case 329:
    // LDrib_abs_V4
    O << " = memb(##"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 330:
    // LDrib_indexed_V4, LDrib_indexed_shl_V4
    O << "=memb("; 
    printOperand(MI, 1, O); 
    O << '+'; 
    printOperand(MI, 2, O); 
    break;
  case 331:
    // LDrid_abs_V4
    O << " = memd(##"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 332:
    // LDrid_ind_lo_V4, LDrid_indexed_V4, LDrid_indexed_shl_V4
    O << "=memd("; 
    printOperand(MI, 1, O); 
    break;
  case 333:
    // LDrih, LDrih_abs_set_V4, LDrih_abs_setimm_V4, LDrih_ind_lo_V4, LDrih_i...
    O << " = memh("; 
    break;
  case 334:
    // LDrih_abs_V4
    O << " = memh(##"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 335:
    // LDrih_indexed_V4, LDrih_indexed_shl_V4
    O << "=memh("; 
    printOperand(MI, 1, O); 
    O << '+'; 
    printOperand(MI, 2, O); 
    break;
  case 336:
    // LDriub, LDriub_abs_set_V4, LDriub_abs_setimm_V4, LDriub_ind_lo_V4, LDr...
    O << " = memub("; 
    break;
  case 337:
    // LDriub_GP, LDriub_imm_abs_V4, LDub_GP
    O << " = memub(#"; 
    break;
  case 338:
    // LDriub_GP_V4, LDub_GP_V4
    O << "=memub(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 339:
    // LDriub_abs_V4
    O << " = memub(##"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 340:
    // LDriub_ae_indexed_V4, LDriub_ae_indexed_shl_V4, LDriub_indexed_V4, LDr...
    O << "=memub("; 
    printOperand(MI, 1, O); 
    O << '+'; 
    printOperand(MI, 2, O); 
    break;
  case 341:
    // LDriuh, LDriuh_abs_set_V4, LDriuh_abs_setimm_V4, LDriuh_ind_lo_V4, LDr...
    O << " = memuh("; 
    break;
  case 342:
    // LDriuh_GP, LDriuh_imm_abs_V4, LDuh_GP
    O << " = memuh(#"; 
    break;
  case 343:
    // LDriuh_GP_V4, LDuh_GP_V4
    O << "=memuh(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 344:
    // LDriuh_abs_V4
    O << " = memuh(##"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 345:
    // LDriuh_ae_indexed_V4, LDriuh_ae_indexed_shl_V4, LDriuh_indexed_V4, LDr...
    O << "=memuh("; 
    printOperand(MI, 1, O); 
    O << '+'; 
    printOperand(MI, 2, O); 
    break;
  case 346:
    // LDriw, LDriw_abs_set_V4, LDriw_abs_setimm_V4, LDriw_f, LDriw_ind_lo_V4...
    O << " = memw("; 
    break;
  case 347:
    // LDriw_GP, LDriw_imm_abs_V4, LDw_GP
    O << " = memw(#"; 
    break;
  case 348:
    // LDriw_GP_V4, LDw_GP_V4
    O << "=memw(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 349:
    // LDriw_abs_V4
    O << " = memw(##"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 350:
    // LDriw_indexed_V4, LDriw_indexed_shl_V4
    O << "=memw("; 
    printOperand(MI, 1, O); 
    O << '+'; 
    printOperand(MI, 2, O); 
    break;
  case 351:
    // LO, LO_jt, LO_label, LOi
    O << ".l = #LO("; 
    break;
  case 352:
    // LOOP0_i
    O << ", #"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 353:
    // LSLd_rr_xor_V4
    O << " ^= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 354:
    // LSLi_V4
    O << " = lsl(#"; 
    printImmOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 355:
    // MEMb_ADDi_MEM_V4, MEMb_ADDr_MEM_V4, MEMh_ADDi_MEM_V4, MEMh_ADDr_MEM_V4...
    O << ") += "; 
    break;
  case 356:
    // MEMb_ADDi_indexed_MEM_V4, MEMb_ADDr_indexed_MEM_V4, MEMb_ANDr_indexed_...
    O << "+#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 357:
    // MEMb_ANDr_MEM_V4, MEMh_ANDr_MEM_V4, MEMw_ANDr_MEM_V4
    O << ") &= "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 358:
    // MEMb_ORr_MEM_V4, MEMh_ORr_MEM_V4, MEMw_ORr_MEM_V4
    O << ") |= "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 359:
    // MEMb_SUBi_MEM_V4, MEMb_SUBr_MEM_V4, MEMh_SUBi_MEM_V4, MEMh_SUBr_MEM_V4...
    O << ") -= "; 
    break;
  case 360:
    // MPYI_rin
    O << " =- mpyi("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 361:
    // MPYI_riu
    O << " =+ mpyi("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 362:
    // ORi_ASLri_V4, ORi_LSRri_V4
    O << " = or(#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 363:
    // POST_STbri, POST_STbri_nv_V4, POST_STdri, POST_SThri, POST_SThri_nv_V4...
    O << "++#"; 
    printImmOperand(MI, 3, O); 
    O << ") = "; 
    printOperand(MI, 1, O); 
    break;
  case 364:
    // POST_STbri_cNotPt, POST_STbri_cNotPt_nv_V4, POST_STbri_cPt, POST_STbri...
    O << ") memb("; 
    break;
  case 365:
    // POST_STbri_cdnNotPt_V4, POST_STbri_cdnNotPt_nv_V4, POST_STbri_cdnPt_V4...
    O << ".new) memb("; 
    break;
  case 366:
    // POST_STdri_cNotPt, POST_STdri_cPt, STrid_cNotPt, STrid_cPt, STrid_inde...
    O << ") memd("; 
    break;
  case 367:
    // POST_STdri_cdnNotPt_V4, POST_STdri_cdnPt_V4, STrid_cdnNotPt_V4, STrid_...
    O << ".new) memd("; 
    break;
  case 368:
    // POST_SThri_cNotPt, POST_SThri_cNotPt_nv_V4, POST_SThri_cPt, POST_SThri...
    O << ") memh("; 
    break;
  case 369:
    // POST_SThri_cdnNotPt_V4, POST_SThri_cdnNotPt_nv_V4, POST_SThri_cdnPt_V4...
    O << ".new) memh("; 
    break;
  case 370:
    // POST_STwri_cNotPt, POST_STwri_cNotPt_nv_V4, POST_STwri_cPt, POST_STwri...
    O << ") memw("; 
    break;
  case 371:
    // POST_STwri_cdnNotPt_V4, POST_STwri_cdnNotPt_nv_V4, POST_STwri_cdnPt_V4...
    O << ".new) memw("; 
    break;
  case 372:
    // RESTORE_DEALLOC_BEFORE_TAILCALL_V4
    O << " // Restore_and_dealloc_before_tailcall"; 
    return;
    break;
  case 373:
    // RESTORE_DEALLOC_RET_JMP_V4
    O << " // Restore_and_dealloc_return"; 
    return;
    break;
  case 374:
    // SAVE_REGISTERS_CALL_V4
    O << " // Save_calle_saved_registers"; 
    return;
    break;
  case 375:
    // STb_GP, STb_GP_V4, STb_GP_nv_V4, STd_GP, STd_GP_V4, STh_GP, STh_GP_V4,...
    O << ") = "; 
    break;
  case 376:
    // STb_GP_cNotPt_V4, STb_GP_cNotPt_nv_V4, STb_GP_cPt_V4, STb_GP_cPt_nv_V4...
    O << ") memb(##"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 377:
    // STb_GP_cdnNotPt_V4, STb_GP_cdnNotPt_nv_V4, STb_GP_cdnPt_V4, STb_GP_cdn...
    O << ".new) memb(##"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 378:
    // STd_GP_cNotPt_V4, STd_GP_cPt_V4, STrid_GP_cNotPt_V4, STrid_GP_cPt_V4, ...
    O << ") memd(##"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 379:
    // STd_GP_cdnNotPt_V4, STd_GP_cdnPt_V4, STrid_GP_cdnNotPt_V4, STrid_GP_cd...
    O << ".new) memd(##"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 380:
    // STh_GP_cNotPt_V4, STh_GP_cNotPt_nv_V4, STh_GP_cPt_V4, STh_GP_cPt_nv_V4...
    O << ") memh(##"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 381:
    // STh_GP_cdnNotPt_V4, STh_GP_cdnNotPt_nv_V4, STh_GP_cdnPt_V4, STh_GP_cdn...
    O << ".new) memh(##"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 382:
    // STrib_GP, STrib_GP_V4, STrib_GP_nv_V4, STrib_indexed_shl_V4, STrib_ind...
    O << '+'; 
    break;
  case 383:
    // STrib_abs_cNotPt_V4, STrib_abs_cNotPt_nv_V4, STrib_abs_cPt_V4, STrib_a...
    O << ")memb(##"; 
    printGlobalOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 384:
    // STrib_abs_cdnNotPt_V4, STrib_abs_cdnNotPt_nv_V4, STrib_abs_cdnPt_V4, S...
    O << ".new)memb(##"; 
    printGlobalOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 385:
    // STrib_abs_set_V4, STrid_abs_set_V4, STrih_abs_set_V4, STriw_abs_set_V4
    O << "=##"; 
    printGlobalOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 386:
    // STrib_abs_setimm_V4, STrid_abs_setimm_V4, STrih_abs_setimm_V4, STriw_a...
    O << "=#"; 
    printImmOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 387:
    // STrib_imm_abs_cNotPt_V4, STrib_imm_abs_cNotPt_nv_V4, STrib_imm_abs_cPt...
    O << ")memb(#"; 
    printImmOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 388:
    // STrib_imm_abs_cdnNotPt_V4, STrib_imm_abs_cdnNotPt_nv_V4, STrib_imm_abs...
    O << ".new)memb(#"; 
    printImmOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 389:
    // STrib_imm_abs_nv_V4, STrih_imm_abs_nv_V4, STriw_imm_abs_nv_V4
    O << ".new"; 
    return;
    break;
  case 390:
    // STrib_ind_lo_V4, STrib_shl_V4, STrib_shl_nv_V4, STrid_ind_lo_V4, STrid...
    O << "<<#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 391:
    // STrih_abs_cNotPt_V4, STrih_abs_cNotPt_nv_V4, STrih_abs_cPt_V4, STrih_a...
    O << ")memh(##"; 
    printGlobalOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 392:
    // STrih_abs_cdnNotPt_V4, STrih_abs_cdnNotPt_nv_V4, STrih_abs_cdnPt_V4, S...
    O << ".new)memh(##"; 
    printGlobalOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 393:
    // STrih_imm_abs_cNotPt_V4, STrih_imm_abs_cNotPt_nv_V4, STrih_imm_abs_cPt...
    O << ")memh(#"; 
    printImmOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 394:
    // STrih_imm_abs_cdnNotPt_V4, STrih_imm_abs_cdnNotPt_nv_V4, STrih_imm_abs...
    O << ".new)memh(#"; 
    printImmOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 395:
    // STriw_GP_cNotPt_V4, STriw_GP_cNotPt_nv_V4, STriw_GP_cPt_V4, STriw_GP_c...
    O << ") memw(##"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 396:
    // STriw_GP_cdnNotPt_V4, STriw_GP_cdnNotPt_nv_V4, STriw_GP_cdnPt_V4, STri...
    O << ".new) memw(##"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 397:
    // STriw_abs_cNotPt_V4, STriw_abs_cNotPt_nv_V4, STriw_abs_cPt_V4, STriw_a...
    O << ")memw(##"; 
    printGlobalOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 398:
    // STriw_abs_cdnNotPt_V4, STriw_abs_cdnNotPt_nv_V4, STriw_abs_cdnPt_V4, S...
    O << ".new)memw(##"; 
    printGlobalOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 399:
    // STriw_imm_abs_cNotPt_V4, STriw_imm_abs_cNotPt_nv_V4, STriw_imm_abs_cPt...
    O << ")memw(#"; 
    printImmOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 400:
    // STriw_imm_abs_cdnNotPt_V4, STriw_imm_abs_cdnNotPt_nv_V4, STriw_imm_abs...
    O << ".new)memw(#"; 
    printImmOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 401:
    // TCRETURNR, TCRETURNtext, TCRETURNtg
    O << " // TAILCALL"; 
    return;
    break;
  case 402:
    // TFRI_V4, TFRI_f
    O << " = ##"; 
    break;
  }


  // Fragment 2 encoded into 7 bits for 104 unique commands.
  switch ((Bits >> 21) & 127) {
  default:   // unreachable.
  case 0:
    // ADD64_rr, ADD_ri, ADD_rr, ADDr_ADDri_V4, ADDr_MPYir_V4, ADDr_MPYri_V4,...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // ADD_ri_cNotPt, ADD_ri_cPt, ADD_ri_cdnNotPt, ADD_ri_cdnPt, ADD_rr_cNotP...
    O << " = add("; 
    printOperand(MI, 2, O); 
    break;
  case 2:
    // ADDi_ASLri_V4, ANDi_ASLri_V4, ORi_ASLri_V4, SUBi_ASLri_V4
    O << ", asl("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 3:
    // ADDi_LSRri_V4, ANDi_LSRri_V4, ORi_LSRri_V4, SUBi_LSRri_V4
    O << ", lsr("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 4:
    // ADDi_MPYri_V4, ADDi_MPYrr_V4
    O << ", mpyi("; 
    printOperand(MI, 2, O); 
    break;
  case 5:
    // ADDri_acc, AND_ri, ASL, ASL_ADD_ri, ASL_ADDd_ri, ASL_AND_ri, ASL_ANDd_...
    O << ", #"; 
    break;
  case 6:
    // ADDrr_acc, AND_pp, AND_rr, AND_rr64, ANDr_ANDrr_V4, ASL_ADD_rr, ASL_AD...
    O << ", "; 
    break;
  case 7:
    // AND_pnotp, HEXAGON_C2_andn, HEXAGON_C2_orn
    O << ", !"; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 8:
    // AND_rr_cNotPt, AND_rr_cPt, AND_rr_cdnNotPt, AND_rr_cdnPt
    O << " = and("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 9:
    // ANDd_NOTd_V4, ANDr_ANDr_NOTr_V4, HEXAGON_M4_and_andn, HEXAGON_M4_or_an...
    O << ", ~"; 
    break;
  case 10:
    // ARGEXTEND, HEXAGON_A2_tfr, HEXAGON_A2_tfrp, HEXAGON_C2_pxfer_map, HEXA...
    return;
    break;
  case 11:
    // ASLH_cNotPt_V4, ASLH_cPt_V4, ASLH_cdnNotPt_V4, ASLH_cdnPt_V4
    O << " = aslh("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 12:
    // ASRH_cNotPt_V4, ASRH_cPt_V4, ASRH_cdnNotPt_V4, ASRH_cdnPt_V4
    O << " = asrh("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 13:
    // COMBINE_rr_cNotPt, COMBINE_rr_cPt, COMBINE_rr_cdnNotPt, COMBINE_rr_cdn...
    O << " = combine("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 14:
    // CONST32, CONST32GP_set, CONST32_set, FCONST32_nsdata, HI, LDb_GP, LDh_...
    printGlobalOperand(MI, 1, O); 
    break;
  case 15:
    // CONST32_set_jt, HI_jt, LO_jt
    printJumpTable(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 16:
    // CONVERT_df2d, CONVERT_df2ud, CONVERT_df2uw, CONVERT_df2w, CONVERT_sf2d...
    O << "):chop"; 
    return;
    break;
  case 17:
    // CONVERT_df2d_nchop, CONVERT_df2ud_nchop, CONVERT_df2uw_nchop, CONVERT_...
    O << ')'; 
    return;
    break;
  case 18:
    // FMADD_dp, FMADD_sp, HEXAGON_F2_dffma_sc, HEXAGON_F2_sffma_sc, HEXAGON_...
    printOperand(MI, 2, O); 
    break;
  case 19:
    // HEXAGON_A2_abssat, HEXAGON_A2_negsat, HEXAGON_A2_svaddhs, HEXAGON_A2_s...
    O << "):sat"; 
    return;
    break;
  case 20:
    // HEXAGON_A2_combine_hh, HEXAGON_A2_combine_hl, HEXAGON_A2_subh_h16_hh, ...
    O << ".H, "; 
    break;
  case 21:
    // HEXAGON_A2_combine_lh, HEXAGON_A2_combine_ll, HEXAGON_A2_subh_h16_lh, ...
    O << ".L, "; 
    break;
  case 22:
    // HEXAGON_A2_svavghs, HEXAGON_A2_vavghr, HEXAGON_A2_vavgubr, HEXAGON_A2_...
    O << "):rnd"; 
    return;
    break;
  case 23:
    // HEXAGON_A2_vavghcr, HEXAGON_A2_vavgwcr
    O << "):crnd"; 
    return;
    break;
  case 24:
    // HEXAGON_A2_vnavghcr, HEXAGON_A2_vnavgwcr
    O << "):crnd:sat"; 
    return;
    break;
  case 25:
    // HEXAGON_A2_vnavghr, HEXAGON_A2_vnavgwr, HEXAGON_M2_cmpyrs_s0, HEXAGON_...
    O << "):rnd:sat"; 
    return;
    break;
  case 26:
    // HEXAGON_F2_dffms_lib, HEXAGON_F2_sffms_lib
    O << "):lib"; 
    return;
    break;
  case 27:
    // HEXAGON_F2_dfimm_n, HEXAGON_F2_sfimm_n
    O << "):neg"; 
    return;
    break;
  case 28:
    // HEXAGON_F2_dfimm_p, HEXAGON_F2_sfimm_p
    O << "):pos"; 
    return;
    break;
  case 29:
    // HEXAGON_M2_cmacs_s1, HEXAGON_M2_cmpys_s1, HEXAGON_M2_cnacs_s1, HEXAGON...
    O << "):<<1:sat"; 
    return;
    break;
  case 30:
    // HEXAGON_M2_cmacsc_s0, HEXAGON_M2_cmpysc_s0, HEXAGON_M2_cnacsc_s0
    O << "*):sat"; 
    return;
    break;
  case 31:
    // HEXAGON_M2_cmacsc_s1, HEXAGON_M2_cmpysc_s1, HEXAGON_M2_cnacsc_s1
    O << "*):<<1:sat"; 
    return;
    break;
  case 32:
    // HEXAGON_M2_cmpyrs_s1, HEXAGON_M2_mmachs_rs1, HEXAGON_M2_mmacls_rs1, HE...
    O << "):<<1:rnd:sat"; 
    return;
    break;
  case 33:
    // HEXAGON_M2_cmpyrsc_s0
    O << "*):rnd:sat"; 
    return;
    break;
  case 34:
    // HEXAGON_M2_cmpyrsc_s1
    O << "*):<<1:rnd:sat"; 
    return;
    break;
  case 35:
    // HEXAGON_M2_vrcmaci_s0c, HEXAGON_M2_vrcmacr_s0c, HEXAGON_M2_vrcmpyi_s0c...
    O << "*)"; 
    return;
    break;
  case 36:
    // HEXAGON_S4_or_andix, Hexagon_C4_and_and, Hexagon_C4_and_andn, Hexagon_...
    O << ", and("; 
    printOperand(MI, 2, O); 
    break;
  case 37:
    // Hexagon_C4_and_or, Hexagon_C4_and_orn, Hexagon_C4_or_or, Hexagon_C4_or...
    O << ", or("; 
    printOperand(MI, 2, O); 
    break;
  case 38:
    // JMP_EQriNotPnt_ie_nv_V4, JMP_EQriNotPnt_nv_V4, JMP_EQriNotPt_ie_nv_V4,...
    printImmOperand(MI, 1, O); 
    break;
  case 39:
    // JMP_EQriNotPntneg_ie_nv_V4, JMP_EQriNotPntneg_nv_V4, JMP_EQriNotPtneg_...
    printNOneImmOperand(MI, 1, O); 
    break;
  case 40:
    // JMP_EQrrNotPnt_ie_nv_V4, JMP_EQrrNotPnt_nv_V4, JMP_EQrrPnt_ie_nv_V4, J...
    O << ")) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 41:
    // JMP_EQrrNotPt_ie_nv_V4, JMP_EQrrNotPt_nv_V4, JMP_EQrrPt_ie_nv_V4, JMP_...
    O << ")) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 42:
    // JMP_GTUrrdnNotPnt_ie_nv_V4, JMP_GTUrrdnNotPnt_nv_V4, JMP_GTUrrdnPnt_ie...
    O << ".new)) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 43:
    // JMP_GTUrrdnNotPt_ie_nv_V4, JMP_GTUrrdnNotPt_nv_V4, JMP_GTUrrdnPt_ie_nv...
    O << ".new)) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 44:
    // LDb_GP_cNotPt_V4, LDb_GP_cPt_V4, LDb_GP_cdnNotPt_V4, LDb_GP_cdnPt_V4, ...
    O << "=memb(##"; 
    printGlobalOperand(MI, 2, O); 
    break;
  case 45:
    // LDd_GP_cNotPt_V4, LDd_GP_cPt_V4, LDd_GP_cdnNotPt_V4, LDd_GP_cdnPt_V4, ...
    O << "=memd(##"; 
    printGlobalOperand(MI, 2, O); 
    break;
  case 46:
    // LDh_GP_cNotPt_V4, LDh_GP_cPt_V4, LDh_GP_cdnNotPt_V4, LDh_GP_cdnPt_V4, ...
    O << "=memh(##"; 
    printGlobalOperand(MI, 2, O); 
    break;
  case 47:
    // LDrib, LDrid, LDrid_f, LDrih, LDriub, LDriuh, LDriw, LDriw_f, STrib_cN...
    printMEMriOperand(MI, 1, O); 
    break;
  case 48:
    // LDrib_GP_V4, LDrid_GP, LDrid_GP_V4, LDrid_indexed_V4, LDrid_indexed_sh...
    O << '+'; 
    break;
  case 49:
    // LDrib_abs_cNotPt_V4, LDrib_abs_cPt_V4, LDrib_abs_cdnNotPt_V4, LDrib_ab...
    O << " = memb(##"; 
    printGlobalOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 50:
    // LDrib_cNotPt, LDrib_cPt, LDrib_cdnNotPt, LDrib_cdnPt, LDrib_indexed_cN...
    O << " = memb("; 
    break;
  case 51:
    // LDrib_imm_abs_cNotPt_V4, LDrib_imm_abs_cPt_V4, LDrib_imm_abs_cdnNotPt_...
    O << " = memb(#"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 52:
    // LDrib_indexed_V4, LDrih_indexed_V4, LDriub_ae_indexed_V4, LDriub_index...
    O << "<<#0)"; 
    return;
    break;
  case 53:
    // LDrib_indexed_cNotPt_V4, LDrib_indexed_cPt_V4, LDrib_indexed_cdnNotPt_...
    O << "=memb("; 
    printOperand(MI, 2, O); 
    O << '+'; 
    printOperand(MI, 3, O); 
    break;
  case 54:
    // LDrib_indexed_shl_V4, LDrid_ind_lo_V4, LDrih_indexed_shl_V4, LDriub_ae...
    O << "<<#"; 
    break;
  case 55:
    // LDrid_abs_cNotPt_V4, LDrid_abs_cPt_V4, LDrid_abs_cdnNotPt_V4, LDrid_ab...
    O << " = memd(##"; 
    printGlobalOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 56:
    // LDrid_cNotPt, LDrid_cPt, LDrid_cdnNotPt, LDrid_cdnPt, LDrid_indexed_cN...
    O << " = memd("; 
    break;
  case 57:
    // LDrid_indexed_cNotPt_V4, LDrid_indexed_cPt_V4, LDrid_indexed_cdnNotPt_...
    O << "=memd("; 
    printOperand(MI, 2, O); 
    O << '+'; 
    printOperand(MI, 3, O); 
    break;
  case 58:
    // LDrih_abs_cNotPt_V4, LDrih_abs_cPt_V4, LDrih_abs_cdnNotPt_V4, LDrih_ab...
    O << " = memh(##"; 
    printGlobalOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 59:
    // LDrih_cNotPt, LDrih_cPt, LDrih_cdnNotPt, LDrih_cdnPt, LDrih_indexed_cN...
    O << " = memh("; 
    break;
  case 60:
    // LDrih_imm_abs_cNotPt_V4, LDrih_imm_abs_cPt_V4, LDrih_imm_abs_cdnNotPt_...
    O << " = memh(#"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 61:
    // LDrih_indexed_cNotPt_V4, LDrih_indexed_cPt_V4, LDrih_indexed_cdnNotPt_...
    O << "=memh("; 
    printOperand(MI, 2, O); 
    O << '+'; 
    printOperand(MI, 3, O); 
    break;
  case 62:
    // LDriub_GP_cNotPt_V4, LDriub_GP_cPt_V4, LDriub_GP_cdnNotPt_V4, LDriub_G...
    O << "=memub(##"; 
    printGlobalOperand(MI, 2, O); 
    break;
  case 63:
    // LDriub_abs_cNotPt_V4, LDriub_abs_cPt_V4, LDriub_abs_cdnNotPt_V4, LDriu...
    O << " = memub(##"; 
    printGlobalOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 64:
    // LDriub_cNotPt, LDriub_cPt, LDriub_cdnNotPt, LDriub_cdnPt, LDriub_index...
    O << " = memub("; 
    break;
  case 65:
    // LDriub_imm_abs_cNotPt_V4, LDriub_imm_abs_cPt_V4, LDriub_imm_abs_cdnNot...
    O << " = memub(#"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 66:
    // LDriub_indexed_cNotPt_V4, LDriub_indexed_cPt_V4, LDriub_indexed_cdnNot...
    O << "=memub("; 
    printOperand(MI, 2, O); 
    O << '+'; 
    printOperand(MI, 3, O); 
    break;
  case 67:
    // LDriuh_GP_cNotPt_V4, LDriuh_GP_cPt_V4, LDriuh_GP_cdnNotPt_V4, LDriuh_G...
    O << "=memuh(##"; 
    printGlobalOperand(MI, 2, O); 
    break;
  case 68:
    // LDriuh_abs_cNotPt_V4, LDriuh_abs_cPt_V4, LDriuh_abs_cdnNotPt_V4, LDriu...
    O << " = memuh(##"; 
    printGlobalOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 69:
    // LDriuh_cNotPt, LDriuh_cPt, LDriuh_cdnNotPt, LDriuh_cdnPt, LDriuh_index...
    O << " = memuh("; 
    break;
  case 70:
    // LDriuh_imm_abs_cNotPt_V4, LDriuh_imm_abs_cPt_V4, LDriuh_imm_abs_cdnNot...
    O << " = memuh(#"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 71:
    // LDriuh_indexed_cNotPt_V4, LDriuh_indexed_cPt_V4, LDriuh_indexed_cdnNot...
    O << "=memuh("; 
    printOperand(MI, 2, O); 
    O << '+'; 
    printOperand(MI, 3, O); 
    break;
  case 72:
    // LDriw_GP_cNotPt_V4, LDriw_GP_cPt_V4, LDriw_GP_cdnNotPt_V4, LDriw_GP_cd...
    O << "=memw(##"; 
    printGlobalOperand(MI, 2, O); 
    break;
  case 73:
    // LDriw_abs_cNotPt_V4, LDriw_abs_cPt_V4, LDriw_abs_cdnNotPt_V4, LDriw_ab...
    O << " = memw(##"; 
    printGlobalOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 74:
    // LDriw_cNotPt, LDriw_cPt, LDriw_cdnNotPt, LDriw_cdnPt, LDriw_indexed_cN...
    O << " = memw("; 
    break;
  case 75:
    // LDriw_imm_abs_cNotPt_V4, LDriw_imm_abs_cPt_V4, LDriw_imm_abs_cdnNotPt_...
    O << " = memw(#"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 76:
    // LDriw_indexed_cNotPt_V4, LDriw_indexed_cPt_V4, LDriw_indexed_cdnNotPt_...
    O << "=memw("; 
    printOperand(MI, 2, O); 
    O << '+'; 
    printOperand(MI, 3, O); 
    break;
  case 77:
    // MEMb_ADDi_MEM_V4, MEMb_SUBi_MEM_V4, MEMh_ADDi_MEM_V4, MEMh_SUBi_MEM_V4...
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 78:
    // MEMb_ADDi_indexed_MEM_V4, MEMb_ADDr_indexed_MEM_V4, MEMb_ANDr_indexed_...
    O << ") += "; 
    break;
  case 79:
    // MEMb_ORr_indexed_MEM_V4, MEMh_ORr_indexed_MEM_V4, MEMw_ORr_indexed_MEM...
    O << ") |= "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 80:
    // MEMb_SUBi_indexed_MEM_V4, MEMb_SUBr_indexed_MEM_V4, MEMh_SUBi_indexed_...
    O << ") -= "; 
    break;
  case 81:
    // MEMw_ADDi_indexed_MEM_V4
    O << ") += #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 82:
    // MEMw_ANDr_indexed_MEM_V4
    O << ") &= "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 83:
    // MEMw_SUBi_indexed_MEM_V4
    O << ") -= #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 84:
    // OR_rr_cNotPt, OR_rr_cPt, OR_rr_cdnNotPt, OR_rr_cdnPt
    O << " = or("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 85:
    // POST_STbri_cNotPt, POST_STbri_cNotPt_nv_V4, POST_STbri_cPt, POST_STbri...
    printOperand(MI, 3, O); 
    O << "++#"; 
    printImmOperand(MI, 4, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 86:
    // POST_STbri_nv_V4, POST_SThri_nv_V4, POST_STwri_nv_V4, STrib_abs_cNotPt...
    O << ".new"; 
    return;
    break;
  case 87:
    // STb_GP_cNotPt_V4, STb_GP_cNotPt_nv_V4, STb_GP_cPt_V4, STb_GP_cPt_nv_V4...
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 88:
    // STrib_imm_V4, STrih_imm_V4, STriw_imm_V4
    O << ") = #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 89:
    // STrib_ind_lo_V4, STrih_ind_lo_V4, STriw_ind_lo_V4
    O << "+##"; 
    printGlobalOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 90:
    // STrib_shl_V4, STrib_shl_nv_V4, STrid_ind_lo_V4, STrid_shl_V4, STrih_sh...
    O << "+#"; 
    break;
  case 91:
    // STrih_offset_ext_V4, STriw_offset_ext_V4
    O << ") = ##"; 
    printGlobalOperand(MI, 2, O); 
    return;
    break;
  case 92:
    // SUB_rr_cNotPt, SUB_rr_cPt, SUB_rr_cdnNotPt, SUB_rr_cdnPt
    O << " = sub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 93:
    // SXTB_cNotPt_V4, SXTB_cPt_V4, SXTB_cdnNotPt_V4, SXTB_cdnPt_V4
    O << " = sxtb("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 94:
    // SXTH_cNotPt_V4, SXTH_cPt_V4, SXTH_cdnNotPt_V4, SXTH_cdnPt_V4
    O << " = sxth("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 95:
    // TFR64_cNotPt, TFR64_cPt, TFR_cNotPt, TFR_cPt, TFR_cdnNotPt, TFR_cdnPt
    O << " = "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 96:
    // TFRI_cNotPt, TFRI_cPt, TFRI_cdnNotPt, TFRI_cdnPt
    O << " = #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 97:
    // TFRI_cNotPt_V4, TFRI_cNotPt_f, TFRI_cPt_V4, TFRI_cPt_f, TFRI_cdnNotPt_...
    O << " = ##"; 
    break;
  case 98:
    // TFR_FI
    printFrameIndexOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 99:
    // TFR_PdFalse
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    O << ')'; 
    return;
    break;
  case 100:
    // TFR_PdRs, TFR_RsPd
    O << "  /* Should almost never emit this. */"; 
    return;
    break;
  case 101:
    // XOR_rr_cNotPt, XOR_rr_cPt, XOR_rr_cdnNotPt, XOR_rr_cdnPt
    O << " = xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 102:
    // ZXTB_cNotPt_V4, ZXTB_cPt_V4, ZXTB_cdnNotPt_V4, ZXTB_cdnPt_V4
    O << " = zxtb("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 103:
    // ZXTH_cNotPt_V4, ZXTH_cPt_V4, ZXTH_cdnNotPt_V4, ZXTH_cdnPt_V4
    O << " = zxth("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  }


  // Fragment 3 encoded into 5 bits for 29 unique commands.
  switch ((Bits >> 28) & 31) {
  default:   // unreachable.
  case 0:
    // ADD64_rr, ADD_rr, ADD_rr_cNotPt, ADD_rr_cPt, ADD_rr_cdnNotPt, ADD_rr_c...
    O << ", "; 
    break;
  case 1:
    // ADD_ri, ADD_ri_cNotPt, ADD_ri_cPt, ADD_ri_cdnNotPt, ADD_ri_cdnPt, ADDi...
    O << ", #"; 
    break;
  case 2:
    // ADDr_ADDri_V4, Hexagon_S4_addaddi
    O << ", add("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    break;
  case 3:
    // ADDr_MPYir_V4
    O << ", mpyi(#"; 
    printImmOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 4:
    // ADDr_MPYri_V4, ADDr_MPYrr_V4
    O << ", mpyi("; 
    printOperand(MI, 2, O); 
    break;
  case 5:
    // ADDr_SUBri_V4, ADDri_SUBr_V4, Hexagon_S4_subaddi
    O << ", sub(#"; 
    printImmOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 6:
    // ADDri_acc, ASL_ADD_ri, ASL_ADDd_ri, ASL_AND_ri, ASL_ANDd_ri, ASL_OR_ri...
    printImmOperand(MI, 3, O); 
    break;
  case 7:
    // ADDrr_acc, ANDr_ANDr_NOTr_V4, ANDr_ANDrr_V4, ASL_ADD_rr, ASL_ADDd_rr, ...
    printOperand(MI, 3, O); 
    break;
  case 8:
    // AND_pp, AND_rr, AND_rr64, ANDd_NOTd_V4, ASL_rr, ASLd, ASR_rr, ASRd_rr,...
    printOperand(MI, 2, O); 
    break;
  case 9:
    // AND_ri, ASL, ASLd_ri, ASR_ri, ASRd_ri, CLRBIT, CLRBIT_31, CMPEQri, CMP...
    printImmOperand(MI, 2, O); 
    break;
  case 10:
    // CONST32, CONST32GP_set, CONST32_Float_Real, CONST32_Int_Real, CONST32_...
    O << ')'; 
    return;
    break;
  case 11:
    // HEXAGON_A2_addh_h16_hh, HEXAGON_A2_addh_h16_hl, HEXAGON_A2_addh_h16_sa...
    O << ".H, "; 
    printOperand(MI, 2, O); 
    break;
  case 12:
    // HEXAGON_A2_addh_h16_lh, HEXAGON_A2_addh_h16_ll, HEXAGON_A2_addh_h16_sa...
    O << ".L, "; 
    printOperand(MI, 2, O); 
    break;
  case 13:
    // HEXAGON_circ_ldd, POST_LDrib, POST_LDrid, POST_LDrih, POST_LDriub, POS...
    O << "++#"; 
    break;
  case 14:
    // Hexagon_C4_and_andn, Hexagon_C4_and_orn, Hexagon_C4_or_andn, Hexagon_C...
    O << ", !"; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 15:
    // JMP_EQriNotPnt_ie_nv_V4, JMP_EQriNotPnt_nv_V4, JMP_EQriNotPntneg_ie_nv...
    O << ")) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 16:
    // JMP_EQriNotPt_ie_nv_V4, JMP_EQriNotPt_nv_V4, JMP_EQriNotPtneg_ie_nv_V4...
    O << ")) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 17:
    // LDrib_GP, LDrib_GP_cNotPt_V4, LDrib_GP_cPt_V4, LDrib_GP_cdnNotPt_V4, L...
    O << '+'; 
    break;
  case 18:
    // LDrib_abs_set_V4, LDrid_abs_set_V4, LDrih_abs_set_V4, LDriub_abs_set_V...
    O << "=##"; 
    printGlobalOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 19:
    // LDrib_abs_setimm_V4, LDrid_abs_setimm_V4, LDrih_abs_setimm_V4, LDriub_...
    O << "=#"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 20:
    // LDrib_cNotPt, LDrib_cPt, LDrib_cdnNotPt, LDrib_cdnPt, LDrid_cNotPt, LD...
    printMEMriOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 21:
    // LDrib_ind_lo_V4, LDrib_indexed_shl_cNotPt_V4, LDrib_indexed_shl_cPt_V4...
    O << "<<#"; 
    break;
  case 22:
    // LDrib_indexed, LDrid_indexed, LDrid_indexed_f, LDrih_indexed, LDriub_i...
    O << "+#"; 
    printImmOperand(MI, 2, O); 
    break;
  case 23:
    // LDrib_indexed_cNotPt_V4, LDrib_indexed_cPt_V4, LDrib_indexed_cdnNotPt_...
    O << "<<#0)"; 
    return;
    break;
  case 24:
    // MEMb_ADDr_MEM_V4, MEMb_SUBr_MEM_V4, MEMh_ADDr_MEM_V4, MEMh_SUBr_MEM_V4...
    return;
    break;
  case 25:
    // POST_STbri_cNotPt_nv_V4, POST_STbri_cPt_nv_V4, POST_STbri_cdnNotPt_nv_...
    O << ".new"; 
    return;
    break;
  case 26:
    // STrib_GP, STrib_GP_V4, STrib_GP_nv_V4, STrib_cNotPt, STrib_cNotPt_nv_V...
    O << ") = "; 
    break;
  case 27:
    // STrid_ind_lo_V4, TFRI_cNotPt_V4, TFRI_cPt_V4, TFRI_cdnNotPt_V4, TFRI_c...
    printGlobalOperand(MI, 2, O); 
    break;
  case 28:
    // TFR_FI_immext_V4
    O << ", ##"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  }


  // Fragment 4 encoded into 6 bits for 41 unique commands.
  switch ((Bits >> 33) & 63) {
  default:   // unreachable.
  case 0:
    // ADD64_rr, ADD_rr, HEXAGON_A2_add, HEXAGON_A2_addp, HEXAGON_A2_addsat, ...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ADD_ri, ADJDYNALLOC, HEXAGON_A2_addi, LDrib_GP, LDrib_ind_lo_V4, LDrih...
    printImmOperand(MI, 2, O); 
    break;
  case 2:
    // ADD_ri_cNotPt, ADD_ri_cPt, ADD_ri_cdnNotPt, ADD_ri_cdnPt, ADDi_MPYri_V...
    printImmOperand(MI, 3, O); 
    break;
  case 3:
    // ADD_rr_cNotPt, ADD_rr_cPt, ADD_rr_cdnNotPt, ADD_rr_cdnPt, ADDi_MPYrr_V...
    printOperand(MI, 3, O); 
    break;
  case 4:
    // ADDr_ADDri_V4, ADDr_SUBri_V4, ADDri_SUBr_V4
    O << "))"; 
    return;
    break;
  case 5:
    // ADDr_MPYri_V4, HEXAGON_C2_muxii, HEXAGON_C2_muxir, HEXAGON_S2_extractu...
    O << ", #"; 
    break;
  case 6:
    // ADDr_MPYrr_V4, HEXAGON_C2_mux, HEXAGON_C2_muxri, MUX_ir, MUX_rr
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 7:
    // ADDri_acc, ADDrr_acc, AND_pp, AND_ri, AND_rr, AND_rr64, ANDd_NOTd_V4, ...
    O << ')'; 
    return;
    break;
  case 8:
    // HEXAGON_A2_addh_h16_hh, HEXAGON_A2_addh_h16_lh, HEXAGON_A2_subh_h16_hh...
    O << ".H):<<16"; 
    return;
    break;
  case 9:
    // HEXAGON_A2_addh_h16_hl, HEXAGON_A2_addh_h16_ll, HEXAGON_A2_subh_h16_hl...
    O << ".L):<<16"; 
    return;
    break;
  case 10:
    // HEXAGON_A2_addh_h16_sat_hh, HEXAGON_A2_addh_h16_sat_lh, HEXAGON_A2_sub...
    O << ".H):sat:<<16"; 
    return;
    break;
  case 11:
    // HEXAGON_A2_addh_h16_sat_hl, HEXAGON_A2_addh_h16_sat_ll, HEXAGON_A2_sub...
    O << ".L):sat:<<16"; 
    return;
    break;
  case 12:
    // HEXAGON_A2_addh_l16_hl, HEXAGON_A2_combine_hh, HEXAGON_A2_combine_lh, ...
    O << ".H)"; 
    return;
    break;
  case 13:
    // HEXAGON_A2_addh_l16_ll, HEXAGON_A2_combine_hl, HEXAGON_A2_combine_ll, ...
    O << ".L)"; 
    return;
    break;
  case 14:
    // HEXAGON_A2_addh_l16_sat_hl, HEXAGON_A2_subh_l16_sat_hl, HEXAGON_M2_mpy...
    O << ".H):sat"; 
    return;
    break;
  case 15:
    // HEXAGON_A2_addh_l16_sat_ll, HEXAGON_A2_subh_l16_sat_ll, HEXAGON_M2_mpy...
    O << ".L):sat"; 
    return;
    break;
  case 16:
    // HEXAGON_A2_subsat, HEXAGON_A4_round_ri_sat, HEXAGON_A4_round_rr_sat, H...
    O << "):sat"; 
    return;
    break;
  case 17:
    // HEXAGON_M2_dpmpyss_rnd_s0, HEXAGON_S2_asr_i_r_rnd, HEXAGON_S5_vasrhrnd...
    O << "):rnd"; 
    return;
    break;
  case 18:
    // HEXAGON_M2_hmmpyh_rs1, HEXAGON_M2_mpy_sat_rnd_hh_s1, HEXAGON_M2_mpy_sa...
    O << ".H):<<1:rnd:sat"; 
    return;
    break;
  case 19:
    // HEXAGON_M2_hmmpyl_rs1, HEXAGON_M2_mpy_sat_rnd_hl_s1, HEXAGON_M2_mpy_sa...
    O << ".L):<<1:rnd:sat"; 
    return;
    break;
  case 20:
    // HEXAGON_M2_mpy_acc_hh_s1, HEXAGON_M2_mpy_acc_lh_s1, HEXAGON_M2_mpy_hh_...
    O << ".H):<<1"; 
    return;
    break;
  case 21:
    // HEXAGON_M2_mpy_acc_hl_s1, HEXAGON_M2_mpy_acc_ll_s1, HEXAGON_M2_mpy_hl_...
    O << ".L):<<1"; 
    return;
    break;
  case 22:
    // HEXAGON_M2_mpy_acc_sat_hh_s1, HEXAGON_M2_mpy_acc_sat_lh_s1, HEXAGON_M2...
    O << ".H):<<1:sat"; 
    return;
    break;
  case 23:
    // HEXAGON_M2_mpy_acc_sat_hl_s1, HEXAGON_M2_mpy_acc_sat_ll_s1, HEXAGON_M2...
    O << ".L):<<1:sat"; 
    return;
    break;
  case 24:
    // HEXAGON_M2_mpy_rnd_hh_s0, HEXAGON_M2_mpy_rnd_lh_s0, HEXAGON_M2_mpyd_rn...
    O << ".H):rnd"; 
    return;
    break;
  case 25:
    // HEXAGON_M2_mpy_rnd_hh_s1, HEXAGON_M2_mpy_rnd_lh_s1, HEXAGON_M2_mpyd_rn...
    O << ".H):<<1:rnd"; 
    return;
    break;
  case 26:
    // HEXAGON_M2_mpy_rnd_hl_s0, HEXAGON_M2_mpy_rnd_ll_s0, HEXAGON_M2_mpyd_rn...
    O << ".L):rnd"; 
    return;
    break;
  case 27:
    // HEXAGON_M2_mpy_rnd_hl_s1, HEXAGON_M2_mpy_rnd_ll_s1, HEXAGON_M2_mpyd_rn...
    O << ".L):<<1:rnd"; 
    return;
    break;
  case 28:
    // HEXAGON_M2_mpy_sat_rnd_hh_s0, HEXAGON_M2_mpy_sat_rnd_lh_s0
    O << ".H):rnd:sat"; 
    return;
    break;
  case 29:
    // HEXAGON_M2_mpy_sat_rnd_hl_s0, HEXAGON_M2_mpy_sat_rnd_ll_s0
    O << ".L):rnd:sat"; 
    return;
    break;
  case 30:
    // HEXAGON_circ_ldd
    printImmOperand(MI, 5, O); 
    O << ":circ("; 
    printOperand(MI, 4, O); 
    O << "))"; 
    return;
    break;
  case 31:
    // LDrib_indexed_cNotPt, LDrib_indexed_cPt, LDrib_indexed_cdnNotPt, LDrib...
    O << "+#"; 
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 32:
    // LDrib_indexed_shl_cNotPt_V4, LDrib_indexed_shl_cPt_V4, LDrib_indexed_s...
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 33:
    // LDrid_ind_lo_V4
    O << "+##"; 
    printGlobalOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 34:
    // LDrid_indexed_V4
    O << "<<#0)"; 
    return;
    break;
  case 35:
    // LDrid_indexed_shl_V4
    O << "<<#"; 
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 36:
    // MAXUd_rr, MAXUw_rr, MAXd_rr, MAXw_dd, MAXw_rr, MINUd_rr, MINUw_rr, MIN...
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 37:
    // MEMb_ADDi_indexed_MEM_V4, MEMb_ADDr_indexed_MEM_V4, MEMb_ANDr_indexed_...
    return;
    break;
  case 38:
    // POST_LDrib_cNotPt, POST_LDrib_cPt, POST_LDrib_cdnNotPt_V4, POST_LDrib_...
    O << "++#"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 39:
    // STrib_GP_cNotPt_V4, STrib_GP_cNotPt_nv_V4, STrib_GP_cPt_V4, STrib_GP_c...
    O << ") = "; 
    printOperand(MI, 3, O); 
    break;
  case 40:
    // STrib_imm_cNotPt_V4, STrib_imm_cPt_V4, STrib_imm_cdnNotPt_V4, STrib_im...
    O << ") = #"; 
    printImmOperand(MI, 3, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 39) & 15) {
  default:   // unreachable.
  case 0:
    // ADD64_rr, ADD_ri, ADD_ri_cNotPt, ADD_ri_cPt, ADD_ri_cdnNotPt, ADD_ri_c...
    O << ')'; 
    return;
    break;
  case 1:
    // ADDi_MPYri_V4, ADDi_MPYrr_V4, ADDr_MPYrr_V4, HEXAGON_S4_or_andix, ORr_...
    O << "))"; 
    return;
    break;
  case 2:
    // ADDr_MPYri_V4, HEXAGON_C2_muxii, HEXAGON_C2_muxir, HEXAGON_S2_extractu...
    printImmOperand(MI, 3, O); 
    break;
  case 3:
    // HEXAGON_A2_addsat
    O << "):sat"; 
    return;
    break;
  case 4:
    // HEXAGON_F2_dffma_lib, HEXAGON_F2_sffma_lib
    O << "):lib"; 
    return;
    break;
  case 5:
    // HEXAGON_F2_dffma_sc, HEXAGON_F2_sffma_sc
    O << ", "; 
    printOperand(MI, 4, O); 
    O << "):scale"; 
    return;
    break;
  case 6:
    // Hexagon_S2_insert, Hexagon_S2_insertp
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 7:
    // LDrib_ind_lo_V4, LDrih_ind_lo_V4, LDriub_ind_lo_V4, LDriuh_ind_lo_V4, ...
    O << "+##"; 
    printGlobalOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 8:
    // STrib_GP, STrib_GP_V4, STrib_GP_cNotPt_V4, STrib_GP_cPt_V4, STrib_GP_c...
    return;
    break;
  case 9:
    // STrib_GP_cNotPt_nv_V4, STrib_GP_cPt_nv_V4, STrib_GP_cdnNotPt_nv_V4, ST...
    O << ".new"; 
    return;
    break;
  case 10:
    // STrib_indexed_shl_V4, STrib_indexed_shl_nv_V4, STrid_indexed_shl_V4, S...
    O << ") = "; 
    printOperand(MI, 3, O); 
    break;
  case 11:
    // STrib_indexed_shl_cNotPt_V4, STrib_indexed_shl_cNotPt_nv_V4, STrib_ind...
    O << "<<#"; 
    printImmOperand(MI, 3, O); 
    O << ") = "; 
    printOperand(MI, 4, O); 
    break;
  }


  // Fragment 6 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 43) & 3) {
  default:   // unreachable.
  case 0:
    // ADDr_MPYri_V4
    O << "))"; 
    return;
    break;
  case 1:
    // HEXAGON_C2_muxii, HEXAGON_C2_muxir, HEXAGON_S2_extractu, HEXAGON_S2_ex...
    O << ')'; 
    return;
    break;
  case 2:
    // STrib_indexed_shl_V4, STrib_indexed_shl_cNotPt_V4, STrib_indexed_shl_c...
    return;
    break;
  case 3:
    // STrib_indexed_shl_cNotPt_nv_V4, STrib_indexed_shl_cPt_nv_V4, STrib_ind...
    O << ".new"; 
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *HexagonInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 64 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'r', '1', '1', ':', '1', '0', 0,
  /* 7 */ 'r', '1', '0', 0,
  /* 11 */ 'r', '2', '1', ':', '2', '0', 0,
  /* 18 */ 'r', '2', '0', 0,
  /* 22 */ 'r', '3', '1', ':', '3', '0', 0,
  /* 29 */ 'r', '3', '0', 0,
  /* 33 */ 'r', '1', ':', '0', 0,
  /* 38 */ 's', 'a', '0', 0,
  /* 42 */ 'l', 'c', '0', 0,
  /* 46 */ 'm', '0', 0,
  /* 49 */ 'p', '0', 0,
  /* 52 */ 'r', '0', 0,
  /* 55 */ 'r', '1', '1', 0,
  /* 59 */ 'r', '2', '1', 0,
  /* 63 */ 'r', '3', '1', 0,
  /* 67 */ 's', 'a', '1', 0,
  /* 71 */ 'l', 'c', '1', 0,
  /* 75 */ 'm', '1', 0,
  /* 78 */ 'p', '1', 0,
  /* 81 */ 'r', '1', 0,
  /* 84 */ 'r', '1', '3', ':', '1', '2', 0,
  /* 91 */ 'r', '1', '2', 0,
  /* 95 */ 'r', '2', '3', ':', '2', '2', 0,
  /* 102 */ 'r', '2', '2', 0,
  /* 106 */ 'r', '3', ':', '2', 0,
  /* 111 */ 'p', '2', 0,
  /* 114 */ 'r', '2', 0,
  /* 117 */ 'r', '1', '3', 0,
  /* 121 */ 'r', '2', '3', 0,
  /* 125 */ 'p', '3', 0,
  /* 128 */ 'r', '3', 0,
  /* 131 */ 'r', '1', '5', ':', '1', '4', 0,
  /* 138 */ 'r', '1', '4', 0,
  /* 142 */ 'r', '2', '5', ':', '2', '4', 0,
  /* 149 */ 'r', '2', '4', 0,
  /* 153 */ 'r', '5', ':', '4', 0,
  /* 158 */ 'r', '4', 0,
  /* 161 */ 'r', '1', '5', 0,
  /* 165 */ 'r', '2', '5', 0,
  /* 169 */ 'r', '5', 0,
  /* 172 */ 'r', '1', '7', ':', '1', '6', 0,
  /* 179 */ 'r', '1', '6', 0,
  /* 183 */ 'r', '2', '7', ':', '2', '6', 0,
  /* 190 */ 'r', '2', '6', 0,
  /* 194 */ 'r', '7', ':', '6', 0,
  /* 199 */ 'r', '6', 0,
  /* 202 */ 'r', '1', '7', 0,
  /* 206 */ 'r', '2', '7', 0,
  /* 210 */ 'r', '7', 0,
  /* 213 */ 'r', '1', '9', ':', '1', '8', 0,
  /* 220 */ 'r', '1', '8', 0,
  /* 224 */ 'r', '2', '9', ':', '2', '8', 0,
  /* 231 */ 'r', '2', '8', 0,
  /* 235 */ 'r', '9', ':', '8', 0,
  /* 240 */ 'r', '8', 0,
  /* 243 */ 'r', '1', '9', 0,
  /* 247 */ 'r', '2', '9', 0,
  /* 251 */ 'r', '9', 0,
  /* 254 */ 'p', 'c', 0,
  /* 257 */ 'f', 'p', 0,
  /* 260 */ 'g', 'p', 0,
  /* 263 */ 's', 'p', 0,
  /* 266 */ 'l', 'r', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    33, 106, 153, 194, 235, 0, 84, 131, 172, 213, 11, 95, 142, 183, 
    224, 22, 257, 260, 42, 71, 266, 46, 75, 49, 78, 111, 125, 254, 
    52, 81, 114, 128, 158, 169, 199, 210, 240, 251, 7, 55, 91, 117, 
    138, 161, 179, 202, 220, 243, 18, 59, 102, 121, 149, 165, 190, 206, 
    231, 247, 29, 63, 38, 67, 263, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool HexagonInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
