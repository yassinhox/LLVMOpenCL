/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Target Register Enum Values                                                *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM
namespace llvm {

class MCRegisterClass;
extern const MCRegisterClass SPUMCRegisterClasses[];

namespace SPU {
enum {
  NoRegister,
  R0 = 1,
  R1 = 2,
  R2 = 3,
  R3 = 4,
  R4 = 5,
  R5 = 6,
  R6 = 7,
  R7 = 8,
  R8 = 9,
  R9 = 10,
  R10 = 11,
  R11 = 12,
  R12 = 13,
  R13 = 14,
  R14 = 15,
  R15 = 16,
  R16 = 17,
  R17 = 18,
  R18 = 19,
  R19 = 20,
  R20 = 21,
  R21 = 22,
  R22 = 23,
  R23 = 24,
  R24 = 25,
  R25 = 26,
  R26 = 27,
  R27 = 28,
  R28 = 29,
  R29 = 30,
  R30 = 31,
  R31 = 32,
  R32 = 33,
  R33 = 34,
  R34 = 35,
  R35 = 36,
  R36 = 37,
  R37 = 38,
  R38 = 39,
  R39 = 40,
  R40 = 41,
  R41 = 42,
  R42 = 43,
  R43 = 44,
  R44 = 45,
  R45 = 46,
  R46 = 47,
  R47 = 48,
  R48 = 49,
  R49 = 50,
  R50 = 51,
  R51 = 52,
  R52 = 53,
  R53 = 54,
  R54 = 55,
  R55 = 56,
  R56 = 57,
  R57 = 58,
  R58 = 59,
  R59 = 60,
  R60 = 61,
  R61 = 62,
  R62 = 63,
  R63 = 64,
  R64 = 65,
  R65 = 66,
  R66 = 67,
  R67 = 68,
  R68 = 69,
  R69 = 70,
  R70 = 71,
  R71 = 72,
  R72 = 73,
  R73 = 74,
  R74 = 75,
  R75 = 76,
  R76 = 77,
  R77 = 78,
  R78 = 79,
  R79 = 80,
  R80 = 81,
  R81 = 82,
  R82 = 83,
  R83 = 84,
  R84 = 85,
  R85 = 86,
  R86 = 87,
  R87 = 88,
  R88 = 89,
  R89 = 90,
  R90 = 91,
  R91 = 92,
  R92 = 93,
  R93 = 94,
  R94 = 95,
  R95 = 96,
  R96 = 97,
  R97 = 98,
  R98 = 99,
  R99 = 100,
  R100 = 101,
  R101 = 102,
  R102 = 103,
  R103 = 104,
  R104 = 105,
  R105 = 106,
  R106 = 107,
  R107 = 108,
  R108 = 109,
  R109 = 110,
  R110 = 111,
  R111 = 112,
  R112 = 113,
  R113 = 114,
  R114 = 115,
  R115 = 116,
  R116 = 117,
  R117 = 118,
  R118 = 119,
  R119 = 120,
  R120 = 121,
  R121 = 122,
  R122 = 123,
  R123 = 124,
  R124 = 125,
  R125 = 126,
  R126 = 127,
  R127 = 128,
  NUM_TARGET_REGS 	// 129
};
}

// Register classes
namespace SPU {
enum {
  R8CRegClassID = 0,
  R16CRegClassID = 1,
  R32CRegClassID = 2,
  R32FPRegClassID = 3,
  R64CRegClassID = 4,
  R64FPRegClassID = 5,
  GPRCRegClassID = 6,
  VECREGRegClassID = 7
  };
}
} // End llvm namespace 
#endif // GET_REGINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* MC Register Information                                                    *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC
namespace llvm {

extern const uint16_t SPURegDiffLists[] = {
  /* 0 */ 65535, 0,
};

extern const uint16_t SPUSubRegIdxLists[] = {
  /* 0 */ 0,
};

extern const char SPURegStrings[] = {
  /* 0 */ 'R', '1', '0', '0', 0,
  /* 5 */ 'R', '1', '1', '0', 0,
  /* 10 */ 'R', '1', '0', 0,
  /* 14 */ 'R', '1', '2', '0', 0,
  /* 19 */ 'R', '2', '0', 0,
  /* 23 */ 'R', '3', '0', 0,
  /* 27 */ 'R', '4', '0', 0,
  /* 31 */ 'R', '5', '0', 0,
  /* 35 */ 'R', '6', '0', 0,
  /* 39 */ 'R', '7', '0', 0,
  /* 43 */ 'R', '8', '0', 0,
  /* 47 */ 'R', '9', '0', 0,
  /* 51 */ 'R', '0', 0,
  /* 54 */ 'R', '1', '0', '1', 0,
  /* 59 */ 'R', '1', '1', '1', 0,
  /* 64 */ 'R', '1', '1', 0,
  /* 68 */ 'R', '1', '2', '1', 0,
  /* 73 */ 'R', '2', '1', 0,
  /* 77 */ 'R', '3', '1', 0,
  /* 81 */ 'R', '4', '1', 0,
  /* 85 */ 'R', '5', '1', 0,
  /* 89 */ 'R', '6', '1', 0,
  /* 93 */ 'R', '7', '1', 0,
  /* 97 */ 'R', '8', '1', 0,
  /* 101 */ 'R', '9', '1', 0,
  /* 105 */ 'R', '1', 0,
  /* 108 */ 'R', '1', '0', '2', 0,
  /* 113 */ 'R', '1', '1', '2', 0,
  /* 118 */ 'R', '1', '2', 0,
  /* 122 */ 'R', '1', '2', '2', 0,
  /* 127 */ 'R', '2', '2', 0,
  /* 131 */ 'R', '3', '2', 0,
  /* 135 */ 'R', '4', '2', 0,
  /* 139 */ 'R', '5', '2', 0,
  /* 143 */ 'R', '6', '2', 0,
  /* 147 */ 'R', '7', '2', 0,
  /* 151 */ 'R', '8', '2', 0,
  /* 155 */ 'R', '9', '2', 0,
  /* 159 */ 'R', '2', 0,
  /* 162 */ 'R', '1', '0', '3', 0,
  /* 167 */ 'R', '1', '1', '3', 0,
  /* 172 */ 'R', '1', '3', 0,
  /* 176 */ 'R', '1', '2', '3', 0,
  /* 181 */ 'R', '2', '3', 0,
  /* 185 */ 'R', '3', '3', 0,
  /* 189 */ 'R', '4', '3', 0,
  /* 193 */ 'R', '5', '3', 0,
  /* 197 */ 'R', '6', '3', 0,
  /* 201 */ 'R', '7', '3', 0,
  /* 205 */ 'R', '8', '3', 0,
  /* 209 */ 'R', '9', '3', 0,
  /* 213 */ 'R', '3', 0,
  /* 216 */ 'R', '1', '0', '4', 0,
  /* 221 */ 'R', '1', '1', '4', 0,
  /* 226 */ 'R', '1', '4', 0,
  /* 230 */ 'R', '1', '2', '4', 0,
  /* 235 */ 'R', '2', '4', 0,
  /* 239 */ 'R', '3', '4', 0,
  /* 243 */ 'R', '4', '4', 0,
  /* 247 */ 'R', '5', '4', 0,
  /* 251 */ 'R', '6', '4', 0,
  /* 255 */ 'R', '7', '4', 0,
  /* 259 */ 'R', '8', '4', 0,
  /* 263 */ 'R', '9', '4', 0,
  /* 267 */ 'R', '4', 0,
  /* 270 */ 'R', '1', '0', '5', 0,
  /* 275 */ 'R', '1', '1', '5', 0,
  /* 280 */ 'R', '1', '5', 0,
  /* 284 */ 'R', '1', '2', '5', 0,
  /* 289 */ 'R', '2', '5', 0,
  /* 293 */ 'R', '3', '5', 0,
  /* 297 */ 'R', '4', '5', 0,
  /* 301 */ 'R', '5', '5', 0,
  /* 305 */ 'R', '6', '5', 0,
  /* 309 */ 'R', '7', '5', 0,
  /* 313 */ 'R', '8', '5', 0,
  /* 317 */ 'R', '9', '5', 0,
  /* 321 */ 'R', '5', 0,
  /* 324 */ 'R', '1', '0', '6', 0,
  /* 329 */ 'R', '1', '1', '6', 0,
  /* 334 */ 'R', '1', '6', 0,
  /* 338 */ 'R', '1', '2', '6', 0,
  /* 343 */ 'R', '2', '6', 0,
  /* 347 */ 'R', '3', '6', 0,
  /* 351 */ 'R', '4', '6', 0,
  /* 355 */ 'R', '5', '6', 0,
  /* 359 */ 'R', '6', '6', 0,
  /* 363 */ 'R', '7', '6', 0,
  /* 367 */ 'R', '8', '6', 0,
  /* 371 */ 'R', '9', '6', 0,
  /* 375 */ 'R', '6', 0,
  /* 378 */ 'R', '1', '0', '7', 0,
  /* 383 */ 'R', '1', '1', '7', 0,
  /* 388 */ 'R', '1', '7', 0,
  /* 392 */ 'R', '1', '2', '7', 0,
  /* 397 */ 'R', '2', '7', 0,
  /* 401 */ 'R', '3', '7', 0,
  /* 405 */ 'R', '4', '7', 0,
  /* 409 */ 'R', '5', '7', 0,
  /* 413 */ 'R', '6', '7', 0,
  /* 417 */ 'R', '7', '7', 0,
  /* 421 */ 'R', '8', '7', 0,
  /* 425 */ 'R', '9', '7', 0,
  /* 429 */ 'R', '7', 0,
  /* 432 */ 'R', '1', '0', '8', 0,
  /* 437 */ 'R', '1', '1', '8', 0,
  /* 442 */ 'R', '1', '8', 0,
  /* 446 */ 'R', '2', '8', 0,
  /* 450 */ 'R', '3', '8', 0,
  /* 454 */ 'R', '4', '8', 0,
  /* 458 */ 'R', '5', '8', 0,
  /* 462 */ 'R', '6', '8', 0,
  /* 466 */ 'R', '7', '8', 0,
  /* 470 */ 'R', '8', '8', 0,
  /* 474 */ 'R', '9', '8', 0,
  /* 478 */ 'R', '8', 0,
  /* 481 */ 'R', '1', '0', '9', 0,
  /* 486 */ 'R', '1', '1', '9', 0,
  /* 491 */ 'R', '1', '9', 0,
  /* 495 */ 'R', '2', '9', 0,
  /* 499 */ 'R', '3', '9', 0,
  /* 503 */ 'R', '4', '9', 0,
  /* 507 */ 'R', '5', '9', 0,
  /* 511 */ 'R', '6', '9', 0,
  /* 515 */ 'R', '7', '9', 0,
  /* 519 */ 'R', '8', '9', 0,
  /* 523 */ 'R', '9', '9', 0,
  /* 527 */ 'R', '9', 0,
};

extern const MCRegisterDesc SPURegDesc[] = { // Descriptors
  { 4, 0, 0, 0, 0, 0 },
  { 51, 1, 1, 1, 0, 1 },
  { 105, 1, 1, 1, 0, 1 },
  { 159, 1, 1, 1, 0, 1 },
  { 213, 1, 1, 1, 0, 1 },
  { 267, 1, 1, 1, 0, 1 },
  { 321, 1, 1, 1, 0, 1 },
  { 375, 1, 1, 1, 0, 1 },
  { 429, 1, 1, 1, 0, 1 },
  { 478, 1, 1, 1, 0, 1 },
  { 527, 1, 1, 1, 0, 1 },
  { 10, 1, 1, 1, 0, 1 },
  { 64, 1, 1, 1, 0, 1 },
  { 118, 1, 1, 1, 0, 1 },
  { 172, 1, 1, 1, 0, 1 },
  { 226, 1, 1, 1, 0, 1 },
  { 280, 1, 1, 1, 0, 1 },
  { 334, 1, 1, 1, 0, 1 },
  { 388, 1, 1, 1, 0, 1 },
  { 442, 1, 1, 1, 0, 1 },
  { 491, 1, 1, 1, 0, 1 },
  { 19, 1, 1, 1, 0, 1 },
  { 73, 1, 1, 1, 0, 1 },
  { 127, 1, 1, 1, 0, 1 },
  { 181, 1, 1, 1, 0, 1 },
  { 235, 1, 1, 1, 0, 1 },
  { 289, 1, 1, 1, 0, 1 },
  { 343, 1, 1, 1, 0, 1 },
  { 397, 1, 1, 1, 0, 1 },
  { 446, 1, 1, 1, 0, 1 },
  { 495, 1, 1, 1, 0, 1 },
  { 23, 1, 1, 1, 0, 1 },
  { 77, 1, 1, 1, 0, 1 },
  { 131, 1, 1, 1, 0, 1 },
  { 185, 1, 1, 1, 0, 1 },
  { 239, 1, 1, 1, 0, 1 },
  { 293, 1, 1, 1, 0, 1 },
  { 347, 1, 1, 1, 0, 1 },
  { 401, 1, 1, 1, 0, 1 },
  { 450, 1, 1, 1, 0, 1 },
  { 499, 1, 1, 1, 0, 1 },
  { 27, 1, 1, 1, 0, 1 },
  { 81, 1, 1, 1, 0, 1 },
  { 135, 1, 1, 1, 0, 1 },
  { 189, 1, 1, 1, 0, 1 },
  { 243, 1, 1, 1, 0, 1 },
  { 297, 1, 1, 1, 0, 1 },
  { 351, 1, 1, 1, 0, 1 },
  { 405, 1, 1, 1, 0, 1 },
  { 454, 1, 1, 1, 0, 1 },
  { 503, 1, 1, 1, 0, 1 },
  { 31, 1, 1, 1, 0, 1 },
  { 85, 1, 1, 1, 0, 1 },
  { 139, 1, 1, 1, 0, 1 },
  { 193, 1, 1, 1, 0, 1 },
  { 247, 1, 1, 1, 0, 1 },
  { 301, 1, 1, 1, 0, 1 },
  { 355, 1, 1, 1, 0, 1 },
  { 409, 1, 1, 1, 0, 1 },
  { 458, 1, 1, 1, 0, 1 },
  { 507, 1, 1, 1, 0, 1 },
  { 35, 1, 1, 1, 0, 1 },
  { 89, 1, 1, 1, 0, 1 },
  { 143, 1, 1, 1, 0, 1 },
  { 197, 1, 1, 1, 0, 1 },
  { 251, 1, 1, 1, 0, 1 },
  { 305, 1, 1, 1, 0, 1 },
  { 359, 1, 1, 1, 0, 1 },
  { 413, 1, 1, 1, 0, 1 },
  { 462, 1, 1, 1, 0, 1 },
  { 511, 1, 1, 1, 0, 1 },
  { 39, 1, 1, 1, 0, 1 },
  { 93, 1, 1, 1, 0, 1 },
  { 147, 1, 1, 1, 0, 1 },
  { 201, 1, 1, 1, 0, 1 },
  { 255, 1, 1, 1, 0, 1 },
  { 309, 1, 1, 1, 0, 1 },
  { 363, 1, 1, 1, 0, 1 },
  { 417, 1, 1, 1, 0, 1 },
  { 466, 1, 1, 1, 0, 1 },
  { 515, 1, 1, 1, 0, 1 },
  { 43, 1, 1, 1, 0, 1 },
  { 97, 1, 1, 1, 0, 1 },
  { 151, 1, 1, 1, 0, 1 },
  { 205, 1, 1, 1, 0, 1 },
  { 259, 1, 1, 1, 0, 1 },
  { 313, 1, 1, 1, 0, 1 },
  { 367, 1, 1, 1, 0, 1 },
  { 421, 1, 1, 1, 0, 1 },
  { 470, 1, 1, 1, 0, 1 },
  { 519, 1, 1, 1, 0, 1 },
  { 47, 1, 1, 1, 0, 1 },
  { 101, 1, 1, 1, 0, 1 },
  { 155, 1, 1, 1, 0, 1 },
  { 209, 1, 1, 1, 0, 1 },
  { 263, 1, 1, 1, 0, 1 },
  { 317, 1, 1, 1, 0, 1 },
  { 371, 1, 1, 1, 0, 1 },
  { 425, 1, 1, 1, 0, 1 },
  { 474, 1, 1, 1, 0, 1 },
  { 523, 1, 1, 1, 0, 1 },
  { 0, 1, 1, 1, 0, 1 },
  { 54, 1, 1, 1, 0, 1 },
  { 108, 1, 1, 1, 0, 1 },
  { 162, 1, 1, 1, 0, 1 },
  { 216, 1, 1, 1, 0, 1 },
  { 270, 1, 1, 1, 0, 1 },
  { 324, 1, 1, 1, 0, 1 },
  { 378, 1, 1, 1, 0, 1 },
  { 432, 1, 1, 1, 0, 1 },
  { 481, 1, 1, 1, 0, 1 },
  { 5, 1, 1, 1, 0, 1 },
  { 59, 1, 1, 1, 0, 1 },
  { 113, 1, 1, 1, 0, 1 },
  { 167, 1, 1, 1, 0, 1 },
  { 221, 1, 1, 1, 0, 1 },
  { 275, 1, 1, 1, 0, 1 },
  { 329, 1, 1, 1, 0, 1 },
  { 383, 1, 1, 1, 0, 1 },
  { 437, 1, 1, 1, 0, 1 },
  { 486, 1, 1, 1, 0, 1 },
  { 14, 1, 1, 1, 0, 1 },
  { 68, 1, 1, 1, 0, 1 },
  { 122, 1, 1, 1, 0, 1 },
  { 176, 1, 1, 1, 0, 1 },
  { 230, 1, 1, 1, 0, 1 },
  { 284, 1, 1, 1, 0, 1 },
  { 338, 1, 1, 1, 0, 1 },
  { 392, 1, 1, 1, 0, 1 },
};

extern const uint16_t SPURegUnitRoots[][2] = {
  { SPU::R0 },
  { SPU::R1 },
  { SPU::R2 },
  { SPU::R3 },
  { SPU::R4 },
  { SPU::R5 },
  { SPU::R6 },
  { SPU::R7 },
  { SPU::R8 },
  { SPU::R9 },
  { SPU::R10 },
  { SPU::R11 },
  { SPU::R12 },
  { SPU::R13 },
  { SPU::R14 },
  { SPU::R15 },
  { SPU::R16 },
  { SPU::R17 },
  { SPU::R18 },
  { SPU::R19 },
  { SPU::R20 },
  { SPU::R21 },
  { SPU::R22 },
  { SPU::R23 },
  { SPU::R24 },
  { SPU::R25 },
  { SPU::R26 },
  { SPU::R27 },
  { SPU::R28 },
  { SPU::R29 },
  { SPU::R30 },
  { SPU::R31 },
  { SPU::R32 },
  { SPU::R33 },
  { SPU::R34 },
  { SPU::R35 },
  { SPU::R36 },
  { SPU::R37 },
  { SPU::R38 },
  { SPU::R39 },
  { SPU::R40 },
  { SPU::R41 },
  { SPU::R42 },
  { SPU::R43 },
  { SPU::R44 },
  { SPU::R45 },
  { SPU::R46 },
  { SPU::R47 },
  { SPU::R48 },
  { SPU::R49 },
  { SPU::R50 },
  { SPU::R51 },
  { SPU::R52 },
  { SPU::R53 },
  { SPU::R54 },
  { SPU::R55 },
  { SPU::R56 },
  { SPU::R57 },
  { SPU::R58 },
  { SPU::R59 },
  { SPU::R60 },
  { SPU::R61 },
  { SPU::R62 },
  { SPU::R63 },
  { SPU::R64 },
  { SPU::R65 },
  { SPU::R66 },
  { SPU::R67 },
  { SPU::R68 },
  { SPU::R69 },
  { SPU::R70 },
  { SPU::R71 },
  { SPU::R72 },
  { SPU::R73 },
  { SPU::R74 },
  { SPU::R75 },
  { SPU::R76 },
  { SPU::R77 },
  { SPU::R78 },
  { SPU::R79 },
  { SPU::R80 },
  { SPU::R81 },
  { SPU::R82 },
  { SPU::R83 },
  { SPU::R84 },
  { SPU::R85 },
  { SPU::R86 },
  { SPU::R87 },
  { SPU::R88 },
  { SPU::R89 },
  { SPU::R90 },
  { SPU::R91 },
  { SPU::R92 },
  { SPU::R93 },
  { SPU::R94 },
  { SPU::R95 },
  { SPU::R96 },
  { SPU::R97 },
  { SPU::R98 },
  { SPU::R99 },
  { SPU::R100 },
  { SPU::R101 },
  { SPU::R102 },
  { SPU::R103 },
  { SPU::R104 },
  { SPU::R105 },
  { SPU::R106 },
  { SPU::R107 },
  { SPU::R108 },
  { SPU::R109 },
  { SPU::R110 },
  { SPU::R111 },
  { SPU::R112 },
  { SPU::R113 },
  { SPU::R114 },
  { SPU::R115 },
  { SPU::R116 },
  { SPU::R117 },
  { SPU::R118 },
  { SPU::R119 },
  { SPU::R120 },
  { SPU::R121 },
  { SPU::R122 },
  { SPU::R123 },
  { SPU::R124 },
  { SPU::R125 },
  { SPU::R126 },
  { SPU::R127 },
};

namespace {     // Register classes...
  // R8C Register Class...
  const uint16_t R8C[] = {
    SPU::R0, SPU::R1, SPU::R2, SPU::R3, SPU::R4, SPU::R5, SPU::R6, SPU::R7, SPU::R8, SPU::R9, SPU::R10, SPU::R11, SPU::R12, SPU::R13, SPU::R14, SPU::R15, SPU::R16, SPU::R17, SPU::R18, SPU::R19, SPU::R20, SPU::R21, SPU::R22, SPU::R23, SPU::R24, SPU::R25, SPU::R26, SPU::R27, SPU::R28, SPU::R29, SPU::R30, SPU::R31, SPU::R32, SPU::R33, SPU::R34, SPU::R35, SPU::R36, SPU::R37, SPU::R38, SPU::R39, SPU::R40, SPU::R41, SPU::R42, SPU::R43, SPU::R44, SPU::R45, SPU::R46, SPU::R47, SPU::R48, SPU::R49, SPU::R50, SPU::R51, SPU::R52, SPU::R53, SPU::R54, SPU::R55, SPU::R56, SPU::R57, SPU::R58, SPU::R59, SPU::R60, SPU::R61, SPU::R62, SPU::R63, SPU::R64, SPU::R65, SPU::R66, SPU::R67, SPU::R68, SPU::R69, SPU::R70, SPU::R71, SPU::R72, SPU::R73, SPU::R74, SPU::R75, SPU::R76, SPU::R77, SPU::R78, SPU::R79, SPU::R127, SPU::R126, SPU::R125, SPU::R124, SPU::R123, SPU::R122, SPU::R121, SPU::R120, SPU::R119, SPU::R118, SPU::R117, SPU::R116, SPU::R115, SPU::R114, SPU::R113, SPU::R112, SPU::R111, SPU::R110, SPU::R109, SPU::R108, SPU::R107, SPU::R106, SPU::R105, SPU::R104, SPU::R103, SPU::R102, SPU::R101, SPU::R100, SPU::R99, SPU::R98, SPU::R97, SPU::R96, SPU::R95, SPU::R94, SPU::R93, SPU::R92, SPU::R91, SPU::R90, SPU::R89, SPU::R88, SPU::R87, SPU::R86, SPU::R85, SPU::R84, SPU::R83, SPU::R82, SPU::R81, SPU::R80, 
  };

  // R8C Bit set.
  const uint8_t R8CBits[] = {
    0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 
  };

  // R16C Register Class...
  const uint16_t R16C[] = {
    SPU::R0, SPU::R1, SPU::R2, SPU::R3, SPU::R4, SPU::R5, SPU::R6, SPU::R7, SPU::R8, SPU::R9, SPU::R10, SPU::R11, SPU::R12, SPU::R13, SPU::R14, SPU::R15, SPU::R16, SPU::R17, SPU::R18, SPU::R19, SPU::R20, SPU::R21, SPU::R22, SPU::R23, SPU::R24, SPU::R25, SPU::R26, SPU::R27, SPU::R28, SPU::R29, SPU::R30, SPU::R31, SPU::R32, SPU::R33, SPU::R34, SPU::R35, SPU::R36, SPU::R37, SPU::R38, SPU::R39, SPU::R40, SPU::R41, SPU::R42, SPU::R43, SPU::R44, SPU::R45, SPU::R46, SPU::R47, SPU::R48, SPU::R49, SPU::R50, SPU::R51, SPU::R52, SPU::R53, SPU::R54, SPU::R55, SPU::R56, SPU::R57, SPU::R58, SPU::R59, SPU::R60, SPU::R61, SPU::R62, SPU::R63, SPU::R64, SPU::R65, SPU::R66, SPU::R67, SPU::R68, SPU::R69, SPU::R70, SPU::R71, SPU::R72, SPU::R73, SPU::R74, SPU::R75, SPU::R76, SPU::R77, SPU::R78, SPU::R79, SPU::R127, SPU::R126, SPU::R125, SPU::R124, SPU::R123, SPU::R122, SPU::R121, SPU::R120, SPU::R119, SPU::R118, SPU::R117, SPU::R116, SPU::R115, SPU::R114, SPU::R113, SPU::R112, SPU::R111, SPU::R110, SPU::R109, SPU::R108, SPU::R107, SPU::R106, SPU::R105, SPU::R104, SPU::R103, SPU::R102, SPU::R101, SPU::R100, SPU::R99, SPU::R98, SPU::R97, SPU::R96, SPU::R95, SPU::R94, SPU::R93, SPU::R92, SPU::R91, SPU::R90, SPU::R89, SPU::R88, SPU::R87, SPU::R86, SPU::R85, SPU::R84, SPU::R83, SPU::R82, SPU::R81, SPU::R80, 
  };

  // R16C Bit set.
  const uint8_t R16CBits[] = {
    0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 
  };

  // R32C Register Class...
  const uint16_t R32C[] = {
    SPU::R0, SPU::R1, SPU::R2, SPU::R3, SPU::R4, SPU::R5, SPU::R6, SPU::R7, SPU::R8, SPU::R9, SPU::R10, SPU::R11, SPU::R12, SPU::R13, SPU::R14, SPU::R15, SPU::R16, SPU::R17, SPU::R18, SPU::R19, SPU::R20, SPU::R21, SPU::R22, SPU::R23, SPU::R24, SPU::R25, SPU::R26, SPU::R27, SPU::R28, SPU::R29, SPU::R30, SPU::R31, SPU::R32, SPU::R33, SPU::R34, SPU::R35, SPU::R36, SPU::R37, SPU::R38, SPU::R39, SPU::R40, SPU::R41, SPU::R42, SPU::R43, SPU::R44, SPU::R45, SPU::R46, SPU::R47, SPU::R48, SPU::R49, SPU::R50, SPU::R51, SPU::R52, SPU::R53, SPU::R54, SPU::R55, SPU::R56, SPU::R57, SPU::R58, SPU::R59, SPU::R60, SPU::R61, SPU::R62, SPU::R63, SPU::R64, SPU::R65, SPU::R66, SPU::R67, SPU::R68, SPU::R69, SPU::R70, SPU::R71, SPU::R72, SPU::R73, SPU::R74, SPU::R75, SPU::R76, SPU::R77, SPU::R78, SPU::R79, SPU::R127, SPU::R126, SPU::R125, SPU::R124, SPU::R123, SPU::R122, SPU::R121, SPU::R120, SPU::R119, SPU::R118, SPU::R117, SPU::R116, SPU::R115, SPU::R114, SPU::R113, SPU::R112, SPU::R111, SPU::R110, SPU::R109, SPU::R108, SPU::R107, SPU::R106, SPU::R105, SPU::R104, SPU::R103, SPU::R102, SPU::R101, SPU::R100, SPU::R99, SPU::R98, SPU::R97, SPU::R96, SPU::R95, SPU::R94, SPU::R93, SPU::R92, SPU::R91, SPU::R90, SPU::R89, SPU::R88, SPU::R87, SPU::R86, SPU::R85, SPU::R84, SPU::R83, SPU::R82, SPU::R81, SPU::R80, 
  };

  // R32C Bit set.
  const uint8_t R32CBits[] = {
    0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 
  };

  // R32FP Register Class...
  const uint16_t R32FP[] = {
    SPU::R0, SPU::R1, SPU::R2, SPU::R3, SPU::R4, SPU::R5, SPU::R6, SPU::R7, SPU::R8, SPU::R9, SPU::R10, SPU::R11, SPU::R12, SPU::R13, SPU::R14, SPU::R15, SPU::R16, SPU::R17, SPU::R18, SPU::R19, SPU::R20, SPU::R21, SPU::R22, SPU::R23, SPU::R24, SPU::R25, SPU::R26, SPU::R27, SPU::R28, SPU::R29, SPU::R30, SPU::R31, SPU::R32, SPU::R33, SPU::R34, SPU::R35, SPU::R36, SPU::R37, SPU::R38, SPU::R39, SPU::R40, SPU::R41, SPU::R42, SPU::R43, SPU::R44, SPU::R45, SPU::R46, SPU::R47, SPU::R48, SPU::R49, SPU::R50, SPU::R51, SPU::R52, SPU::R53, SPU::R54, SPU::R55, SPU::R56, SPU::R57, SPU::R58, SPU::R59, SPU::R60, SPU::R61, SPU::R62, SPU::R63, SPU::R64, SPU::R65, SPU::R66, SPU::R67, SPU::R68, SPU::R69, SPU::R70, SPU::R71, SPU::R72, SPU::R73, SPU::R74, SPU::R75, SPU::R76, SPU::R77, SPU::R78, SPU::R79, SPU::R127, SPU::R126, SPU::R125, SPU::R124, SPU::R123, SPU::R122, SPU::R121, SPU::R120, SPU::R119, SPU::R118, SPU::R117, SPU::R116, SPU::R115, SPU::R114, SPU::R113, SPU::R112, SPU::R111, SPU::R110, SPU::R109, SPU::R108, SPU::R107, SPU::R106, SPU::R105, SPU::R104, SPU::R103, SPU::R102, SPU::R101, SPU::R100, SPU::R99, SPU::R98, SPU::R97, SPU::R96, SPU::R95, SPU::R94, SPU::R93, SPU::R92, SPU::R91, SPU::R90, SPU::R89, SPU::R88, SPU::R87, SPU::R86, SPU::R85, SPU::R84, SPU::R83, SPU::R82, SPU::R81, SPU::R80, 
  };

  // R32FP Bit set.
  const uint8_t R32FPBits[] = {
    0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 
  };

  // R64C Register Class...
  const uint16_t R64C[] = {
    SPU::R0, SPU::R1, SPU::R2, SPU::R3, SPU::R4, SPU::R5, SPU::R6, SPU::R7, SPU::R8, SPU::R9, SPU::R10, SPU::R11, SPU::R12, SPU::R13, SPU::R14, SPU::R15, SPU::R16, SPU::R17, SPU::R18, SPU::R19, SPU::R20, SPU::R21, SPU::R22, SPU::R23, SPU::R24, SPU::R25, SPU::R26, SPU::R27, SPU::R28, SPU::R29, SPU::R30, SPU::R31, SPU::R32, SPU::R33, SPU::R34, SPU::R35, SPU::R36, SPU::R37, SPU::R38, SPU::R39, SPU::R40, SPU::R41, SPU::R42, SPU::R43, SPU::R44, SPU::R45, SPU::R46, SPU::R47, SPU::R48, SPU::R49, SPU::R50, SPU::R51, SPU::R52, SPU::R53, SPU::R54, SPU::R55, SPU::R56, SPU::R57, SPU::R58, SPU::R59, SPU::R60, SPU::R61, SPU::R62, SPU::R63, SPU::R64, SPU::R65, SPU::R66, SPU::R67, SPU::R68, SPU::R69, SPU::R70, SPU::R71, SPU::R72, SPU::R73, SPU::R74, SPU::R75, SPU::R76, SPU::R77, SPU::R78, SPU::R79, SPU::R127, SPU::R126, SPU::R125, SPU::R124, SPU::R123, SPU::R122, SPU::R121, SPU::R120, SPU::R119, SPU::R118, SPU::R117, SPU::R116, SPU::R115, SPU::R114, SPU::R113, SPU::R112, SPU::R111, SPU::R110, SPU::R109, SPU::R108, SPU::R107, SPU::R106, SPU::R105, SPU::R104, SPU::R103, SPU::R102, SPU::R101, SPU::R100, SPU::R99, SPU::R98, SPU::R97, SPU::R96, SPU::R95, SPU::R94, SPU::R93, SPU::R92, SPU::R91, SPU::R90, SPU::R89, SPU::R88, SPU::R87, SPU::R86, SPU::R85, SPU::R84, SPU::R83, SPU::R82, SPU::R81, SPU::R80, 
  };

  // R64C Bit set.
  const uint8_t R64CBits[] = {
    0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 
  };

  // R64FP Register Class...
  const uint16_t R64FP[] = {
    SPU::R0, SPU::R1, SPU::R2, SPU::R3, SPU::R4, SPU::R5, SPU::R6, SPU::R7, SPU::R8, SPU::R9, SPU::R10, SPU::R11, SPU::R12, SPU::R13, SPU::R14, SPU::R15, SPU::R16, SPU::R17, SPU::R18, SPU::R19, SPU::R20, SPU::R21, SPU::R22, SPU::R23, SPU::R24, SPU::R25, SPU::R26, SPU::R27, SPU::R28, SPU::R29, SPU::R30, SPU::R31, SPU::R32, SPU::R33, SPU::R34, SPU::R35, SPU::R36, SPU::R37, SPU::R38, SPU::R39, SPU::R40, SPU::R41, SPU::R42, SPU::R43, SPU::R44, SPU::R45, SPU::R46, SPU::R47, SPU::R48, SPU::R49, SPU::R50, SPU::R51, SPU::R52, SPU::R53, SPU::R54, SPU::R55, SPU::R56, SPU::R57, SPU::R58, SPU::R59, SPU::R60, SPU::R61, SPU::R62, SPU::R63, SPU::R64, SPU::R65, SPU::R66, SPU::R67, SPU::R68, SPU::R69, SPU::R70, SPU::R71, SPU::R72, SPU::R73, SPU::R74, SPU::R75, SPU::R76, SPU::R77, SPU::R78, SPU::R79, SPU::R127, SPU::R126, SPU::R125, SPU::R124, SPU::R123, SPU::R122, SPU::R121, SPU::R120, SPU::R119, SPU::R118, SPU::R117, SPU::R116, SPU::R115, SPU::R114, SPU::R113, SPU::R112, SPU::R111, SPU::R110, SPU::R109, SPU::R108, SPU::R107, SPU::R106, SPU::R105, SPU::R104, SPU::R103, SPU::R102, SPU::R101, SPU::R100, SPU::R99, SPU::R98, SPU::R97, SPU::R96, SPU::R95, SPU::R94, SPU::R93, SPU::R92, SPU::R91, SPU::R90, SPU::R89, SPU::R88, SPU::R87, SPU::R86, SPU::R85, SPU::R84, SPU::R83, SPU::R82, SPU::R81, SPU::R80, 
  };

  // R64FP Bit set.
  const uint8_t R64FPBits[] = {
    0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 
  };

  // GPRC Register Class...
  const uint16_t GPRC[] = {
    SPU::R0, SPU::R1, SPU::R2, SPU::R3, SPU::R4, SPU::R5, SPU::R6, SPU::R7, SPU::R8, SPU::R9, SPU::R10, SPU::R11, SPU::R12, SPU::R13, SPU::R14, SPU::R15, SPU::R16, SPU::R17, SPU::R18, SPU::R19, SPU::R20, SPU::R21, SPU::R22, SPU::R23, SPU::R24, SPU::R25, SPU::R26, SPU::R27, SPU::R28, SPU::R29, SPU::R30, SPU::R31, SPU::R32, SPU::R33, SPU::R34, SPU::R35, SPU::R36, SPU::R37, SPU::R38, SPU::R39, SPU::R40, SPU::R41, SPU::R42, SPU::R43, SPU::R44, SPU::R45, SPU::R46, SPU::R47, SPU::R48, SPU::R49, SPU::R50, SPU::R51, SPU::R52, SPU::R53, SPU::R54, SPU::R55, SPU::R56, SPU::R57, SPU::R58, SPU::R59, SPU::R60, SPU::R61, SPU::R62, SPU::R63, SPU::R64, SPU::R65, SPU::R66, SPU::R67, SPU::R68, SPU::R69, SPU::R70, SPU::R71, SPU::R72, SPU::R73, SPU::R74, SPU::R75, SPU::R76, SPU::R77, SPU::R78, SPU::R79, SPU::R127, SPU::R126, SPU::R125, SPU::R124, SPU::R123, SPU::R122, SPU::R121, SPU::R120, SPU::R119, SPU::R118, SPU::R117, SPU::R116, SPU::R115, SPU::R114, SPU::R113, SPU::R112, SPU::R111, SPU::R110, SPU::R109, SPU::R108, SPU::R107, SPU::R106, SPU::R105, SPU::R104, SPU::R103, SPU::R102, SPU::R101, SPU::R100, SPU::R99, SPU::R98, SPU::R97, SPU::R96, SPU::R95, SPU::R94, SPU::R93, SPU::R92, SPU::R91, SPU::R90, SPU::R89, SPU::R88, SPU::R87, SPU::R86, SPU::R85, SPU::R84, SPU::R83, SPU::R82, SPU::R81, SPU::R80, 
  };

  // GPRC Bit set.
  const uint8_t GPRCBits[] = {
    0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 
  };

  // VECREG Register Class...
  const uint16_t VECREG[] = {
    SPU::R0, SPU::R1, SPU::R2, SPU::R3, SPU::R4, SPU::R5, SPU::R6, SPU::R7, SPU::R8, SPU::R9, SPU::R10, SPU::R11, SPU::R12, SPU::R13, SPU::R14, SPU::R15, SPU::R16, SPU::R17, SPU::R18, SPU::R19, SPU::R20, SPU::R21, SPU::R22, SPU::R23, SPU::R24, SPU::R25, SPU::R26, SPU::R27, SPU::R28, SPU::R29, SPU::R30, SPU::R31, SPU::R32, SPU::R33, SPU::R34, SPU::R35, SPU::R36, SPU::R37, SPU::R38, SPU::R39, SPU::R40, SPU::R41, SPU::R42, SPU::R43, SPU::R44, SPU::R45, SPU::R46, SPU::R47, SPU::R48, SPU::R49, SPU::R50, SPU::R51, SPU::R52, SPU::R53, SPU::R54, SPU::R55, SPU::R56, SPU::R57, SPU::R58, SPU::R59, SPU::R60, SPU::R61, SPU::R62, SPU::R63, SPU::R64, SPU::R65, SPU::R66, SPU::R67, SPU::R68, SPU::R69, SPU::R70, SPU::R71, SPU::R72, SPU::R73, SPU::R74, SPU::R75, SPU::R76, SPU::R77, SPU::R78, SPU::R79, SPU::R127, SPU::R126, SPU::R125, SPU::R124, SPU::R123, SPU::R122, SPU::R121, SPU::R120, SPU::R119, SPU::R118, SPU::R117, SPU::R116, SPU::R115, SPU::R114, SPU::R113, SPU::R112, SPU::R111, SPU::R110, SPU::R109, SPU::R108, SPU::R107, SPU::R106, SPU::R105, SPU::R104, SPU::R103, SPU::R102, SPU::R101, SPU::R100, SPU::R99, SPU::R98, SPU::R97, SPU::R96, SPU::R95, SPU::R94, SPU::R93, SPU::R92, SPU::R91, SPU::R90, SPU::R89, SPU::R88, SPU::R87, SPU::R86, SPU::R85, SPU::R84, SPU::R83, SPU::R82, SPU::R81, SPU::R80, 
  };

  // VECREG Bit set.
  const uint8_t VECREGBits[] = {
    0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 
  };

}

extern const MCRegisterClass SPUMCRegisterClasses[] = {
  { "R8C", R8C, R8CBits, 128, sizeof(R8CBits), SPU::R8CRegClassID, 1, 16, 1, 1 },
  { "R16C", R16C, R16CBits, 128, sizeof(R16CBits), SPU::R16CRegClassID, 2, 16, 1, 1 },
  { "R32C", R32C, R32CBits, 128, sizeof(R32CBits), SPU::R32CRegClassID, 4, 16, 1, 1 },
  { "R32FP", R32FP, R32FPBits, 128, sizeof(R32FPBits), SPU::R32FPRegClassID, 4, 16, 1, 1 },
  { "R64C", R64C, R64CBits, 128, sizeof(R64CBits), SPU::R64CRegClassID, 8, 16, 1, 1 },
  { "R64FP", R64FP, R64FPBits, 128, sizeof(R64FPBits), SPU::R64FPRegClassID, 8, 16, 1, 1 },
  { "GPRC", GPRC, GPRCBits, 128, sizeof(GPRCBits), SPU::GPRCRegClassID, 16, 16, 1, 1 },
  { "VECREG", VECREG, VECREGBits, 128, sizeof(VECREGBits), SPU::VECREGRegClassID, 16, 16, 1, 1 },
};

// SPU Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair SPUDwarfFlavour0Dwarf2L[] = {
  { 0U, SPU::R0 },
  { 1U, SPU::R1 },
  { 2U, SPU::R2 },
  { 3U, SPU::R3 },
  { 4U, SPU::R4 },
  { 5U, SPU::R5 },
  { 6U, SPU::R6 },
  { 7U, SPU::R7 },
  { 8U, SPU::R8 },
  { 9U, SPU::R9 },
  { 10U, SPU::R10 },
  { 11U, SPU::R11 },
  { 12U, SPU::R12 },
  { 13U, SPU::R13 },
  { 14U, SPU::R14 },
  { 15U, SPU::R15 },
  { 16U, SPU::R16 },
  { 17U, SPU::R17 },
  { 18U, SPU::R18 },
  { 19U, SPU::R19 },
  { 20U, SPU::R20 },
  { 21U, SPU::R21 },
  { 22U, SPU::R22 },
  { 23U, SPU::R23 },
  { 24U, SPU::R24 },
  { 25U, SPU::R25 },
  { 26U, SPU::R26 },
  { 27U, SPU::R27 },
  { 28U, SPU::R28 },
  { 29U, SPU::R29 },
  { 30U, SPU::R30 },
  { 31U, SPU::R31 },
  { 32U, SPU::R32 },
  { 33U, SPU::R33 },
  { 34U, SPU::R34 },
  { 35U, SPU::R35 },
  { 36U, SPU::R36 },
  { 37U, SPU::R37 },
  { 38U, SPU::R38 },
  { 39U, SPU::R39 },
  { 40U, SPU::R40 },
  { 41U, SPU::R41 },
  { 42U, SPU::R42 },
  { 43U, SPU::R43 },
  { 44U, SPU::R44 },
  { 45U, SPU::R45 },
  { 46U, SPU::R46 },
  { 47U, SPU::R47 },
  { 48U, SPU::R48 },
  { 49U, SPU::R49 },
  { 50U, SPU::R50 },
  { 51U, SPU::R51 },
  { 52U, SPU::R52 },
  { 53U, SPU::R53 },
  { 54U, SPU::R54 },
  { 55U, SPU::R55 },
  { 56U, SPU::R56 },
  { 57U, SPU::R57 },
  { 58U, SPU::R58 },
  { 59U, SPU::R59 },
  { 60U, SPU::R60 },
  { 61U, SPU::R61 },
  { 62U, SPU::R62 },
  { 63U, SPU::R63 },
  { 64U, SPU::R64 },
  { 65U, SPU::R65 },
  { 66U, SPU::R66 },
  { 67U, SPU::R67 },
  { 68U, SPU::R68 },
  { 69U, SPU::R69 },
  { 70U, SPU::R70 },
  { 71U, SPU::R71 },
  { 72U, SPU::R72 },
  { 73U, SPU::R73 },
  { 74U, SPU::R74 },
  { 75U, SPU::R75 },
  { 76U, SPU::R76 },
  { 77U, SPU::R77 },
  { 78U, SPU::R78 },
  { 79U, SPU::R79 },
  { 80U, SPU::R80 },
  { 81U, SPU::R81 },
  { 82U, SPU::R82 },
  { 83U, SPU::R83 },
  { 84U, SPU::R84 },
  { 85U, SPU::R85 },
  { 86U, SPU::R86 },
  { 87U, SPU::R87 },
  { 88U, SPU::R88 },
  { 89U, SPU::R89 },
  { 90U, SPU::R90 },
  { 91U, SPU::R91 },
  { 92U, SPU::R92 },
  { 93U, SPU::R93 },
  { 94U, SPU::R94 },
  { 95U, SPU::R95 },
  { 96U, SPU::R96 },
  { 97U, SPU::R97 },
  { 98U, SPU::R98 },
  { 99U, SPU::R99 },
  { 100U, SPU::R100 },
  { 101U, SPU::R101 },
  { 102U, SPU::R102 },
  { 103U, SPU::R103 },
  { 104U, SPU::R104 },
  { 105U, SPU::R105 },
  { 106U, SPU::R106 },
  { 107U, SPU::R107 },
  { 108U, SPU::R108 },
  { 109U, SPU::R109 },
  { 110U, SPU::R110 },
  { 111U, SPU::R111 },
  { 112U, SPU::R112 },
  { 113U, SPU::R113 },
  { 114U, SPU::R114 },
  { 115U, SPU::R115 },
  { 116U, SPU::R116 },
  { 117U, SPU::R117 },
  { 118U, SPU::R118 },
  { 119U, SPU::R119 },
  { 120U, SPU::R120 },
  { 121U, SPU::R121 },
  { 122U, SPU::R122 },
  { 123U, SPU::R123 },
  { 124U, SPU::R124 },
  { 125U, SPU::R125 },
  { 126U, SPU::R126 },
  { 127U, SPU::R127 },
};
extern const unsigned SPUDwarfFlavour0Dwarf2LSize = sizeof(SPUDwarfFlavour0Dwarf2L)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair SPUEHFlavour0Dwarf2L[] = {
  { 0U, SPU::R0 },
  { 1U, SPU::R1 },
  { 2U, SPU::R2 },
  { 3U, SPU::R3 },
  { 4U, SPU::R4 },
  { 5U, SPU::R5 },
  { 6U, SPU::R6 },
  { 7U, SPU::R7 },
  { 8U, SPU::R8 },
  { 9U, SPU::R9 },
  { 10U, SPU::R10 },
  { 11U, SPU::R11 },
  { 12U, SPU::R12 },
  { 13U, SPU::R13 },
  { 14U, SPU::R14 },
  { 15U, SPU::R15 },
  { 16U, SPU::R16 },
  { 17U, SPU::R17 },
  { 18U, SPU::R18 },
  { 19U, SPU::R19 },
  { 20U, SPU::R20 },
  { 21U, SPU::R21 },
  { 22U, SPU::R22 },
  { 23U, SPU::R23 },
  { 24U, SPU::R24 },
  { 25U, SPU::R25 },
  { 26U, SPU::R26 },
  { 27U, SPU::R27 },
  { 28U, SPU::R28 },
  { 29U, SPU::R29 },
  { 30U, SPU::R30 },
  { 31U, SPU::R31 },
  { 32U, SPU::R32 },
  { 33U, SPU::R33 },
  { 34U, SPU::R34 },
  { 35U, SPU::R35 },
  { 36U, SPU::R36 },
  { 37U, SPU::R37 },
  { 38U, SPU::R38 },
  { 39U, SPU::R39 },
  { 40U, SPU::R40 },
  { 41U, SPU::R41 },
  { 42U, SPU::R42 },
  { 43U, SPU::R43 },
  { 44U, SPU::R44 },
  { 45U, SPU::R45 },
  { 46U, SPU::R46 },
  { 47U, SPU::R47 },
  { 48U, SPU::R48 },
  { 49U, SPU::R49 },
  { 50U, SPU::R50 },
  { 51U, SPU::R51 },
  { 52U, SPU::R52 },
  { 53U, SPU::R53 },
  { 54U, SPU::R54 },
  { 55U, SPU::R55 },
  { 56U, SPU::R56 },
  { 57U, SPU::R57 },
  { 58U, SPU::R58 },
  { 59U, SPU::R59 },
  { 60U, SPU::R60 },
  { 61U, SPU::R61 },
  { 62U, SPU::R62 },
  { 63U, SPU::R63 },
  { 64U, SPU::R64 },
  { 65U, SPU::R65 },
  { 66U, SPU::R66 },
  { 67U, SPU::R67 },
  { 68U, SPU::R68 },
  { 69U, SPU::R69 },
  { 70U, SPU::R70 },
  { 71U, SPU::R71 },
  { 72U, SPU::R72 },
  { 73U, SPU::R73 },
  { 74U, SPU::R74 },
  { 75U, SPU::R75 },
  { 76U, SPU::R76 },
  { 77U, SPU::R77 },
  { 78U, SPU::R78 },
  { 79U, SPU::R79 },
  { 80U, SPU::R80 },
  { 81U, SPU::R81 },
  { 82U, SPU::R82 },
  { 83U, SPU::R83 },
  { 84U, SPU::R84 },
  { 85U, SPU::R85 },
  { 86U, SPU::R86 },
  { 87U, SPU::R87 },
  { 88U, SPU::R88 },
  { 89U, SPU::R89 },
  { 90U, SPU::R90 },
  { 91U, SPU::R91 },
  { 92U, SPU::R92 },
  { 93U, SPU::R93 },
  { 94U, SPU::R94 },
  { 95U, SPU::R95 },
  { 96U, SPU::R96 },
  { 97U, SPU::R97 },
  { 98U, SPU::R98 },
  { 99U, SPU::R99 },
  { 100U, SPU::R100 },
  { 101U, SPU::R101 },
  { 102U, SPU::R102 },
  { 103U, SPU::R103 },
  { 104U, SPU::R104 },
  { 105U, SPU::R105 },
  { 106U, SPU::R106 },
  { 107U, SPU::R107 },
  { 108U, SPU::R108 },
  { 109U, SPU::R109 },
  { 110U, SPU::R110 },
  { 111U, SPU::R111 },
  { 112U, SPU::R112 },
  { 113U, SPU::R113 },
  { 114U, SPU::R114 },
  { 115U, SPU::R115 },
  { 116U, SPU::R116 },
  { 117U, SPU::R117 },
  { 118U, SPU::R118 },
  { 119U, SPU::R119 },
  { 120U, SPU::R120 },
  { 121U, SPU::R121 },
  { 122U, SPU::R122 },
  { 123U, SPU::R123 },
  { 124U, SPU::R124 },
  { 125U, SPU::R125 },
  { 126U, SPU::R126 },
  { 127U, SPU::R127 },
};
extern const unsigned SPUEHFlavour0Dwarf2LSize = sizeof(SPUEHFlavour0Dwarf2L)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair SPUDwarfFlavour0L2Dwarf[] = {
  { SPU::R0, 0U },
  { SPU::R1, 1U },
  { SPU::R2, 2U },
  { SPU::R3, 3U },
  { SPU::R4, 4U },
  { SPU::R5, 5U },
  { SPU::R6, 6U },
  { SPU::R7, 7U },
  { SPU::R8, 8U },
  { SPU::R9, 9U },
  { SPU::R10, 10U },
  { SPU::R11, 11U },
  { SPU::R12, 12U },
  { SPU::R13, 13U },
  { SPU::R14, 14U },
  { SPU::R15, 15U },
  { SPU::R16, 16U },
  { SPU::R17, 17U },
  { SPU::R18, 18U },
  { SPU::R19, 19U },
  { SPU::R20, 20U },
  { SPU::R21, 21U },
  { SPU::R22, 22U },
  { SPU::R23, 23U },
  { SPU::R24, 24U },
  { SPU::R25, 25U },
  { SPU::R26, 26U },
  { SPU::R27, 27U },
  { SPU::R28, 28U },
  { SPU::R29, 29U },
  { SPU::R30, 30U },
  { SPU::R31, 31U },
  { SPU::R32, 32U },
  { SPU::R33, 33U },
  { SPU::R34, 34U },
  { SPU::R35, 35U },
  { SPU::R36, 36U },
  { SPU::R37, 37U },
  { SPU::R38, 38U },
  { SPU::R39, 39U },
  { SPU::R40, 40U },
  { SPU::R41, 41U },
  { SPU::R42, 42U },
  { SPU::R43, 43U },
  { SPU::R44, 44U },
  { SPU::R45, 45U },
  { SPU::R46, 46U },
  { SPU::R47, 47U },
  { SPU::R48, 48U },
  { SPU::R49, 49U },
  { SPU::R50, 50U },
  { SPU::R51, 51U },
  { SPU::R52, 52U },
  { SPU::R53, 53U },
  { SPU::R54, 54U },
  { SPU::R55, 55U },
  { SPU::R56, 56U },
  { SPU::R57, 57U },
  { SPU::R58, 58U },
  { SPU::R59, 59U },
  { SPU::R60, 60U },
  { SPU::R61, 61U },
  { SPU::R62, 62U },
  { SPU::R63, 63U },
  { SPU::R64, 64U },
  { SPU::R65, 65U },
  { SPU::R66, 66U },
  { SPU::R67, 67U },
  { SPU::R68, 68U },
  { SPU::R69, 69U },
  { SPU::R70, 70U },
  { SPU::R71, 71U },
  { SPU::R72, 72U },
  { SPU::R73, 73U },
  { SPU::R74, 74U },
  { SPU::R75, 75U },
  { SPU::R76, 76U },
  { SPU::R77, 77U },
  { SPU::R78, 78U },
  { SPU::R79, 79U },
  { SPU::R80, 80U },
  { SPU::R81, 81U },
  { SPU::R82, 82U },
  { SPU::R83, 83U },
  { SPU::R84, 84U },
  { SPU::R85, 85U },
  { SPU::R86, 86U },
  { SPU::R87, 87U },
  { SPU::R88, 88U },
  { SPU::R89, 89U },
  { SPU::R90, 90U },
  { SPU::R91, 91U },
  { SPU::R92, 92U },
  { SPU::R93, 93U },
  { SPU::R94, 94U },
  { SPU::R95, 95U },
  { SPU::R96, 96U },
  { SPU::R97, 97U },
  { SPU::R98, 98U },
  { SPU::R99, 99U },
  { SPU::R100, 100U },
  { SPU::R101, 101U },
  { SPU::R102, 102U },
  { SPU::R103, 103U },
  { SPU::R104, 104U },
  { SPU::R105, 105U },
  { SPU::R106, 106U },
  { SPU::R107, 107U },
  { SPU::R108, 108U },
  { SPU::R109, 109U },
  { SPU::R110, 110U },
  { SPU::R111, 111U },
  { SPU::R112, 112U },
  { SPU::R113, 113U },
  { SPU::R114, 114U },
  { SPU::R115, 115U },
  { SPU::R116, 116U },
  { SPU::R117, 117U },
  { SPU::R118, 118U },
  { SPU::R119, 119U },
  { SPU::R120, 120U },
  { SPU::R121, 121U },
  { SPU::R122, 122U },
  { SPU::R123, 123U },
  { SPU::R124, 124U },
  { SPU::R125, 125U },
  { SPU::R126, 126U },
  { SPU::R127, 127U },
};
extern const unsigned SPUDwarfFlavour0L2DwarfSize = sizeof(SPUDwarfFlavour0L2Dwarf)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair SPUEHFlavour0L2Dwarf[] = {
  { SPU::R0, 0U },
  { SPU::R1, 1U },
  { SPU::R2, 2U },
  { SPU::R3, 3U },
  { SPU::R4, 4U },
  { SPU::R5, 5U },
  { SPU::R6, 6U },
  { SPU::R7, 7U },
  { SPU::R8, 8U },
  { SPU::R9, 9U },
  { SPU::R10, 10U },
  { SPU::R11, 11U },
  { SPU::R12, 12U },
  { SPU::R13, 13U },
  { SPU::R14, 14U },
  { SPU::R15, 15U },
  { SPU::R16, 16U },
  { SPU::R17, 17U },
  { SPU::R18, 18U },
  { SPU::R19, 19U },
  { SPU::R20, 20U },
  { SPU::R21, 21U },
  { SPU::R22, 22U },
  { SPU::R23, 23U },
  { SPU::R24, 24U },
  { SPU::R25, 25U },
  { SPU::R26, 26U },
  { SPU::R27, 27U },
  { SPU::R28, 28U },
  { SPU::R29, 29U },
  { SPU::R30, 30U },
  { SPU::R31, 31U },
  { SPU::R32, 32U },
  { SPU::R33, 33U },
  { SPU::R34, 34U },
  { SPU::R35, 35U },
  { SPU::R36, 36U },
  { SPU::R37, 37U },
  { SPU::R38, 38U },
  { SPU::R39, 39U },
  { SPU::R40, 40U },
  { SPU::R41, 41U },
  { SPU::R42, 42U },
  { SPU::R43, 43U },
  { SPU::R44, 44U },
  { SPU::R45, 45U },
  { SPU::R46, 46U },
  { SPU::R47, 47U },
  { SPU::R48, 48U },
  { SPU::R49, 49U },
  { SPU::R50, 50U },
  { SPU::R51, 51U },
  { SPU::R52, 52U },
  { SPU::R53, 53U },
  { SPU::R54, 54U },
  { SPU::R55, 55U },
  { SPU::R56, 56U },
  { SPU::R57, 57U },
  { SPU::R58, 58U },
  { SPU::R59, 59U },
  { SPU::R60, 60U },
  { SPU::R61, 61U },
  { SPU::R62, 62U },
  { SPU::R63, 63U },
  { SPU::R64, 64U },
  { SPU::R65, 65U },
  { SPU::R66, 66U },
  { SPU::R67, 67U },
  { SPU::R68, 68U },
  { SPU::R69, 69U },
  { SPU::R70, 70U },
  { SPU::R71, 71U },
  { SPU::R72, 72U },
  { SPU::R73, 73U },
  { SPU::R74, 74U },
  { SPU::R75, 75U },
  { SPU::R76, 76U },
  { SPU::R77, 77U },
  { SPU::R78, 78U },
  { SPU::R79, 79U },
  { SPU::R80, 80U },
  { SPU::R81, 81U },
  { SPU::R82, 82U },
  { SPU::R83, 83U },
  { SPU::R84, 84U },
  { SPU::R85, 85U },
  { SPU::R86, 86U },
  { SPU::R87, 87U },
  { SPU::R88, 88U },
  { SPU::R89, 89U },
  { SPU::R90, 90U },
  { SPU::R91, 91U },
  { SPU::R92, 92U },
  { SPU::R93, 93U },
  { SPU::R94, 94U },
  { SPU::R95, 95U },
  { SPU::R96, 96U },
  { SPU::R97, 97U },
  { SPU::R98, 98U },
  { SPU::R99, 99U },
  { SPU::R100, 100U },
  { SPU::R101, 101U },
  { SPU::R102, 102U },
  { SPU::R103, 103U },
  { SPU::R104, 104U },
  { SPU::R105, 105U },
  { SPU::R106, 106U },
  { SPU::R107, 107U },
  { SPU::R108, 108U },
  { SPU::R109, 109U },
  { SPU::R110, 110U },
  { SPU::R111, 111U },
  { SPU::R112, 112U },
  { SPU::R113, 113U },
  { SPU::R114, 114U },
  { SPU::R115, 115U },
  { SPU::R116, 116U },
  { SPU::R117, 117U },
  { SPU::R118, 118U },
  { SPU::R119, 119U },
  { SPU::R120, 120U },
  { SPU::R121, 121U },
  { SPU::R122, 122U },
  { SPU::R123, 123U },
  { SPU::R124, 124U },
  { SPU::R125, 125U },
  { SPU::R126, 126U },
  { SPU::R127, 127U },
};
extern const unsigned SPUEHFlavour0L2DwarfSize = sizeof(SPUEHFlavour0L2Dwarf)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const uint16_t SPURegEncodingTable[] = {
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
};
static inline void InitSPUMCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0) {
  RI->InitMCRegisterInfo(SPURegDesc, 129, RA, SPUMCRegisterClasses, 8, SPURegUnitRoots, 128, SPURegDiffLists, SPURegStrings, SPUSubRegIdxLists, 1,
  SPURegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(SPUDwarfFlavour0Dwarf2L, SPUDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(SPUEHFlavour0Dwarf2L, SPUEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(SPUDwarfFlavour0L2Dwarf, SPUDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(SPUEHFlavour0L2Dwarf, SPUEHFlavour0L2DwarfSize, true);
    break;
  }
}

} // End llvm namespace 
#endif // GET_REGINFO_MC_DESC

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Register Information Header Fragment                                       *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER
#include "llvm/Target/TargetRegisterInfo.h"

namespace llvm {

struct SPUGenRegisterInfo : public TargetRegisterInfo {
  explicit SPUGenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0);
  virtual bool needsStackRealignment(const MachineFunction &) const
     { return false; }
  virtual const RegClassWeight &getRegClassWeight(const TargetRegisterClass *RC) const;
  virtual unsigned getNumRegPressureSets() const;
  virtual const char *getRegPressureSetName(unsigned Idx) const;
  virtual unsigned getRegPressureSetLimit(unsigned Idx) const;
  virtual const int *getRegClassPressureSets(const TargetRegisterClass *RC) const;
};

namespace SPU { // Register classes
  extern const TargetRegisterClass R8CRegClass;
  extern const TargetRegisterClass R16CRegClass;
  extern const TargetRegisterClass R32CRegClass;
  extern const TargetRegisterClass R32FPRegClass;
  extern const TargetRegisterClass R64CRegClass;
  extern const TargetRegisterClass R64FPRegClass;
  extern const TargetRegisterClass GPRCRegClass;
  extern const TargetRegisterClass VECREGRegClass;
} // end of namespace SPU

} // End llvm namespace 
#endif // GET_REGINFO_HEADER

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Target Register and Register Classes Information                           *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC
namespace llvm {

extern const MCRegisterClass SPUMCRegisterClasses[];

static const MVT::SimpleValueType VTLists[] = {
  /* 0 */ MVT::i8, MVT::Other,
  /* 2 */ MVT::i16, MVT::Other,
  /* 4 */ MVT::i32, MVT::Other,
  /* 6 */ MVT::i64, MVT::Other,
  /* 8 */ MVT::i128, MVT::Other,
  /* 10 */ MVT::f32, MVT::Other,
  /* 12 */ MVT::f64, MVT::Other,
  /* 14 */ MVT::v16i8, MVT::v8i16, MVT::v4i32, MVT::v4f32, MVT::v2i64, MVT::v2f64, MVT::Other,
};

static const char *const SubRegIndexNameTable[] = { "" };


static const unsigned SubRegIndexLaneMaskTable[] = {
  ~0u,
 };



static const TargetRegisterClass *const NullRegClasses[] = { NULL };

static const uint32_t R8CSubClassMask[] = {
  0x000000ff, 
};

static const uint32_t R16CSubClassMask[] = {
  0x000000fe, 
};

static const uint32_t R32CSubClassMask[] = {
  0x000000fc, 
};

static const uint32_t R32FPSubClassMask[] = {
  0x000000fc, 
};

static const uint32_t R64CSubClassMask[] = {
  0x000000f0, 
};

static const uint32_t R64FPSubClassMask[] = {
  0x000000f0, 
};

static const uint32_t GPRCSubClassMask[] = {
  0x000000c0, 
};

static const uint32_t VECREGSubClassMask[] = {
  0x000000c0, 
};

static const uint16_t SuperRegIdxSeqs[] = {
  /* 0 */ 0,
};

static const TargetRegisterClass *const R16CSuperclasses[] = {
  &SPU::R8CRegClass,
  NULL
};

static const TargetRegisterClass *const R32CSuperclasses[] = {
  &SPU::R8CRegClass,
  &SPU::R16CRegClass,
  &SPU::R32FPRegClass,
  NULL
};

static const TargetRegisterClass *const R32FPSuperclasses[] = {
  &SPU::R8CRegClass,
  &SPU::R16CRegClass,
  &SPU::R32CRegClass,
  NULL
};

static const TargetRegisterClass *const R64CSuperclasses[] = {
  &SPU::R8CRegClass,
  &SPU::R16CRegClass,
  &SPU::R32CRegClass,
  &SPU::R32FPRegClass,
  &SPU::R64FPRegClass,
  NULL
};

static const TargetRegisterClass *const R64FPSuperclasses[] = {
  &SPU::R8CRegClass,
  &SPU::R16CRegClass,
  &SPU::R32CRegClass,
  &SPU::R32FPRegClass,
  &SPU::R64CRegClass,
  NULL
};

static const TargetRegisterClass *const GPRCSuperclasses[] = {
  &SPU::R8CRegClass,
  &SPU::R16CRegClass,
  &SPU::R32CRegClass,
  &SPU::R32FPRegClass,
  &SPU::R64CRegClass,
  &SPU::R64FPRegClass,
  &SPU::VECREGRegClass,
  NULL
};

static const TargetRegisterClass *const VECREGSuperclasses[] = {
  &SPU::R8CRegClass,
  &SPU::R16CRegClass,
  &SPU::R32CRegClass,
  &SPU::R32FPRegClass,
  &SPU::R64CRegClass,
  &SPU::R64FPRegClass,
  &SPU::GPRCRegClass,
  NULL
};

namespace SPU {   // Register class instances
  extern const TargetRegisterClass R8CRegClass = {
    &SPUMCRegisterClasses[R8CRegClassID],
    VTLists + 0,
    R8CSubClassMask,
    SuperRegIdxSeqs + 0,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass R16CRegClass = {
    &SPUMCRegisterClasses[R16CRegClassID],
    VTLists + 2,
    R16CSubClassMask,
    SuperRegIdxSeqs + 0,
    R16CSuperclasses,
    0
  };

  extern const TargetRegisterClass R32CRegClass = {
    &SPUMCRegisterClasses[R32CRegClassID],
    VTLists + 4,
    R32CSubClassMask,
    SuperRegIdxSeqs + 0,
    R32CSuperclasses,
    0
  };

  extern const TargetRegisterClass R32FPRegClass = {
    &SPUMCRegisterClasses[R32FPRegClassID],
    VTLists + 10,
    R32FPSubClassMask,
    SuperRegIdxSeqs + 0,
    R32FPSuperclasses,
    0
  };

  extern const TargetRegisterClass R64CRegClass = {
    &SPUMCRegisterClasses[R64CRegClassID],
    VTLists + 6,
    R64CSubClassMask,
    SuperRegIdxSeqs + 0,
    R64CSuperclasses,
    0
  };

  extern const TargetRegisterClass R64FPRegClass = {
    &SPUMCRegisterClasses[R64FPRegClassID],
    VTLists + 12,
    R64FPSubClassMask,
    SuperRegIdxSeqs + 0,
    R64FPSuperclasses,
    0
  };

  extern const TargetRegisterClass GPRCRegClass = {
    &SPUMCRegisterClasses[GPRCRegClassID],
    VTLists + 8,
    GPRCSubClassMask,
    SuperRegIdxSeqs + 0,
    GPRCSuperclasses,
    0
  };

  extern const TargetRegisterClass VECREGRegClass = {
    &SPUMCRegisterClasses[VECREGRegClassID],
    VTLists + 14,
    VECREGSubClassMask,
    SuperRegIdxSeqs + 0,
    VECREGSuperclasses,
    0
  };

}

namespace {
  const TargetRegisterClass* const RegisterClasses[] = {
    &SPU::R8CRegClass,
    &SPU::R16CRegClass,
    &SPU::R32CRegClass,
    &SPU::R32FPRegClass,
    &SPU::R64CRegClass,
    &SPU::R64FPRegClass,
    &SPU::GPRCRegClass,
    &SPU::VECREGRegClass,
  };
}

static const TargetRegisterInfoDesc SPURegInfoDesc[] = { // Extra Descriptors
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
};
/// Get the weight in units of pressure for this register class.
const RegClassWeight &SPUGenRegisterInfo::
getRegClassWeight(const TargetRegisterClass *RC) const {
  static const RegClassWeight RCWeightTable[] = {
    {1, 128},  	// R8C
    {1, 128},  	// R16C
    {1, 128},  	// R32C
    {1, 128},  	// R32FP
    {1, 128},  	// R64C
    {1, 128},  	// R64FP
    {1, 128},  	// GPRC
    {1, 128},  	// VECREG
    {0, 0} };
  return RCWeightTable[RC->getID()];
}


// Get the number of dimensions of register pressure.
unsigned SPUGenRegisterInfo::getNumRegPressureSets() const {
  return 1;
}

// Get the name of this register unit pressure set.
const char *SPUGenRegisterInfo::
getRegPressureSetName(unsigned Idx) const {
  static const char *PressureNameTable[] = {
    "R8C",
    0 };
  return PressureNameTable[Idx];
}

// Get the register unit pressure limit for this dimension.
// This limit must be adjusted dynamically for reserved registers.
unsigned SPUGenRegisterInfo::
getRegPressureSetLimit(unsigned Idx) const {
  static const unsigned PressureLimitTable[] = {
    128,  	// 0: R8C
    0 };
  return PressureLimitTable[Idx];
}

/// Get the dimensions of register pressure impacted by this register class.
/// Returns a -1 terminated array of pressure set IDs
const int* SPUGenRegisterInfo::
getRegClassPressureSets(const TargetRegisterClass *RC) const {
  static const int RCSetsTable[] = {
    0,  -1,  	// R8C
    0,  -1,  	// R16C
    0,  -1,  	// R32C
    0,  -1,  	// R32FP
    0,  -1,  	// R64C
    0,  -1,  	// R64FP
    0,  -1,  	// GPRC
    0,  -1,  	// VECREG
    -1 };
  static const unsigned RCSetStartTable[] = {
    0,2,4,6,8,10,12,14,0 };
  unsigned SetListStart = RCSetStartTable[RC->getID()];
  return &RCSetsTable[SetListStart];
}

extern const MCRegisterDesc SPURegDesc[];
extern const uint16_t SPURegDiffLists[];
extern const char SPURegStrings[];
extern const uint16_t SPURegUnitRoots[][2];
extern const uint16_t SPUSubRegIdxLists[];
extern const uint16_t SPURegEncodingTable[];
// SPU Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair SPUDwarfFlavour0Dwarf2L[];
extern const unsigned SPUDwarfFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair SPUEHFlavour0Dwarf2L[];
extern const unsigned SPUEHFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair SPUDwarfFlavour0L2Dwarf[];
extern const unsigned SPUDwarfFlavour0L2DwarfSize;

extern const MCRegisterInfo::DwarfLLVMRegPair SPUEHFlavour0L2Dwarf[];
extern const unsigned SPUEHFlavour0L2DwarfSize;

SPUGenRegisterInfo::
SPUGenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour)
  : TargetRegisterInfo(SPURegInfoDesc, RegisterClasses, RegisterClasses+8,
             SubRegIndexNameTable, SubRegIndexLaneMaskTable) {
  InitMCRegisterInfo(SPURegDesc, 129, RA,
                     SPUMCRegisterClasses, 8,
                     SPURegUnitRoots,
                     128,
                     SPURegDiffLists,
                     SPURegStrings,
                     SPUSubRegIdxLists,
                     1,
                     SPURegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(SPUDwarfFlavour0Dwarf2L, SPUDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(SPUEHFlavour0Dwarf2L, SPUEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(SPUDwarfFlavour0L2Dwarf, SPUDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(SPUEHFlavour0L2Dwarf, SPUEHFlavour0L2DwarfSize, true);
    break;
  }
}



} // End llvm namespace 
#endif // GET_REGINFO_TARGET_DESC

