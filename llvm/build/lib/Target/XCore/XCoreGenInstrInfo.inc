/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Target Instruction Enum Values                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_ENUM
#undef GET_INSTRINFO_ENUM
namespace llvm {

namespace XCore {
  enum {
    PHI	= 0,
    INLINEASM	= 1,
    PROLOG_LABEL	= 2,
    EH_LABEL	= 3,
    GC_LABEL	= 4,
    KILL	= 5,
    EXTRACT_SUBREG	= 6,
    INSERT_SUBREG	= 7,
    IMPLICIT_DEF	= 8,
    SUBREG_TO_REG	= 9,
    COPY_TO_REGCLASS	= 10,
    DBG_VALUE	= 11,
    REG_SEQUENCE	= 12,
    COPY	= 13,
    BUNDLE	= 14,
    LIFETIME_START	= 15,
    LIFETIME_END	= 16,
    ADD_2rus	= 17,
    ADD_3r	= 18,
    ADJCALLSTACKDOWN	= 19,
    ADJCALLSTACKUP	= 20,
    ANDNOT_2r	= 21,
    AND_3r	= 22,
    ASHR_l2rus	= 23,
    ASHR_l3r	= 24,
    BAU_1r	= 25,
    BITREV_l2r	= 26,
    BLA_1r	= 27,
    BL_lu10	= 28,
    BL_u10	= 29,
    BRBF_lru6	= 30,
    BRBF_ru6	= 31,
    BRBT_lru6	= 32,
    BRBT_ru6	= 33,
    BRBU_lu6	= 34,
    BRBU_u6	= 35,
    BRFF_lru6	= 36,
    BRFF_ru6	= 37,
    BRFT_lru6	= 38,
    BRFT_ru6	= 39,
    BRFU_lu6	= 40,
    BRFU_u6	= 41,
    BR_JT	= 42,
    BR_JT32	= 43,
    BYTEREV_l2r	= 44,
    CHKCT_2r	= 45,
    CHKCT_rus	= 46,
    CLRE_0R	= 47,
    CLRSR_branch_lu6	= 48,
    CLRSR_branch_u6	= 49,
    CLRSR_lu6	= 50,
    CLRSR_u6	= 51,
    CLZ_l2r	= 52,
    CRC8_l4r	= 53,
    CRC_l3r	= 54,
    DIVS_l3r	= 55,
    DIVU_l3r	= 56,
    ECALLF_1r	= 57,
    ECALLT_1r	= 58,
    EEU_1r	= 59,
    ENDIN_l2r	= 60,
    ENTSP_lu6	= 61,
    ENTSP_u6	= 62,
    EQ_2rus	= 63,
    EQ_3r	= 64,
    EXTSP_lu6	= 65,
    EXTSP_u6	= 66,
    FREER_1r	= 67,
    GETED_0R	= 68,
    GETET_0R	= 69,
    GETID_0R	= 70,
    GETPS_l2r	= 71,
    GETR_rus	= 72,
    GETST_2r	= 73,
    GETTS_2r	= 74,
    INCT_2r	= 75,
    INITCP_2r	= 76,
    INITDP_2r	= 77,
    INITLR_l2r	= 78,
    INITPC_2r	= 79,
    INITSP_2r	= 80,
    INSHR_2r	= 81,
    INT_2r	= 82,
    IN_2r	= 83,
    LADD_l5r	= 84,
    LD16S_3r	= 85,
    LD8U_3r	= 86,
    LDA16B_l3r	= 87,
    LDA16F_l3r	= 88,
    LDAP_lu10	= 89,
    LDAP_lu10_ba	= 90,
    LDAP_u10	= 91,
    LDAWB_l2rus	= 92,
    LDAWB_l3r	= 93,
    LDAWCP_lu6	= 94,
    LDAWCP_u6	= 95,
    LDAWDP_lru6	= 96,
    LDAWDP_ru6	= 97,
    LDAWFI	= 98,
    LDAWF_l2rus	= 99,
    LDAWF_l3r	= 100,
    LDAWSP_lru6	= 101,
    LDAWSP_lru6_RRegs	= 102,
    LDAWSP_ru6	= 103,
    LDAWSP_ru6_RRegs	= 104,
    LDC_lru6	= 105,
    LDC_ru6	= 106,
    LDIV_l5r	= 107,
    LDWCP_lru6	= 108,
    LDWCP_ru6	= 109,
    LDWDP_lru6	= 110,
    LDWDP_ru6	= 111,
    LDWFI	= 112,
    LDWSP_lru6	= 113,
    LDWSP_ru6	= 114,
    LDW_2rus	= 115,
    LDW_3r	= 116,
    LMUL_l6r	= 117,
    LSS_3r	= 118,
    LSUB_l5r	= 119,
    LSU_3r	= 120,
    MACCS_l4r	= 121,
    MACCU_l4r	= 122,
    MJOIN_1r	= 123,
    MKMSK_2r	= 124,
    MKMSK_rus	= 125,
    MSYNC_1r	= 126,
    MUL_l3r	= 127,
    NEG	= 128,
    NOT	= 129,
    OR_3r	= 130,
    OUTCT_2r	= 131,
    OUTCT_rus	= 132,
    OUTSHR_2r	= 133,
    OUTT_2r	= 134,
    OUT_2r	= 135,
    PEEK_l2r	= 136,
    REMS_l3r	= 137,
    REMU_l3r	= 138,
    RETSP_lu6	= 139,
    RETSP_u6	= 140,
    SELECT_CC	= 141,
    SETCLK_l2r	= 142,
    SETC_l2r	= 143,
    SETC_lru6	= 144,
    SETC_ru6	= 145,
    SETD_2r	= 146,
    SETEV_1r	= 147,
    SETPSC_l2r	= 148,
    SETPS_l2r	= 149,
    SETPT_2r	= 150,
    SETRDY_l2r	= 151,
    SETSP_1r	= 152,
    SETSR_branch_lu6	= 153,
    SETSR_branch_u6	= 154,
    SETSR_lu6	= 155,
    SETSR_u6	= 156,
    SETTW_l2r	= 157,
    SETV_1r	= 158,
    SEXT_2r	= 159,
    SEXT_rus	= 160,
    SHL_2rus	= 161,
    SHL_3r	= 162,
    SHR_2rus	= 163,
    SHR_3r	= 164,
    SSYNC_0r	= 165,
    ST16_l3r	= 166,
    ST8_l3r	= 167,
    STWDP_lru6	= 168,
    STWDP_ru6	= 169,
    STWFI	= 170,
    STWSP_lru6	= 171,
    STWSP_ru6	= 172,
    STW_2rus	= 173,
    STW_3r	= 174,
    SUB_2rus	= 175,
    SUB_3r	= 176,
    SYNCR_1r	= 177,
    TESTCT_2r	= 178,
    TESTWCT_2r	= 179,
    WAITEU_0R	= 180,
    XOR_l3r	= 181,
    ZEXT_2r	= 182,
    ZEXT_rus	= 183,
    INSTRUCTION_LIST_END = 184
  };
}
} // End llvm namespace 
#endif // GET_INSTRINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Target Instruction Descriptors                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_MC_DESC
#undef GET_INSTRINFO_MC_DESC
namespace llvm {

static const uint16_t ImplicitList1[] = { XCore::SP, 0 };
static const uint16_t ImplicitList2[] = { XCore::R0, XCore::R1, XCore::R2, XCore::R3, XCore::R11, XCore::LR, 0 };
static const uint16_t ImplicitList3[] = { XCore::R11, 0 };

static const MCOperandInfo OperandInfo2[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo3[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo4[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo5[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo6[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo7[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo8[] = { { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo9[] = { { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo10[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo11[] = { { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo12[] = { { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo13[] = { { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo14[] = { { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo15[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo16[] = { { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo17[] = { { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo18[] = { { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo19[] = { { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo20[] = { { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo21[] = { { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo22[] = { { XCore::RRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo23[] = { { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo24[] = { { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo25[] = { { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo26[] = { { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { XCore::GRRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };

extern const MCInstrDesc XCoreInsts[] = {
  { 0,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #0 = PHI
  { 1,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, NULL, NULL, 0 },  // Inst #1 = INLINEASM
  { 2,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #2 = PROLOG_LABEL
  { 3,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #3 = EH_LABEL
  { 4,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #4 = GC_LABEL
  { 5,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, NULL, NULL, 0 },  // Inst #5 = KILL
  { 6,	3,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo3 },  // Inst #6 = EXTRACT_SUBREG
  { 7,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo4 },  // Inst #7 = INSERT_SUBREG
  { 8,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo5 },  // Inst #8 = IMPLICIT_DEF
  { 9,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo6 },  // Inst #9 = SUBREG_TO_REG
  { 10,	3,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo3 },  // Inst #10 = COPY_TO_REGCLASS
  { 11,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, NULL, NULL, 0 },  // Inst #11 = DBG_VALUE
  { 12,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo5 },  // Inst #12 = REG_SEQUENCE
  { 13,	2,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo7 },  // Inst #13 = COPY
  { 14,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #14 = BUNDLE
  { 15,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #15 = LIFETIME_START
  { 16,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #16 = LIFETIME_END
  { 17,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #17 = ADD_2rus
  { 18,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #18 = ADD_3r
  { 19,	1,	0,	0,	0,	0, 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo2 },  // Inst #19 = ADJCALLSTACKDOWN
  { 20,	2,	0,	0,	0,	0, 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo10 },  // Inst #20 = ADJCALLSTACKUP
  { 21,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo11 },  // Inst #21 = ANDNOT_2r
  { 22,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #22 = AND_3r
  { 23,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #23 = ASHR_l2rus
  { 24,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #24 = ASHR_l3r
  { 25,	1,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo12 },  // Inst #25 = BAU_1r
  { 26,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #26 = BITREV_l2r
  { 27,	1,	0,	0,	0,	0|(1<<MCID::Call), 0x0ULL, ImplicitList1, ImplicitList2, OperandInfo12 },  // Inst #27 = BLA_1r
  { 28,	1,	0,	0,	0,	0|(1<<MCID::Call), 0x0ULL, ImplicitList1, ImplicitList2, OperandInfo5 },  // Inst #28 = BL_lu10
  { 29,	1,	0,	0,	0,	0|(1<<MCID::Call), 0x0ULL, ImplicitList1, ImplicitList2, OperandInfo5 },  // Inst #29 = BL_u10
  { 30,	2,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo14 },  // Inst #30 = BRBF_lru6
  { 31,	2,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo14 },  // Inst #31 = BRBF_ru6
  { 32,	2,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo14 },  // Inst #32 = BRBT_lru6
  { 33,	2,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo14 },  // Inst #33 = BRBT_ru6
  { 34,	1,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo5 },  // Inst #34 = BRBU_lu6
  { 35,	1,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo5 },  // Inst #35 = BRBU_u6
  { 36,	2,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo14 },  // Inst #36 = BRFF_lru6
  { 37,	2,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo14 },  // Inst #37 = BRFF_ru6
  { 38,	2,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo14 },  // Inst #38 = BRFT_lru6
  { 39,	2,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo14 },  // Inst #39 = BRFT_ru6
  { 40,	1,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo5 },  // Inst #40 = BRFU_lu6
  { 41,	1,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo5 },  // Inst #41 = BRFU_u6
  { 42,	2,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo15 },  // Inst #42 = BR_JT
  { 43,	2,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo15 },  // Inst #43 = BR_JT32
  { 44,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #44 = BYTEREV_l2r
  { 45,	2,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #45 = CHKCT_2r
  { 46,	2,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo16 },  // Inst #46 = CHKCT_rus
  { 47,	0,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #47 = CLRE_0R
  { 48,	1,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #48 = CLRSR_branch_lu6
  { 49,	1,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #49 = CLRSR_branch_u6
  { 50,	1,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #50 = CLRSR_lu6
  { 51,	1,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #51 = CLRSR_u6
  { 52,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #52 = CLZ_l2r
  { 53,	5,	2,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo17 },  // Inst #53 = CRC8_l4r
  { 54,	4,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo18 },  // Inst #54 = CRC_l3r
  { 55,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #55 = DIVS_l3r
  { 56,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #56 = DIVU_l3r
  { 57,	1,	0,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo12 },  // Inst #57 = ECALLF_1r
  { 58,	1,	0,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo12 },  // Inst #58 = ECALLT_1r
  { 59,	1,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo12 },  // Inst #59 = EEU_1r
  { 60,	2,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #60 = ENDIN_l2r
  { 61,	1,	0,	0,	0,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo2 },  // Inst #61 = ENTSP_lu6
  { 62,	1,	0,	0,	0,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo2 },  // Inst #62 = ENTSP_u6
  { 63,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #63 = EQ_2rus
  { 64,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #64 = EQ_3r
  { 65,	1,	0,	0,	0,	0, 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo2 },  // Inst #65 = EXTSP_lu6
  { 66,	1,	0,	0,	0,	0, 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo2 },  // Inst #66 = EXTSP_u6
  { 67,	1,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo12 },  // Inst #67 = FREER_1r
  { 68,	0,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList3, 0 },  // Inst #68 = GETED_0R
  { 69,	0,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList3, 0 },  // Inst #69 = GETET_0R
  { 70,	0,	0,	0,	0,	0, 0x0ULL, NULL, ImplicitList3, 0 },  // Inst #70 = GETID_0R
  { 71,	2,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #71 = GETPS_l2r
  { 72,	2,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo16 },  // Inst #72 = GETR_rus
  { 73,	2,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #73 = GETST_2r
  { 74,	2,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #74 = GETTS_2r
  { 75,	2,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #75 = INCT_2r
  { 76,	2,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #76 = INITCP_2r
  { 77,	2,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #77 = INITDP_2r
  { 78,	2,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #78 = INITLR_l2r
  { 79,	2,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #79 = INITPC_2r
  { 80,	2,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #80 = INITSP_2r
  { 81,	3,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo19 },  // Inst #81 = INSHR_2r
  { 82,	2,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #82 = INT_2r
  { 83,	2,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #83 = IN_2r
  { 84,	5,	2,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo20 },  // Inst #84 = LADD_l5r
  { 85,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #85 = LD16S_3r
  { 86,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #86 = LD8U_3r
  { 87,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #87 = LDA16B_l3r
  { 88,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #88 = LDA16F_l3r
  { 89,	1,	0,	0,	0,	0|(1<<MCID::Rematerializable), 0x0ULL, NULL, ImplicitList3, OperandInfo2 },  // Inst #89 = LDAP_lu10
  { 90,	1,	0,	0,	0,	0|(1<<MCID::Rematerializable), 0x0ULL, NULL, ImplicitList3, OperandInfo2 },  // Inst #90 = LDAP_lu10_ba
  { 91,	1,	0,	0,	0,	0|(1<<MCID::Rematerializable), 0x0ULL, NULL, ImplicitList3, OperandInfo2 },  // Inst #91 = LDAP_u10
  { 92,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #92 = LDAWB_l2rus
  { 93,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #93 = LDAWB_l3r
  { 94,	2,	0,	0,	0,	0|(1<<MCID::Rematerializable), 0x0ULL, NULL, ImplicitList3, OperandInfo7 },  // Inst #94 = LDAWCP_lu6
  { 95,	2,	0,	0,	0,	0|(1<<MCID::Rematerializable), 0x0ULL, NULL, ImplicitList3, OperandInfo7 },  // Inst #95 = LDAWCP_u6
  { 96,	3,	1,	0,	0,	0|(1<<MCID::Rematerializable), 0x0ULL, NULL, NULL, OperandInfo21 },  // Inst #96 = LDAWDP_lru6
  { 97,	3,	1,	0,	0,	0|(1<<MCID::Rematerializable), 0x0ULL, NULL, NULL, OperandInfo21 },  // Inst #97 = LDAWDP_ru6
  { 98,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo21 },  // Inst #98 = LDAWFI
  { 99,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #99 = LDAWF_l2rus
  { 100,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #100 = LDAWF_l3r
  { 101,	2,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo16 },  // Inst #101 = LDAWSP_lru6
  { 102,	2,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo22 },  // Inst #102 = LDAWSP_lru6_RRegs
  { 103,	2,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo16 },  // Inst #103 = LDAWSP_ru6
  { 104,	2,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo22 },  // Inst #104 = LDAWSP_ru6_RRegs
  { 105,	2,	1,	0,	0,	0|(1<<MCID::Rematerializable), 0x0ULL, NULL, NULL, OperandInfo16 },  // Inst #105 = LDC_lru6
  { 106,	2,	1,	0,	0,	0|(1<<MCID::Rematerializable), 0x0ULL, NULL, NULL, OperandInfo16 },  // Inst #106 = LDC_ru6
  { 107,	5,	2,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo20 },  // Inst #107 = LDIV_l5r
  { 108,	2,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::Rematerializable), 0x0ULL, NULL, NULL, OperandInfo16 },  // Inst #108 = LDWCP_lru6
  { 109,	2,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::Rematerializable), 0x0ULL, NULL, NULL, OperandInfo16 },  // Inst #109 = LDWCP_ru6
  { 110,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo21 },  // Inst #110 = LDWDP_lru6
  { 111,	3,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo21 },  // Inst #111 = LDWDP_ru6
  { 112,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo21 },  // Inst #112 = LDWFI
  { 113,	2,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, NULL, OperandInfo16 },  // Inst #113 = LDWSP_lru6
  { 114,	2,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, NULL, OperandInfo16 },  // Inst #114 = LDWSP_ru6
  { 115,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #115 = LDW_2rus
  { 116,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #116 = LDW_3r
  { 117,	6,	2,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo23 },  // Inst #117 = LMUL_l6r
  { 118,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #118 = LSS_3r
  { 119,	5,	2,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo20 },  // Inst #119 = LSUB_l5r
  { 120,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #120 = LSU_3r
  { 121,	6,	2,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo24 },  // Inst #121 = MACCS_l4r
  { 122,	6,	2,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo24 },  // Inst #122 = MACCU_l4r
  { 123,	1,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo12 },  // Inst #123 = MJOIN_1r
  { 124,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #124 = MKMSK_2r
  { 125,	2,	1,	0,	0,	0|(1<<MCID::Rematerializable), 0x0ULL, NULL, NULL, OperandInfo16 },  // Inst #125 = MKMSK_rus
  { 126,	1,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo12 },  // Inst #126 = MSYNC_1r
  { 127,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #127 = MUL_l3r
  { 128,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #128 = NEG
  { 129,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #129 = NOT
  { 130,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #130 = OR_3r
  { 131,	2,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #131 = OUTCT_2r
  { 132,	2,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo16 },  // Inst #132 = OUTCT_rus
  { 133,	3,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo19 },  // Inst #133 = OUTSHR_2r
  { 134,	2,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #134 = OUTT_2r
  { 135,	2,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #135 = OUT_2r
  { 136,	2,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #136 = PEEK_l2r
  { 137,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #137 = REMS_l3r
  { 138,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #138 = REMU_l3r
  { 139,	1,	0,	0,	0,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::MayLoad)|(1<<MCID::Terminator), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo2 },  // Inst #139 = RETSP_lu6
  { 140,	1,	0,	0,	0,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::MayLoad)|(1<<MCID::Terminator), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo2 },  // Inst #140 = RETSP_u6
  { 141,	4,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, NULL, OperandInfo25 },  // Inst #141 = SELECT_CC
  { 142,	2,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #142 = SETCLK_l2r
  { 143,	2,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #143 = SETC_l2r
  { 144,	2,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo16 },  // Inst #144 = SETC_lru6
  { 145,	2,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo16 },  // Inst #145 = SETC_ru6
  { 146,	2,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #146 = SETD_2r
  { 147,	1,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList3, NULL, OperandInfo12 },  // Inst #147 = SETEV_1r
  { 148,	2,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #148 = SETPSC_l2r
  { 149,	2,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #149 = SETPS_l2r
  { 150,	2,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #150 = SETPT_2r
  { 151,	2,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #151 = SETRDY_l2r
  { 152,	1,	0,	0,	0,	0, 0x0ULL, NULL, ImplicitList1, OperandInfo12 },  // Inst #152 = SETSP_1r
  { 153,	1,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #153 = SETSR_branch_lu6
  { 154,	1,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #154 = SETSR_branch_u6
  { 155,	1,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #155 = SETSR_lu6
  { 156,	1,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2 },  // Inst #156 = SETSR_u6
  { 157,	2,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #157 = SETTW_l2r
  { 158,	1,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList3, NULL, OperandInfo12 },  // Inst #158 = SETV_1r
  { 159,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo11 },  // Inst #159 = SEXT_2r
  { 160,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo26 },  // Inst #160 = SEXT_rus
  { 161,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #161 = SHL_2rus
  { 162,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #162 = SHL_3r
  { 163,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #163 = SHR_2rus
  { 164,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #164 = SHR_3r
  { 165,	0,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #165 = SSYNC_0r
  { 166,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #166 = ST16_l3r
  { 167,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #167 = ST8_l3r
  { 168,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo21 },  // Inst #168 = STWDP_lru6
  { 169,	3,	0,	0,	0,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo21 },  // Inst #169 = STWDP_ru6
  { 170,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo21 },  // Inst #170 = STWFI
  { 171,	2,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, ImplicitList1, NULL, OperandInfo16 },  // Inst #171 = STWSP_lru6
  { 172,	2,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, ImplicitList1, NULL, OperandInfo16 },  // Inst #172 = STWSP_ru6
  { 173,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #173 = STW_2rus
  { 174,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #174 = STW_3r
  { 175,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo8 },  // Inst #175 = SUB_2rus
  { 176,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #176 = SUB_3r
  { 177,	1,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo12 },  // Inst #177 = SYNCR_1r
  { 178,	2,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #178 = TESTCT_2r
  { 179,	2,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo13 },  // Inst #179 = TESTWCT_2r
  { 180,	0,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::MayLoad)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0 },  // Inst #180 = WAITEU_0R
  { 181,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo9 },  // Inst #181 = XOR_l3r
  { 182,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo11 },  // Inst #182 = ZEXT_2r
  { 183,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo26 },  // Inst #183 = ZEXT_rus
};

extern const char XCoreInstrNameData[] = {
  /* 0 */ 'B', 'L', '_', 'u', '1', '0', 0,
  /* 7 */ 'L', 'D', 'A', 'P', '_', 'u', '1', '0', 0,
  /* 16 */ 'B', 'L', '_', 'l', 'u', '1', '0', 0,
  /* 24 */ 'L', 'D', 'A', 'P', '_', 'l', 'u', '1', '0', 0,
  /* 34 */ 'B', 'R', '_', 'J', 'T', '3', '2', 0,
  /* 42 */ 'L', 'D', 'A', 'W', 'C', 'P', '_', 'u', '6', 0,
  /* 52 */ 'R', 'E', 'T', 'S', 'P', '_', 'u', '6', 0,
  /* 61 */ 'E', 'N', 'T', 'S', 'P', '_', 'u', '6', 0,
  /* 70 */ 'E', 'X', 'T', 'S', 'P', '_', 'u', '6', 0,
  /* 79 */ 'C', 'L', 'R', 'S', 'R', '_', 'u', '6', 0,
  /* 88 */ 'S', 'E', 'T', 'S', 'R', '_', 'u', '6', 0,
  /* 97 */ 'B', 'R', 'B', 'U', '_', 'u', '6', 0,
  /* 105 */ 'B', 'R', 'F', 'U', '_', 'u', '6', 0,
  /* 113 */ 'C', 'L', 'R', 'S', 'R', '_', 'b', 'r', 'a', 'n', 'c', 'h', '_', 'u', '6', 0,
  /* 129 */ 'S', 'E', 'T', 'S', 'R', '_', 'b', 'r', 'a', 'n', 'c', 'h', '_', 'u', '6', 0,
  /* 145 */ 'L', 'D', 'A', 'W', 'C', 'P', '_', 'l', 'u', '6', 0,
  /* 156 */ 'R', 'E', 'T', 'S', 'P', '_', 'l', 'u', '6', 0,
  /* 166 */ 'E', 'N', 'T', 'S', 'P', '_', 'l', 'u', '6', 0,
  /* 176 */ 'E', 'X', 'T', 'S', 'P', '_', 'l', 'u', '6', 0,
  /* 186 */ 'C', 'L', 'R', 'S', 'R', '_', 'l', 'u', '6', 0,
  /* 196 */ 'S', 'E', 'T', 'S', 'R', '_', 'l', 'u', '6', 0,
  /* 206 */ 'B', 'R', 'B', 'U', '_', 'l', 'u', '6', 0,
  /* 215 */ 'B', 'R', 'F', 'U', '_', 'l', 'u', '6', 0,
  /* 224 */ 'C', 'L', 'R', 'S', 'R', '_', 'b', 'r', 'a', 'n', 'c', 'h', '_', 'l', 'u', '6', 0,
  /* 241 */ 'S', 'E', 'T', 'S', 'R', '_', 'b', 'r', 'a', 'n', 'c', 'h', '_', 'l', 'u', '6', 0,
  /* 258 */ 'L', 'D', 'C', '_', 'r', 'u', '6', 0,
  /* 266 */ 'S', 'E', 'T', 'C', '_', 'r', 'u', '6', 0,
  /* 275 */ 'B', 'R', 'B', 'F', '_', 'r', 'u', '6', 0,
  /* 284 */ 'B', 'R', 'F', 'F', '_', 'r', 'u', '6', 0,
  /* 293 */ 'L', 'D', 'W', 'C', 'P', '_', 'r', 'u', '6', 0,
  /* 303 */ 'L', 'D', 'A', 'W', 'D', 'P', '_', 'r', 'u', '6', 0,
  /* 314 */ 'L', 'D', 'W', 'D', 'P', '_', 'r', 'u', '6', 0,
  /* 324 */ 'S', 'T', 'W', 'D', 'P', '_', 'r', 'u', '6', 0,
  /* 334 */ 'L', 'D', 'A', 'W', 'S', 'P', '_', 'r', 'u', '6', 0,
  /* 345 */ 'L', 'D', 'W', 'S', 'P', '_', 'r', 'u', '6', 0,
  /* 355 */ 'S', 'T', 'W', 'S', 'P', '_', 'r', 'u', '6', 0,
  /* 365 */ 'B', 'R', 'B', 'T', '_', 'r', 'u', '6', 0,
  /* 374 */ 'B', 'R', 'F', 'T', '_', 'r', 'u', '6', 0,
  /* 383 */ 'L', 'D', 'C', '_', 'l', 'r', 'u', '6', 0,
  /* 392 */ 'S', 'E', 'T', 'C', '_', 'l', 'r', 'u', '6', 0,
  /* 402 */ 'B', 'R', 'B', 'F', '_', 'l', 'r', 'u', '6', 0,
  /* 412 */ 'B', 'R', 'F', 'F', '_', 'l', 'r', 'u', '6', 0,
  /* 422 */ 'L', 'D', 'W', 'C', 'P', '_', 'l', 'r', 'u', '6', 0,
  /* 433 */ 'L', 'D', 'A', 'W', 'D', 'P', '_', 'l', 'r', 'u', '6', 0,
  /* 445 */ 'L', 'D', 'W', 'D', 'P', '_', 'l', 'r', 'u', '6', 0,
  /* 456 */ 'S', 'T', 'W', 'D', 'P', '_', 'l', 'r', 'u', '6', 0,
  /* 467 */ 'L', 'D', 'A', 'W', 'S', 'P', '_', 'l', 'r', 'u', '6', 0,
  /* 479 */ 'L', 'D', 'W', 'S', 'P', '_', 'l', 'r', 'u', '6', 0,
  /* 490 */ 'S', 'T', 'W', 'S', 'P', '_', 'l', 'r', 'u', '6', 0,
  /* 501 */ 'B', 'R', 'B', 'T', '_', 'l', 'r', 'u', '6', 0,
  /* 511 */ 'B', 'R', 'F', 'T', '_', 'l', 'r', 'u', '6', 0,
  /* 521 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', 0,
  /* 531 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 544 */ 'R', 'E', 'G', '_', 'S', 'E', 'Q', 'U', 'E', 'N', 'C', 'E', 0,
  /* 557 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 564 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 574 */ 'I', 'M', 'P', 'L', 'I', 'C', 'I', 'T', '_', 'D', 'E', 'F', 0,
  /* 587 */ 'N', 'E', 'G', 0,
  /* 591 */ 'E', 'X', 'T', 'R', 'A', 'C', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 606 */ 'I', 'N', 'S', 'E', 'R', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 620 */ 'S', 'U', 'B', 'R', 'E', 'G', '_', 'T', 'O', '_', 'R', 'E', 'G', 0,
  /* 634 */ 'L', 'D', 'A', 'W', 'F', 'I', 0,
  /* 641 */ 'L', 'D', 'W', 'F', 'I', 0,
  /* 647 */ 'S', 'T', 'W', 'F', 'I', 0,
  /* 653 */ 'P', 'H', 'I', 0,
  /* 657 */ 'G', 'C', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 666 */ 'P', 'R', 'O', 'L', 'O', 'G', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 679 */ 'E', 'H', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 688 */ 'K', 'I', 'L', 'L', 0,
  /* 693 */ 'I', 'N', 'L', 'I', 'N', 'E', 'A', 'S', 'M', 0,
  /* 703 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 0,
  /* 720 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 0,
  /* 735 */ 'G', 'E', 'T', 'E', 'D', '_', '0', 'R', 0,
  /* 744 */ 'G', 'E', 'T', 'I', 'D', '_', '0', 'R', 0,
  /* 753 */ 'C', 'L', 'R', 'E', '_', '0', 'R', 0,
  /* 761 */ 'G', 'E', 'T', 'E', 'T', '_', '0', 'R', 0,
  /* 770 */ 'W', 'A', 'I', 'T', 'E', 'U', '_', '0', 'R', 0,
  /* 780 */ 'C', 'O', 'P', 'Y', '_', 'T', 'O', '_', 'R', 'E', 'G', 'C', 'L', 'A', 'S', 'S', 0,
  /* 797 */ 'B', 'R', '_', 'J', 'T', 0,
  /* 803 */ 'N', 'O', 'T', 0,
  /* 807 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 822 */ 'C', 'O', 'P', 'Y', 0,
  /* 827 */ 'L', 'D', 'A', 'P', '_', 'l', 'u', '1', '0', '_', 'b', 'a', 0,
  /* 840 */ 'S', 'S', 'Y', 'N', 'C', '_', '0', 'r', 0,
  /* 849 */ 'B', 'L', 'A', '_', '1', 'r', 0,
  /* 856 */ 'M', 'S', 'Y', 'N', 'C', '_', '1', 'r', 0,
  /* 865 */ 'E', 'C', 'A', 'L', 'L', 'F', '_', '1', 'r', 0,
  /* 875 */ 'M', 'J', 'O', 'I', 'N', '_', '1', 'r', 0,
  /* 884 */ 'S', 'E', 'T', 'S', 'P', '_', '1', 'r', 0,
  /* 893 */ 'S', 'Y', 'N', 'C', 'R', '_', '1', 'r', 0,
  /* 902 */ 'F', 'R', 'E', 'E', 'R', '_', '1', 'r', 0,
  /* 911 */ 'E', 'C', 'A', 'L', 'L', 'T', '_', '1', 'r', 0,
  /* 921 */ 'B', 'A', 'U', '_', '1', 'r', 0,
  /* 928 */ 'E', 'E', 'U', '_', '1', 'r', 0,
  /* 935 */ 'S', 'E', 'T', 'E', 'V', '_', '1', 'r', 0,
  /* 944 */ 'S', 'E', 'T', 'V', '_', '1', 'r', 0,
  /* 952 */ 'I', 'N', 'I', 'T', 'P', 'C', '_', '2', 'r', 0,
  /* 962 */ 'S', 'E', 'T', 'D', '_', '2', 'r', 0,
  /* 970 */ 'M', 'K', 'M', 'S', 'K', '_', '2', 'r', 0,
  /* 979 */ 'I', 'N', '_', '2', 'r', 0,
  /* 985 */ 'I', 'N', 'I', 'T', 'C', 'P', '_', '2', 'r', 0,
  /* 995 */ 'I', 'N', 'I', 'T', 'D', 'P', '_', '2', 'r', 0,
  /* 1005 */ 'I', 'N', 'I', 'T', 'S', 'P', '_', '2', 'r', 0,
  /* 1015 */ 'I', 'N', 'S', 'H', 'R', '_', '2', 'r', 0,
  /* 1024 */ 'O', 'U', 'T', 'S', 'H', 'R', '_', '2', 'r', 0,
  /* 1034 */ 'G', 'E', 'T', 'T', 'S', '_', '2', 'r', 0,
  /* 1043 */ 'C', 'H', 'K', 'C', 'T', '_', '2', 'r', 0,
  /* 1052 */ 'I', 'N', 'C', 'T', '_', '2', 'r', 0,
  /* 1060 */ 'T', 'E', 'S', 'T', 'C', 'T', '_', '2', 'r', 0,
  /* 1070 */ 'O', 'U', 'T', 'C', 'T', '_', '2', 'r', 0,
  /* 1079 */ 'T', 'E', 'S', 'T', 'W', 'C', 'T', '_', '2', 'r', 0,
  /* 1090 */ 'I', 'N', 'T', '_', '2', 'r', 0,
  /* 1097 */ 'A', 'N', 'D', 'N', 'O', 'T', '_', '2', 'r', 0,
  /* 1107 */ 'S', 'E', 'T', 'P', 'T', '_', '2', 'r', 0,
  /* 1116 */ 'G', 'E', 'T', 'S', 'T', '_', '2', 'r', 0,
  /* 1125 */ 'O', 'U', 'T', 'T', '_', '2', 'r', 0,
  /* 1133 */ 'O', 'U', 'T', '_', '2', 'r', 0,
  /* 1140 */ 'S', 'E', 'X', 'T', '_', '2', 'r', 0,
  /* 1148 */ 'Z', 'E', 'X', 'T', '_', '2', 'r', 0,
  /* 1156 */ 'S', 'E', 'T', 'P', 'S', 'C', '_', 'l', '2', 'r', 0,
  /* 1167 */ 'S', 'E', 'T', 'C', '_', 'l', '2', 'r', 0,
  /* 1176 */ 'P', 'E', 'E', 'K', '_', 'l', '2', 'r', 0,
  /* 1185 */ 'S', 'E', 'T', 'C', 'L', 'K', '_', 'l', '2', 'r', 0,
  /* 1196 */ 'E', 'N', 'D', 'I', 'N', '_', 'l', '2', 'r', 0,
  /* 1206 */ 'I', 'N', 'I', 'T', 'L', 'R', '_', 'l', '2', 'r', 0,
  /* 1217 */ 'G', 'E', 'T', 'P', 'S', '_', 'l', '2', 'r', 0,
  /* 1227 */ 'S', 'E', 'T', 'P', 'S', '_', 'l', '2', 'r', 0,
  /* 1237 */ 'B', 'Y', 'T', 'E', 'R', 'E', 'V', '_', 'l', '2', 'r', 0,
  /* 1249 */ 'B', 'I', 'T', 'R', 'E', 'V', '_', 'l', '2', 'r', 0,
  /* 1260 */ 'S', 'E', 'T', 'T', 'W', '_', 'l', '2', 'r', 0,
  /* 1270 */ 'S', 'E', 'T', 'R', 'D', 'Y', '_', 'l', '2', 'r', 0,
  /* 1281 */ 'C', 'L', 'Z', '_', 'l', '2', 'r', 0,
  /* 1289 */ 'S', 'U', 'B', '_', '3', 'r', 0,
  /* 1296 */ 'A', 'D', 'D', '_', '3', 'r', 0,
  /* 1303 */ 'A', 'N', 'D', '_', '3', 'r', 0,
  /* 1310 */ 'S', 'H', 'L', '_', '3', 'r', 0,
  /* 1317 */ 'E', 'Q', '_', '3', 'r', 0,
  /* 1323 */ 'S', 'H', 'R', '_', '3', 'r', 0,
  /* 1330 */ 'O', 'R', '_', '3', 'r', 0,
  /* 1336 */ 'L', 'D', '1', '6', 'S', '_', '3', 'r', 0,
  /* 1345 */ 'L', 'S', 'S', '_', '3', 'r', 0,
  /* 1352 */ 'L', 'D', '8', 'U', '_', '3', 'r', 0,
  /* 1360 */ 'L', 'S', 'U', '_', '3', 'r', 0,
  /* 1367 */ 'L', 'D', 'W', '_', '3', 'r', 0,
  /* 1374 */ 'S', 'T', 'W', '_', '3', 'r', 0,
  /* 1381 */ 'S', 'T', '1', '6', '_', 'l', '3', 'r', 0,
  /* 1390 */ 'S', 'T', '8', '_', 'l', '3', 'r', 0,
  /* 1398 */ 'L', 'D', 'A', '1', '6', 'B', '_', 'l', '3', 'r', 0,
  /* 1409 */ 'L', 'D', 'A', 'W', 'B', '_', 'l', '3', 'r', 0,
  /* 1419 */ 'C', 'R', 'C', '_', 'l', '3', 'r', 0,
  /* 1427 */ 'L', 'D', 'A', '1', '6', 'F', '_', 'l', '3', 'r', 0,
  /* 1438 */ 'L', 'D', 'A', 'W', 'F', '_', 'l', '3', 'r', 0,
  /* 1448 */ 'M', 'U', 'L', '_', 'l', '3', 'r', 0,
  /* 1456 */ 'A', 'S', 'H', 'R', '_', 'l', '3', 'r', 0,
  /* 1465 */ 'X', 'O', 'R', '_', 'l', '3', 'r', 0,
  /* 1473 */ 'R', 'E', 'M', 'S', '_', 'l', '3', 'r', 0,
  /* 1482 */ 'D', 'I', 'V', 'S', '_', 'l', '3', 'r', 0,
  /* 1491 */ 'R', 'E', 'M', 'U', '_', 'l', '3', 'r', 0,
  /* 1500 */ 'D', 'I', 'V', 'U', '_', 'l', '3', 'r', 0,
  /* 1509 */ 'C', 'R', 'C', '8', '_', 'l', '4', 'r', 0,
  /* 1518 */ 'M', 'A', 'C', 'C', 'S', '_', 'l', '4', 'r', 0,
  /* 1528 */ 'M', 'A', 'C', 'C', 'U', '_', 'l', '4', 'r', 0,
  /* 1538 */ 'L', 'S', 'U', 'B', '_', 'l', '5', 'r', 0,
  /* 1547 */ 'L', 'A', 'D', 'D', '_', 'l', '5', 'r', 0,
  /* 1556 */ 'L', 'D', 'I', 'V', '_', 'l', '5', 'r', 0,
  /* 1565 */ 'L', 'M', 'U', 'L', '_', 'l', '6', 'r', 0,
  /* 1574 */ 'L', 'D', 'A', 'W', 'S', 'P', '_', 'r', 'u', '6', '_', 'R', 'R', 'e', 'g', 's', 0,
  /* 1591 */ 'L', 'D', 'A', 'W', 'S', 'P', '_', 'l', 'r', 'u', '6', '_', 'R', 'R', 'e', 'g', 's', 0,
  /* 1609 */ 'S', 'U', 'B', '_', '2', 'r', 'u', 's', 0,
  /* 1618 */ 'A', 'D', 'D', '_', '2', 'r', 'u', 's', 0,
  /* 1627 */ 'S', 'H', 'L', '_', '2', 'r', 'u', 's', 0,
  /* 1636 */ 'E', 'Q', '_', '2', 'r', 'u', 's', 0,
  /* 1644 */ 'S', 'H', 'R', '_', '2', 'r', 'u', 's', 0,
  /* 1653 */ 'L', 'D', 'W', '_', '2', 'r', 'u', 's', 0,
  /* 1662 */ 'S', 'T', 'W', '_', '2', 'r', 'u', 's', 0,
  /* 1671 */ 'L', 'D', 'A', 'W', 'B', '_', 'l', '2', 'r', 'u', 's', 0,
  /* 1683 */ 'L', 'D', 'A', 'W', 'F', '_', 'l', '2', 'r', 'u', 's', 0,
  /* 1695 */ 'A', 'S', 'H', 'R', '_', 'l', '2', 'r', 'u', 's', 0,
  /* 1706 */ 'M', 'K', 'M', 'S', 'K', '_', 'r', 'u', 's', 0,
  /* 1716 */ 'G', 'E', 'T', 'R', '_', 'r', 'u', 's', 0,
  /* 1725 */ 'C', 'H', 'K', 'C', 'T', '_', 'r', 'u', 's', 0,
  /* 1735 */ 'O', 'U', 'T', 'C', 'T', '_', 'r', 'u', 's', 0,
  /* 1745 */ 'S', 'E', 'X', 'T', '_', 'r', 'u', 's', 0,
  /* 1754 */ 'Z', 'E', 'X', 'T', '_', 'r', 'u', 's', 0,
};

extern const unsigned XCoreInstrNameIndices[] = {
    653U, 693U, 666U, 679U, 657U, 688U, 591U, 606U, 
    574U, 620U, 780U, 564U, 544U, 822U, 557U, 807U, 
    531U, 1618U, 1296U, 703U, 720U, 1097U, 1303U, 1695U, 
    1456U, 921U, 1249U, 849U, 16U, 0U, 402U, 275U, 
    501U, 365U, 206U, 97U, 412U, 284U, 511U, 374U, 
    215U, 105U, 797U, 34U, 1237U, 1043U, 1725U, 753U, 
    224U, 113U, 186U, 79U, 1281U, 1509U, 1419U, 1482U, 
    1500U, 865U, 911U, 928U, 1196U, 166U, 61U, 1636U, 
    1317U, 176U, 70U, 902U, 735U, 761U, 744U, 1217U, 
    1716U, 1116U, 1034U, 1052U, 985U, 995U, 1206U, 952U, 
    1005U, 1015U, 1090U, 979U, 1547U, 1336U, 1352U, 1398U, 
    1427U, 24U, 827U, 7U, 1671U, 1409U, 145U, 42U, 
    433U, 303U, 634U, 1683U, 1438U, 467U, 1591U, 334U, 
    1574U, 383U, 258U, 1556U, 422U, 293U, 445U, 314U, 
    641U, 479U, 345U, 1653U, 1367U, 1565U, 1345U, 1538U, 
    1360U, 1518U, 1528U, 875U, 970U, 1706U, 856U, 1448U, 
    587U, 803U, 1330U, 1070U, 1735U, 1024U, 1125U, 1133U, 
    1176U, 1473U, 1491U, 156U, 52U, 521U, 1185U, 1167U, 
    392U, 266U, 962U, 935U, 1156U, 1227U, 1107U, 1270U, 
    884U, 241U, 129U, 196U, 88U, 1260U, 944U, 1140U, 
    1745U, 1627U, 1310U, 1644U, 1323U, 840U, 1381U, 1390U, 
    456U, 324U, 647U, 490U, 355U, 1662U, 1374U, 1609U, 
    1289U, 893U, 1060U, 1079U, 770U, 1465U, 1148U, 1754U, 
};

static inline void InitXCoreMCInstrInfo(MCInstrInfo *II) {
  II->InitMCInstrInfo(XCoreInsts, XCoreInstrNameIndices, XCoreInstrNameData, 184);
}

} // End llvm namespace 
#endif // GET_INSTRINFO_MC_DESC


#ifdef GET_INSTRINFO_HEADER
#undef GET_INSTRINFO_HEADER
namespace llvm {
struct XCoreGenInstrInfo : public TargetInstrInfoImpl {
  explicit XCoreGenInstrInfo(int SO = -1, int DO = -1);
};
} // End llvm namespace 
#endif // GET_INSTRINFO_HEADER


#ifdef GET_INSTRINFO_CTOR
#undef GET_INSTRINFO_CTOR
namespace llvm {
extern const MCInstrDesc XCoreInsts[];
extern const unsigned XCoreInstrNameIndices[];
extern const char XCoreInstrNameData[];
XCoreGenInstrInfo::XCoreGenInstrInfo(int SO, int DO)
  : TargetInstrInfoImpl(SO, DO) {
  InitMCInstrInfo(XCoreInsts, XCoreInstrNameIndices, XCoreInstrNameData, 184);
}
} // End llvm namespace 
#endif // GET_INSTRINFO_CTOR

