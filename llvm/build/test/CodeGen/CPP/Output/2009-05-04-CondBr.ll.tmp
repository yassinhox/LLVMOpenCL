// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/LLVMContext.h>
#include <llvm/Module.h>
#include <llvm/DerivedTypes.h>
#include <llvm/Constants.h>
#include <llvm/GlobalVariable.h>
#include <llvm/Function.h>
#include <llvm/CallingConv.h>
#include <llvm/BasicBlock.h>
#include <llvm/Instructions.h>
#include <llvm/InlineAsm.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/Assembly/PrintModulePass.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("<stdin>", getGlobalContext());
 
 // Type Definitions
 std::vector<Type*>FuncTy_0_args;
 FuncTy_0_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_0 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_0_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_1 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 
 // Function Declarations
 
 Function* func_some_func = mod->getFunction("some_func");
 if (!func_some_func) {
 func_some_func = Function::Create(
  /*Type=*/FuncTy_0,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"some_func", mod); 
 func_some_func->setCallingConv(CallingConv::C);
 }
 AttrListPtr func_some_func_PAL;
 {
  SmallVector<AttributeWithIndex, 4> Attrs;
  AttributeWithIndex PAWI;
  PAWI.Index = 4294967295U;
 {
    AttrBuilder B;
    B.addAttribute(Attributes::NoUnwind);
    PAWI.Attrs = Attributes::get(mod->getContext(), B);
 }
  Attrs.push_back(PAWI);
  func_some_func_PAL = AttrListPtr::get(mod->getContext(), Attrs);
  
 }
 func_some_func->setAttributes(func_some_func_PAL);
 
 // Global Variable Declarations

 
 // Constant Definitions
 ConstantInt* const_int32_2 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 ConstantInt* const_int32_3 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("3"), 10));
 ConstantInt* const_int32_4 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("7"), 10));
 
 // Global Variable Definitions
 
 // Function Definitions
 
 // Function: some_func (func_some_func)
 {
  Function::arg_iterator args = func_some_func->arg_begin();
  Value* int32_a = args++;
  int32_a->setName("a");
  
  BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_some_func,0);
  BasicBlock* label_if_then = BasicBlock::Create(mod->getContext(), "if.then",func_some_func,0);
  BasicBlock* label_if_end = BasicBlock::Create(mod->getContext(), "if.end",func_some_func,0);
  
  // Block entry (label_entry)
  AllocaInst* ptr_retval = new AllocaInst(IntegerType::get(mod->getContext(), 32), "retval", label_entry);
  AllocaInst* ptr_a_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "a.addr", label_entry);
  StoreInst* void_5 = new StoreInst(int32_a, ptr_a_addr, false, label_entry);
  LoadInst* int32_tmp = new LoadInst(ptr_a_addr, "tmp", false, label_entry);
  BinaryOperator* int32_inc = BinaryOperator::Create(Instruction::Add, int32_tmp, const_int32_2, "inc", label_entry);
  StoreInst* void_6 = new StoreInst(int32_inc, ptr_a_addr, false, label_entry);
  LoadInst* int32_tmp1 = new LoadInst(ptr_a_addr, "tmp1", false, label_entry);
  ICmpInst* int1_cmp = new ICmpInst(*label_entry, ICmpInst::ICMP_SLT, int32_tmp1, const_int32_3, "cmp");
  BranchInst::Create(label_if_then, label_if_end, int1_cmp, label_entry);
  
  // Block if.then (label_if_then)
  StoreInst* void_8 = new StoreInst(const_int32_4, ptr_a_addr, false, label_if_then);
  BranchInst::Create(label_if_end, label_if_then);
  
  // Block if.end (label_if_end)
  LoadInst* int32_tmp2 = new LoadInst(ptr_a_addr, "tmp2", false, label_if_end);
  BinaryOperator* int32_inc3 = BinaryOperator::Create(Instruction::Add, int32_tmp2, const_int32_2, "inc3", label_if_end);
  StoreInst* void_10 = new StoreInst(int32_inc3, ptr_a_addr, false, label_if_end);
  LoadInst* int32_tmp4 = new LoadInst(ptr_a_addr, "tmp4", false, label_if_end);
  StoreInst* void_11 = new StoreInst(int32_tmp4, ptr_retval, false, label_if_end);
  LoadInst* int32_12 = new LoadInst(ptr_retval, "", false, label_if_end);
  ReturnInst::Create(mod->getContext(), int32_12, label_if_end);
  
 }
 
 return mod;
}
