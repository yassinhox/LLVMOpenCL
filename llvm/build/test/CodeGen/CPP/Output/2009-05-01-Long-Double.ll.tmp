// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/LLVMContext.h>
#include <llvm/Module.h>
#include <llvm/DerivedTypes.h>
#include <llvm/Constants.h>
#include <llvm/GlobalVariable.h>
#include <llvm/Function.h>
#include <llvm/CallingConv.h>
#include <llvm/BasicBlock.h>
#include <llvm/Instructions.h>
#include <llvm/InlineAsm.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/Assembly/PrintModulePass.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("<stdin>", getGlobalContext());
 
 // Type Definitions
 std::vector<Type*>FuncTy_0_args;
 FunctionType* FuncTy_0 = FunctionType::get(
  /*Result=*/Type::getX86_FP80Ty(mod->getContext()),
  /*Params=*/FuncTy_0_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_1 = PointerType::get(Type::getX86_FP80Ty(mod->getContext()), 0);
 
 std::vector<Type*>FuncTy_3_args;
 FunctionType* FuncTy_3 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_3_args,
  /*isVarArg=*/true);
 
 PointerType* PointerTy_2 = PointerType::get(FuncTy_3, 0);
 
 
 // Function Declarations
 
 Function* func_some_func = mod->getFunction("some_func");
 if (!func_some_func) {
 func_some_func = Function::Create(
  /*Type=*/FuncTy_0,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"some_func", mod); 
 func_some_func->setCallingConv(CallingConv::C);
 }
 AttrListPtr func_some_func_PAL;
 {
  SmallVector<AttributeWithIndex, 4> Attrs;
  AttributeWithIndex PAWI;
  PAWI.Index = 4294967295U;
 {
    AttrBuilder B;
    B.addAttribute(Attributes::NoUnwind);
    PAWI.Attrs = Attributes::get(mod->getContext(), B);
 }
  Attrs.push_back(PAWI);
  func_some_func_PAL = AttrListPtr::get(mod->getContext(), Attrs);
  
 }
 func_some_func->setAttributes(func_some_func_PAL);
 
 Function* func_other_func = mod->getFunction("other_func");
 if (!func_other_func) {
 func_other_func = Function::Create(
  /*Type=*/FuncTy_3,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"other_func", mod); // (external, no body)
 func_other_func->setCallingConv(CallingConv::C);
 }
 AttrListPtr func_other_func_PAL;
 func_other_func->setAttributes(func_other_func_PAL);
 
 // Global Variable Declarations

 
 // Constant Definitions
 ConstantInt* const_int32_4 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 
 // Global Variable Definitions
 
 // Function Definitions
 
 // Function: some_func (func_some_func)
 {
  
  BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_some_func,0);
  
  // Block entry (label_entry)
  AllocaInst* ptr_retval = new AllocaInst(Type::getX86_FP80Ty(mod->getContext()), "retval", label_entry);
  CallInst* int32_call = CallInst::Create(func_other_func, "call", label_entry);
  int32_call->setCallingConv(CallingConv::C);
  int32_call->setTailCall(false);
  AttrListPtr int32_call_PAL;
  int32_call->setAttributes(int32_call_PAL);
  
  CastInst* other_conv = new SIToFPInst(int32_call, Type::getX86_FP80Ty(mod->getContext()), "conv", label_entry);
  StoreInst* void_5 = new StoreInst(other_conv, ptr_retval, false, label_entry);
  LoadInst* other_6 = new LoadInst(ptr_retval, "", false, label_entry);
  ReturnInst::Create(mod->getContext(), other_6, label_entry);
  
 }
 
 return mod;
}
